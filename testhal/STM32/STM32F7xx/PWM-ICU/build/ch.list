
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00200000 <__vectors_base__>:
  200000:	20000400 	.word	0x20000400
  200004:	002002d9 	.word	0x002002d9
  200008:	002002db 	.word	0x002002db
  20000c:	002002db 	.word	0x002002db
  200010:	002002db 	.word	0x002002db
  200014:	002002db 	.word	0x002002db
  200018:	002002db 	.word	0x002002db
  20001c:	002002db 	.word	0x002002db
  200020:	002002db 	.word	0x002002db
  200024:	002002db 	.word	0x002002db
  200028:	002002db 	.word	0x002002db
  20002c:	00204441 	.word	0x00204441
  200030:	002002db 	.word	0x002002db
  200034:	002002db 	.word	0x002002db
  200038:	002002db 	.word	0x002002db
  20003c:	002002db 	.word	0x002002db
  200040:	002002db 	.word	0x002002db
  200044:	002002db 	.word	0x002002db
  200048:	002002db 	.word	0x002002db
  20004c:	002002db 	.word	0x002002db
  200050:	002002db 	.word	0x002002db
  200054:	002002db 	.word	0x002002db
  200058:	002002db 	.word	0x002002db
  20005c:	002002db 	.word	0x002002db
  200060:	002002db 	.word	0x002002db
  200064:	002002db 	.word	0x002002db
  200068:	002002db 	.word	0x002002db
  20006c:	002002db 	.word	0x002002db
  200070:	002002db 	.word	0x002002db
  200074:	002002db 	.word	0x002002db
  200078:	002002db 	.word	0x002002db
  20007c:	002002db 	.word	0x002002db
  200080:	002002db 	.word	0x002002db
  200084:	002002db 	.word	0x002002db
  200088:	002002db 	.word	0x002002db
  20008c:	002002db 	.word	0x002002db
  200090:	002002db 	.word	0x002002db
  200094:	002002db 	.word	0x002002db
  200098:	002002db 	.word	0x002002db
  20009c:	002002db 	.word	0x002002db
  2000a0:	002013f1 	.word	0x002013f1
  2000a4:	00201421 	.word	0x00201421
  2000a8:	00201451 	.word	0x00201451
  2000ac:	00201481 	.word	0x00201481
  2000b0:	002014c1 	.word	0x002014c1
  2000b4:	002002db 	.word	0x002002db
  2000b8:	002002db 	.word	0x002002db
  2000bc:	002002db 	.word	0x002002db
  2000c0:	002002db 	.word	0x002002db
  2000c4:	002002db 	.word	0x002002db
  2000c8:	002002db 	.word	0x002002db
  2000cc:	002002db 	.word	0x002002db
  2000d0:	002002db 	.word	0x002002db
  2000d4:	00201321 	.word	0x00201321
  2000d8:	002002db 	.word	0x002002db
  2000dc:	002002db 	.word	0x002002db
  2000e0:	002002db 	.word	0x002002db
  2000e4:	002002db 	.word	0x002002db
  2000e8:	002002db 	.word	0x002002db
  2000ec:	002002db 	.word	0x002002db
  2000f0:	002002db 	.word	0x002002db
  2000f4:	002002db 	.word	0x002002db
  2000f8:	002002db 	.word	0x002002db
  2000fc:	002002db 	.word	0x002002db
  200100:	002002db 	.word	0x002002db
  200104:	002002db 	.word	0x002002db
  200108:	00201521 	.word	0x00201521
  20010c:	002002db 	.word	0x002002db
  200110:	002002db 	.word	0x002002db
  200114:	002002db 	.word	0x002002db
  200118:	002002db 	.word	0x002002db
  20011c:	002002db 	.word	0x002002db
  200120:	002002db 	.word	0x002002db
  200124:	002002db 	.word	0x002002db
  200128:	002002db 	.word	0x002002db
  20012c:	002002db 	.word	0x002002db
  200130:	002002db 	.word	0x002002db
  200134:	002002db 	.word	0x002002db
  200138:	002002db 	.word	0x002002db
  20013c:	002002db 	.word	0x002002db
  200140:	002002db 	.word	0x002002db
  200144:	002002db 	.word	0x002002db
  200148:	002002db 	.word	0x002002db
  20014c:	002002db 	.word	0x002002db
  200150:	002002db 	.word	0x002002db
  200154:	002002db 	.word	0x002002db
  200158:	002002db 	.word	0x002002db
  20015c:	002002db 	.word	0x002002db
  200160:	002002db 	.word	0x002002db
  200164:	002002db 	.word	0x002002db
  200168:	002002db 	.word	0x002002db
  20016c:	002002db 	.word	0x002002db
  200170:	002002db 	.word	0x002002db
  200174:	002002db 	.word	0x002002db
  200178:	002002db 	.word	0x002002db
  20017c:	002002db 	.word	0x002002db
  200180:	002002db 	.word	0x002002db
  200184:	002002db 	.word	0x002002db
  200188:	002002db 	.word	0x002002db
  20018c:	002002db 	.word	0x002002db
  200190:	002002db 	.word	0x002002db
  200194:	002002db 	.word	0x002002db
  200198:	002002db 	.word	0x002002db
  20019c:	002002db 	.word	0x002002db
  2001a0:	002002db 	.word	0x002002db
  2001a4:	002002db 	.word	0x002002db
  2001a8:	002002db 	.word	0x002002db
  2001ac:	002002db 	.word	0x002002db
  2001b0:	002002db 	.word	0x002002db
  2001b4:	002002db 	.word	0x002002db
  2001b8:	002002db 	.word	0x002002db
  2001bc:	002002db 	.word	0x002002db
  2001c0:	002002db 	.word	0x002002db
  2001c4:	002002db 	.word	0x002002db
  2001c8:	002002db 	.word	0x002002db
  2001cc:	002002db 	.word	0x002002db
  2001d0:	002002db 	.word	0x002002db
  2001d4:	002002db 	.word	0x002002db
  2001d8:	002002db 	.word	0x002002db
  2001dc:	002002db 	.word	0x002002db
  2001e0:	002002db 	.word	0x002002db
  2001e4:	002002db 	.word	0x002002db
  2001e8:	002002db 	.word	0x002002db
  2001ec:	002002db 	.word	0x002002db
  2001f0:	002002db 	.word	0x002002db
  2001f4:	002002db 	.word	0x002002db
  2001f8:	002002db 	.word	0x002002db
  2001fc:	002002db 	.word	0x002002db

Disassembly of section .text:

00200200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <_crt0_entry+0x9c>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <_crt0_entry+0xa0>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
  20020e:	4825      	ldr	r0, [pc, #148]	; (2002a4 <_crt0_entry+0xa4>)
                ldr     r1, =SCB_VTOR
  200210:	4925      	ldr	r1, [pc, #148]	; (2002a8 <_crt0_entry+0xa8>)
                str     r0, [r1]
  200212:	6008      	str	r0, [r1, #0]
                movt    r1, #SCB_FPDSCR >> 16
                str     r0, [r1]
#endif

                /* CONTROL register initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
  200214:	2002      	movs	r0, #2
                msr     CONTROL, r0
  200216:	f380 8814 	msr	CONTROL, r0
                isb
  20021a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
  20021e:	f000 f9c7 	bl	2005b0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200222:	f001 ff95 	bl	202150 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  20022a:	4920      	ldr	r1, [pc, #128]	; (2002ac <_crt0_entry+0xac>)
                ldr     r2, =__main_stack_end__
  20022c:	4a1b      	ldr	r2, [pc, #108]	; (20029c <_crt0_entry+0x9c>)
.Lmsloop:
                cmp     r1, r2
  20022e:	4291      	cmp	r1, r2
                itt     lo
  200230:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lmsloop
  200236:	e7fa      	bcc.n	20022e <_crt0_entry+0x2e>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  200238:	491d      	ldr	r1, [pc, #116]	; (2002b0 <_crt0_entry+0xb0>)
                ldr     r2, =__process_stack_end__
  20023a:	4a19      	ldr	r2, [pc, #100]	; (2002a0 <_crt0_entry+0xa0>)
.Lpsloop:
                cmp     r1, r2
  20023c:	4291      	cmp	r1, r2
                itt     lo
  20023e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lpsloop
  200244:	e7fa      	bcc.n	20023c <_crt0_entry+0x3c>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
  200246:	491b      	ldr	r1, [pc, #108]	; (2002b4 <_crt0_entry+0xb4>)
                ldr     r2, =__data_base__
  200248:	4a1b      	ldr	r2, [pc, #108]	; (2002b8 <_crt0_entry+0xb8>)
                ldr     r3, =__data_end__
  20024a:	4b1c      	ldr	r3, [pc, #112]	; (2002bc <_crt0_entry+0xbc>)
.Ldloop:
                cmp     r2, r3
  20024c:	429a      	cmp	r2, r3
                ittt    lo
  20024e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     .Ldloop
  200258:	e7f8      	bcc.n	20024c <_crt0_entry+0x4c>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
  20025a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
  20025c:	4918      	ldr	r1, [pc, #96]	; (2002c0 <_crt0_entry+0xc0>)
                ldr     r2, =__bss_end__
  20025e:	4a19      	ldr	r2, [pc, #100]	; (2002c4 <_crt0_entry+0xc4>)
.Lbloop:
                cmp     r1, r2
  200260:	4291      	cmp	r1, r2
                itt     lo
  200262:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lbloop
  200268:	e7fa      	bcc.n	200260 <_crt0_entry+0x60>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  20026a:	f000 f9b9 	bl	2005e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  20026e:	f000 f9a7 	bl	2005c0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
  200272:	4c15      	ldr	r4, [pc, #84]	; (2002c8 <_crt0_entry+0xc8>)
                ldr     r5, =__init_array_end__
  200274:	4d15      	ldr	r5, [pc, #84]	; (2002cc <_crt0_entry+0xcc>)
.Linitloop:
                cmp     r4, r5
  200276:	42ac      	cmp	r4, r5
                bge     .Lendinitloop
  200278:	da03      	bge.n	200282 <_crt0_entry+0x82>
                ldr     r1, [r4], #4
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  20027e:	4788      	blx	r1
                b       .Linitloop
  200280:	e7f9      	b.n	200276 <_crt0_entry+0x76>
.Lendinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200282:	f004 f97d 	bl	204580 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
  200286:	4c12      	ldr	r4, [pc, #72]	; (2002d0 <_crt0_entry+0xd0>)
                ldr     r5, =__fini_array_end__
  200288:	4d12      	ldr	r5, [pc, #72]	; (2002d4 <_crt0_entry+0xd4>)
.Lfiniloop:
                cmp     r4, r5
  20028a:	42ac      	cmp	r4, r5
                bge     .Lendfiniloop
  20028c:	da03      	bge.n	200296 <_crt0_entry+0x96>
                ldr     r1, [r4], #4
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200292:	4788      	blx	r1
                b       .Lfiniloop
  200294:	e7f9      	b.n	20028a <_crt0_entry+0x8a>
.Lendfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  200296:	f000 b99b 	b.w	2005d0 <__default_exit>
  20029a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
  20029c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a0:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a4:	00200000 	.word	0x00200000
                ldr     r1, =SCB_VTOR
  2002a8:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
  2002b4:	08004ab0 	.word	0x08004ab0
                ldr     r2, =__data_base__
  2002b8:	20010000 	.word	0x20010000
                ldr     r3, =__data_end__
  2002bc:	20010000 	.word	0x20010000
                ldr     r1, =__bss_base__
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
  2002c4:	20001334 	.word	0x20001334
                ldr     r4, =__init_array_base__
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end__
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_base__
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end__
  2002d4:	00200200 	.word	0x00200200

002002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
  2002d8:	e792      	b.n	200200 <_crt0_entry>

002002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
  2002da:	f000 f800 	bl	2002de <_unhandled_exception>

002002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
  2002de:	e7fe      	b.n	2002de <_unhandled_exception>

002002e0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e8:	f8d0 d00c 	ldr.w	sp, [r0, #12]

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002f0 <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
  2002f0:	f002 f84e 	bl	202390 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002f4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002f6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002fa:	4628      	mov	r0, r5
                blx     r4
  2002fc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
  2002fe:	2000      	movs	r0, #0
                bl      chThdExit
  200300:	f003 fcb6 	bl	203c70 <chThdExit>
1:              b       1b
  200304:	e7fe      	b.n	200304 <__port_thread_start+0x14>

00200306 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
  200306:	f002 f81b 	bl	202340 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
  20030a:	f003 f8f1 	bl	2034f0 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
  20030e:	f002 f83f 	bl	202390 <__dbg_check_unlock>

00200312 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  200312:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
1:              b       1b
  200314:	e7fe      	b.n	200314 <__port_exit_from_isr+0x2>
	...

00200318 <memcpy>:
  200318:	4684      	mov	ip, r0
  20031a:	ea41 0300 	orr.w	r3, r1, r0
  20031e:	f013 0303 	ands.w	r3, r3, #3
  200322:	d16d      	bne.n	200400 <memcpy+0xe8>
  200324:	3a40      	subs	r2, #64	; 0x40
  200326:	d341      	bcc.n	2003ac <memcpy+0x94>
  200328:	f851 3b04 	ldr.w	r3, [r1], #4
  20032c:	f840 3b04 	str.w	r3, [r0], #4
  200330:	f851 3b04 	ldr.w	r3, [r1], #4
  200334:	f840 3b04 	str.w	r3, [r0], #4
  200338:	f851 3b04 	ldr.w	r3, [r1], #4
  20033c:	f840 3b04 	str.w	r3, [r0], #4
  200340:	f851 3b04 	ldr.w	r3, [r1], #4
  200344:	f840 3b04 	str.w	r3, [r0], #4
  200348:	f851 3b04 	ldr.w	r3, [r1], #4
  20034c:	f840 3b04 	str.w	r3, [r0], #4
  200350:	f851 3b04 	ldr.w	r3, [r1], #4
  200354:	f840 3b04 	str.w	r3, [r0], #4
  200358:	f851 3b04 	ldr.w	r3, [r1], #4
  20035c:	f840 3b04 	str.w	r3, [r0], #4
  200360:	f851 3b04 	ldr.w	r3, [r1], #4
  200364:	f840 3b04 	str.w	r3, [r0], #4
  200368:	f851 3b04 	ldr.w	r3, [r1], #4
  20036c:	f840 3b04 	str.w	r3, [r0], #4
  200370:	f851 3b04 	ldr.w	r3, [r1], #4
  200374:	f840 3b04 	str.w	r3, [r0], #4
  200378:	f851 3b04 	ldr.w	r3, [r1], #4
  20037c:	f840 3b04 	str.w	r3, [r0], #4
  200380:	f851 3b04 	ldr.w	r3, [r1], #4
  200384:	f840 3b04 	str.w	r3, [r0], #4
  200388:	f851 3b04 	ldr.w	r3, [r1], #4
  20038c:	f840 3b04 	str.w	r3, [r0], #4
  200390:	f851 3b04 	ldr.w	r3, [r1], #4
  200394:	f840 3b04 	str.w	r3, [r0], #4
  200398:	f851 3b04 	ldr.w	r3, [r1], #4
  20039c:	f840 3b04 	str.w	r3, [r0], #4
  2003a0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003a4:	f840 3b04 	str.w	r3, [r0], #4
  2003a8:	3a40      	subs	r2, #64	; 0x40
  2003aa:	d2bd      	bcs.n	200328 <memcpy+0x10>
  2003ac:	3230      	adds	r2, #48	; 0x30
  2003ae:	d311      	bcc.n	2003d4 <memcpy+0xbc>
  2003b0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003b4:	f840 3b04 	str.w	r3, [r0], #4
  2003b8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003bc:	f840 3b04 	str.w	r3, [r0], #4
  2003c0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003c4:	f840 3b04 	str.w	r3, [r0], #4
  2003c8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003cc:	f840 3b04 	str.w	r3, [r0], #4
  2003d0:	3a10      	subs	r2, #16
  2003d2:	d2ed      	bcs.n	2003b0 <memcpy+0x98>
  2003d4:	320c      	adds	r2, #12
  2003d6:	d305      	bcc.n	2003e4 <memcpy+0xcc>
  2003d8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003dc:	f840 3b04 	str.w	r3, [r0], #4
  2003e0:	3a04      	subs	r2, #4
  2003e2:	d2f9      	bcs.n	2003d8 <memcpy+0xc0>
  2003e4:	3204      	adds	r2, #4
  2003e6:	d008      	beq.n	2003fa <memcpy+0xe2>
  2003e8:	07d2      	lsls	r2, r2, #31
  2003ea:	bf1c      	itt	ne
  2003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  2003f0:	f800 3b01 	strbne.w	r3, [r0], #1
  2003f4:	d301      	bcc.n	2003fa <memcpy+0xe2>
  2003f6:	880b      	ldrh	r3, [r1, #0]
  2003f8:	8003      	strh	r3, [r0, #0]
  2003fa:	4660      	mov	r0, ip
  2003fc:	4770      	bx	lr
  2003fe:	bf00      	nop
  200400:	2a08      	cmp	r2, #8
  200402:	d313      	bcc.n	20042c <memcpy+0x114>
  200404:	078b      	lsls	r3, r1, #30
  200406:	d08d      	beq.n	200324 <memcpy+0xc>
  200408:	f010 0303 	ands.w	r3, r0, #3
  20040c:	d08a      	beq.n	200324 <memcpy+0xc>
  20040e:	f1c3 0304 	rsb	r3, r3, #4
  200412:	1ad2      	subs	r2, r2, r3
  200414:	07db      	lsls	r3, r3, #31
  200416:	bf1c      	itt	ne
  200418:	f811 3b01 	ldrbne.w	r3, [r1], #1
  20041c:	f800 3b01 	strbne.w	r3, [r0], #1
  200420:	d380      	bcc.n	200324 <memcpy+0xc>
  200422:	f831 3b02 	ldrh.w	r3, [r1], #2
  200426:	f820 3b02 	strh.w	r3, [r0], #2
  20042a:	e77b      	b.n	200324 <memcpy+0xc>
  20042c:	3a04      	subs	r2, #4
  20042e:	d3d9      	bcc.n	2003e4 <memcpy+0xcc>
  200430:	3a01      	subs	r2, #1
  200432:	f811 3b01 	ldrb.w	r3, [r1], #1
  200436:	f800 3b01 	strb.w	r3, [r0], #1
  20043a:	d2f9      	bcs.n	200430 <memcpy+0x118>
  20043c:	780b      	ldrb	r3, [r1, #0]
  20043e:	7003      	strb	r3, [r0, #0]
  200440:	784b      	ldrb	r3, [r1, #1]
  200442:	7043      	strb	r3, [r0, #1]
  200444:	788b      	ldrb	r3, [r1, #2]
  200446:	7083      	strb	r3, [r0, #2]
  200448:	4660      	mov	r0, ip
  20044a:	4770      	bx	lr
  20044c:	0000      	movs	r0, r0
	...

00200450 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  200450:	f3bf 8f4f 	dsb	sy
}
  200454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  200456:	f3bf 8f6f 	isb	sy
}
  20045a:	bf00      	nop
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20045c:	4b0b      	ldr	r3, [pc, #44]	; (20048c <SCB_EnableICache+0x3c>)
  20045e:	2200      	movs	r2, #0
  200460:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  200464:	f3bf 8f4f 	dsb	sy
}
  200468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  20046a:	f3bf 8f6f 	isb	sy
}
  20046e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  200470:	4b06      	ldr	r3, [pc, #24]	; (20048c <SCB_EnableICache+0x3c>)
  200472:	695b      	ldr	r3, [r3, #20]
  200474:	4a05      	ldr	r2, [pc, #20]	; (20048c <SCB_EnableICache+0x3c>)
  200476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20047a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20047c:	f3bf 8f4f 	dsb	sy
}
  200480:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  200482:	f3bf 8f6f 	isb	sy
}
  200486:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
  200488:	bf00      	nop
  20048a:	4770      	bx	lr
  20048c:	e000ed00 	.word	0xe000ed00

00200490 <SCB_InvalidateICache>:
  __ASM volatile ("dsb 0xF":::"memory");
  200490:	f3bf 8f4f 	dsb	sy
}
  200494:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  200496:	f3bf 8f6f 	isb	sy
}
  20049a:	bf00      	nop
__STATIC_INLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
  20049c:	4b05      	ldr	r3, [pc, #20]	; (2004b4 <SCB_InvalidateICache+0x24>)
  20049e:	2200      	movs	r2, #0
  2004a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  2004a4:	f3bf 8f4f 	dsb	sy
}
  2004a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  2004aa:	f3bf 8f6f 	isb	sy
}
  2004ae:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
  2004b0:	bf00      	nop
  2004b2:	4770      	bx	lr
  2004b4:	e000ed00 	.word	0xe000ed00
	...

002004c0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
  2004c0:	b084      	sub	sp, #16
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  2004c2:	4b1e      	ldr	r3, [pc, #120]	; (20053c <SCB_EnableDCache+0x7c>)
  2004c4:	2200      	movs	r2, #0
  2004c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2004ca:	f3bf 8f4f 	dsb	sy
}
  2004ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
  2004d0:	4b1a      	ldr	r3, [pc, #104]	; (20053c <SCB_EnableDCache+0x7c>)
  2004d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  2004d6:	9301      	str	r3, [sp, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2004d8:	9b01      	ldr	r3, [sp, #4]
  2004da:	0b5b      	lsrs	r3, r3, #13
  2004dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
  2004e0:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2004e2:	9b01      	ldr	r3, [sp, #4]
  2004e4:	08db      	lsrs	r3, r3, #3
  2004e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  2004ea:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2004ec:	9b03      	ldr	r3, [sp, #12]
  2004ee:	015a      	lsls	r2, r3, #5
  2004f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  2004f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
  2004f6:	9a02      	ldr	r2, [sp, #8]
  2004f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2004fa:	4910      	ldr	r1, [pc, #64]	; (20053c <SCB_EnableDCache+0x7c>)
  2004fc:	4313      	orrs	r3, r2
  2004fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  200502:	9b02      	ldr	r3, [sp, #8]
  200504:	1e5a      	subs	r2, r3, #1
  200506:	9202      	str	r2, [sp, #8]
  200508:	2b00      	cmp	r3, #0
  20050a:	d1ef      	bne.n	2004ec <SCB_EnableDCache+0x2c>
    } while(sets-- != 0U);
  20050c:	9b03      	ldr	r3, [sp, #12]
  20050e:	1e5a      	subs	r2, r3, #1
  200510:	9203      	str	r2, [sp, #12]
  200512:	2b00      	cmp	r3, #0
  200514:	d1e5      	bne.n	2004e2 <SCB_EnableDCache+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
  200516:	f3bf 8f4f 	dsb	sy
}
  20051a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  20051c:	4b07      	ldr	r3, [pc, #28]	; (20053c <SCB_EnableDCache+0x7c>)
  20051e:	695b      	ldr	r3, [r3, #20]
  200520:	4a06      	ldr	r2, [pc, #24]	; (20053c <SCB_EnableDCache+0x7c>)
  200522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200526:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  200528:	f3bf 8f4f 	dsb	sy
}
  20052c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  20052e:	f3bf 8f6f 	isb	sy
}
  200532:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
  200534:	bf00      	nop
  200536:	b004      	add	sp, #16
  200538:	4770      	bx	lr
  20053a:	bf00      	nop
  20053c:	e000ed00 	.word	0xe000ed00

00200540 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
  200540:	b084      	sub	sp, #16
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  200542:	4b19      	ldr	r3, [pc, #100]	; (2005a8 <SCB_CleanDCache+0x68>)
  200544:	2200      	movs	r2, #0
  200546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  20054a:	f3bf 8f4f 	dsb	sy
}
  20054e:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
  200550:	4b15      	ldr	r3, [pc, #84]	; (2005a8 <SCB_CleanDCache+0x68>)
  200552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  200556:	9301      	str	r3, [sp, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  200558:	9b01      	ldr	r3, [sp, #4]
  20055a:	0b5b      	lsrs	r3, r3, #13
  20055c:	f3c3 030e 	ubfx	r3, r3, #0, #15
  200560:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  200562:	9b01      	ldr	r3, [sp, #4]
  200564:	08db      	lsrs	r3, r3, #3
  200566:	f3c3 0309 	ubfx	r3, r3, #0, #10
  20056a:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  20056c:	9b03      	ldr	r3, [sp, #12]
  20056e:	015a      	lsls	r2, r3, #5
  200570:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  200574:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
  200576:	9a02      	ldr	r2, [sp, #8]
  200578:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  20057a:	490b      	ldr	r1, [pc, #44]	; (2005a8 <SCB_CleanDCache+0x68>)
  20057c:	4313      	orrs	r3, r2
  20057e:	f8c1 326c 	str.w	r3, [r1, #620]	; 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  200582:	9b02      	ldr	r3, [sp, #8]
  200584:	1e5a      	subs	r2, r3, #1
  200586:	9202      	str	r2, [sp, #8]
  200588:	2b00      	cmp	r3, #0
  20058a:	d1ef      	bne.n	20056c <SCB_CleanDCache+0x2c>
    } while(sets-- != 0U);
  20058c:	9b03      	ldr	r3, [sp, #12]
  20058e:	1e5a      	subs	r2, r3, #1
  200590:	9203      	str	r2, [sp, #12]
  200592:	2b00      	cmp	r3, #0
  200594:	d1e5      	bne.n	200562 <SCB_CleanDCache+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
  200596:	f3bf 8f4f 	dsb	sy
}
  20059a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  20059c:	f3bf 8f6f 	isb	sy
}
  2005a0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
  2005a2:	bf00      	nop
  2005a4:	b004      	add	sp, #16
  2005a6:	4770      	bx	lr
  2005a8:	e000ed00 	.word	0xe000ed00
  2005ac:	00000000 	.word	0x00000000

002005b0 <__cpu_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __cpu_init(void) {
  2005b0:	b508      	push	{r3, lr}

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  2005b2:	f7ff ff4d 	bl	200450 <SCB_EnableICache>
  SCB_EnableDCache();
  2005b6:	f7ff ff83 	bl	2004c0 <SCB_EnableDCache>
#endif
}
  2005ba:	bf00      	nop
  2005bc:	bd08      	pop	{r3, pc}
  2005be:	bf00      	nop

002005c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
  2005c0:	bf00      	nop
  2005c2:	4770      	bx	lr
	...

002005d0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  2005d0:	e7fe      	b.n	2005d0 <__default_exit>
  2005d2:	bf00      	nop
	...

002005e0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2005e0:	b500      	push	{lr}
  2005e2:	b085      	sub	sp, #20
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2005e4:	4b19      	ldr	r3, [pc, #100]	; (20064c <__init_ram_areas+0x6c>)
  2005e6:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
  2005e8:	9b03      	ldr	r3, [sp, #12]
  2005ea:	681b      	ldr	r3, [r3, #0]
  2005ec:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
  2005ee:	9b03      	ldr	r3, [sp, #12]
  2005f0:	685b      	ldr	r3, [r3, #4]
  2005f2:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
  2005f4:	e009      	b.n	20060a <__init_ram_areas+0x2a>
      *p = *tp;
  2005f6:	9b02      	ldr	r3, [sp, #8]
  2005f8:	681a      	ldr	r2, [r3, #0]
  2005fa:	9b01      	ldr	r3, [sp, #4]
  2005fc:	601a      	str	r2, [r3, #0]
      p++;
  2005fe:	9b01      	ldr	r3, [sp, #4]
  200600:	3304      	adds	r3, #4
  200602:	9301      	str	r3, [sp, #4]
      tp++;
  200604:	9b02      	ldr	r3, [sp, #8]
  200606:	3304      	adds	r3, #4
  200608:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
  20060a:	9b03      	ldr	r3, [sp, #12]
  20060c:	689b      	ldr	r3, [r3, #8]
  20060e:	9a01      	ldr	r2, [sp, #4]
  200610:	429a      	cmp	r2, r3
  200612:	d3f0      	bcc.n	2005f6 <__init_ram_areas+0x16>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
  200614:	e005      	b.n	200622 <__init_ram_areas+0x42>
      *p = 0;
  200616:	9b01      	ldr	r3, [sp, #4]
  200618:	2200      	movs	r2, #0
  20061a:	601a      	str	r2, [r3, #0]
      p++;
  20061c:	9b01      	ldr	r3, [sp, #4]
  20061e:	3304      	adds	r3, #4
  200620:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
  200622:	9b03      	ldr	r3, [sp, #12]
  200624:	68db      	ldr	r3, [r3, #12]
  200626:	9a01      	ldr	r2, [sp, #4]
  200628:	429a      	cmp	r2, r3
  20062a:	d3f4      	bcc.n	200616 <__init_ram_areas+0x36>
    }
    rap++;
  20062c:	9b03      	ldr	r3, [sp, #12]
  20062e:	3310      	adds	r3, #16
  200630:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
  200632:	9b03      	ldr	r3, [sp, #12]
  200634:	4a06      	ldr	r2, [pc, #24]	; (200650 <__init_ram_areas+0x70>)
  200636:	4293      	cmp	r3, r2
  200638:	d3d6      	bcc.n	2005e8 <__init_ram_areas+0x8>
#if CORTEX_MODEL == 7
  /* PM0253 - 4.8.7 Cache maintenance design hints and tips - required
     for self-modifying code.*/
  SCB_CleanDCache();
  20063a:	f7ff ff81 	bl	200540 <SCB_CleanDCache>
  SCB_InvalidateICache();
  20063e:	f7ff ff27 	bl	200490 <SCB_InvalidateICache>
#endif
#endif
}
  200642:	bf00      	nop
  200644:	b005      	add	sp, #20
  200646:	f85d fb04 	ldr.w	pc, [sp], #4
  20064a:	bf00      	nop
  20064c:	080045e8 	.word	0x080045e8
  200650:	08004668 	.word	0x08004668
	...

00200660 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
  200660:	bf00      	nop
  200662:	4770      	bx	lr
	...

00200670 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
  200670:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
  200672:	f7ff fff5 	bl	200660 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
  200676:	f000 fffb 	bl	201670 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
  20067a:	f001 f8f1 	bl	201860 <_pal_lld_init>
#endif
#if (HAL_USE_I2S == TRUE) || defined(__DOXYGEN__)
  i2sInit();
#endif
#if (HAL_USE_ICU == TRUE) || defined(__DOXYGEN__)
  icuInit();
  20067e:	f000 fc07 	bl	200e90 <icuInit>
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
  200682:	f000 fc1d 	bl	200ec0 <pwmInit>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
  200686:	f000 fd43 	bl	201110 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
  20068a:	f001 fd69 	bl	202160 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
  20068e:	f000 f847 	bl	200720 <stInit>
#endif
}
  200692:	bf00      	nop
  200694:	bd08      	pop	{r3, pc}
  200696:	bf00      	nop
	...

002006a0 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  2006a0:	4b01      	ldr	r3, [pc, #4]	; (2006a8 <st_lld_get_counter+0x8>)
  2006a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  2006a4:	4618      	mov	r0, r3
  2006a6:	4770      	bx	lr
  2006a8:	40000c00 	.word	0x40000c00
  2006ac:	00000000 	.word	0x00000000

002006b0 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
  2006b0:	b082      	sub	sp, #8
  2006b2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
  2006b4:	4a05      	ldr	r2, [pc, #20]	; (2006cc <st_lld_start_alarm+0x1c>)
  2006b6:	9b01      	ldr	r3, [sp, #4]
  2006b8:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  2006ba:	4b04      	ldr	r3, [pc, #16]	; (2006cc <st_lld_start_alarm+0x1c>)
  2006bc:	2200      	movs	r2, #0
  2006be:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  2006c0:	4b02      	ldr	r3, [pc, #8]	; (2006cc <st_lld_start_alarm+0x1c>)
  2006c2:	2202      	movs	r2, #2
  2006c4:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
  2006c6:	bf00      	nop
  2006c8:	b002      	add	sp, #8
  2006ca:	4770      	bx	lr
  2006cc:	40000c00 	.word	0x40000c00

002006d0 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
  2006d0:	4b02      	ldr	r3, [pc, #8]	; (2006dc <st_lld_stop_alarm+0xc>)
  2006d2:	2200      	movs	r2, #0
  2006d4:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
  2006d6:	bf00      	nop
  2006d8:	4770      	bx	lr
  2006da:	bf00      	nop
  2006dc:	40000c00 	.word	0x40000c00

002006e0 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
  2006e0:	b082      	sub	sp, #8
  2006e2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
  2006e4:	4a02      	ldr	r2, [pc, #8]	; (2006f0 <st_lld_set_alarm+0x10>)
  2006e6:	9b01      	ldr	r3, [sp, #4]
  2006e8:	6353      	str	r3, [r2, #52]	; 0x34
}
  2006ea:	bf00      	nop
  2006ec:	b002      	add	sp, #8
  2006ee:	4770      	bx	lr
  2006f0:	40000c00 	.word	0x40000c00
	...

00200700 <st_lld_is_alarm_active>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
  200700:	4b05      	ldr	r3, [pc, #20]	; (200718 <st_lld_is_alarm_active+0x18>)
  200702:	68db      	ldr	r3, [r3, #12]
  200704:	f003 0302 	and.w	r3, r3, #2
  200708:	2b00      	cmp	r3, #0
  20070a:	bf14      	ite	ne
  20070c:	2301      	movne	r3, #1
  20070e:	2300      	moveq	r3, #0
  200710:	b2db      	uxtb	r3, r3
}
  200712:	4618      	mov	r0, r3
  200714:	4770      	bx	lr
  200716:	bf00      	nop
  200718:	40000c00 	.word	0x40000c00
  20071c:	00000000 	.word	0x00000000

00200720 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
  200720:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
  200722:	f001 f99d 	bl	201a60 <st_lld_init>
}
  200726:	bf00      	nop
  200728:	bd08      	pop	{r3, pc}
  20072a:	bf00      	nop
  20072c:	0000      	movs	r0, r0
	...

00200730 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
  200730:	b508      	push	{r3, lr}

  return st_lld_get_counter();
  200732:	f7ff ffb5 	bl	2006a0 <st_lld_get_counter>
  200736:	4603      	mov	r3, r0
}
  200738:	4618      	mov	r0, r3
  20073a:	bd08      	pop	{r3, pc}
  20073c:	0000      	movs	r0, r0
	...

00200740 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
  200740:	b500      	push	{lr}
  200742:	b083      	sub	sp, #12
  200744:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
  200746:	f000 f833 	bl	2007b0 <stIsAlarmActive>
  20074a:	4603      	mov	r3, r0
  20074c:	2b00      	cmp	r3, #0
  20074e:	d002      	beq.n	200756 <stStartAlarm+0x16>
  200750:	4804      	ldr	r0, [pc, #16]	; (200764 <stStartAlarm+0x24>)
  200752:	f001 fda5 	bl	2022a0 <chSysHalt>

  st_lld_start_alarm(abstime);
  200756:	9801      	ldr	r0, [sp, #4]
  200758:	f7ff ffaa 	bl	2006b0 <st_lld_start_alarm>
}
  20075c:	bf00      	nop
  20075e:	b003      	add	sp, #12
  200760:	f85d fb04 	ldr.w	pc, [sp], #4
  200764:	08004668 	.word	0x08004668
	...

00200770 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
  200770:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
  200772:	f7ff ffad 	bl	2006d0 <st_lld_stop_alarm>
}
  200776:	bf00      	nop
  200778:	bd08      	pop	{r3, pc}
  20077a:	bf00      	nop
  20077c:	0000      	movs	r0, r0
	...

00200780 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
  200780:	b500      	push	{lr}
  200782:	b083      	sub	sp, #12
  200784:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
  200786:	f000 f813 	bl	2007b0 <stIsAlarmActive>
  20078a:	4603      	mov	r3, r0
  20078c:	f083 0301 	eor.w	r3, r3, #1
  200790:	b2db      	uxtb	r3, r3
  200792:	2b00      	cmp	r3, #0
  200794:	d002      	beq.n	20079c <stSetAlarm+0x1c>
  200796:	4805      	ldr	r0, [pc, #20]	; (2007ac <stSetAlarm+0x2c>)
  200798:	f001 fd82 	bl	2022a0 <chSysHalt>

  st_lld_set_alarm(abstime);
  20079c:	9801      	ldr	r0, [sp, #4]
  20079e:	f7ff ff9f 	bl	2006e0 <st_lld_set_alarm>
}
  2007a2:	bf00      	nop
  2007a4:	b003      	add	sp, #12
  2007a6:	f85d fb04 	ldr.w	pc, [sp], #4
  2007aa:	bf00      	nop
  2007ac:	08004678 	.word	0x08004678

002007b0 <stIsAlarmActive>:
 * @retval false        if the alarm is not active.
 * @retval true         is the alarm is active
 *
 * @api
 */
bool stIsAlarmActive(void) {
  2007b0:	b508      	push	{r3, lr}

  return st_lld_is_alarm_active();
  2007b2:	f7ff ffa5 	bl	200700 <st_lld_is_alarm_active>
  2007b6:	4603      	mov	r3, r0
}
  2007b8:	4618      	mov	r0, r3
  2007ba:	bd08      	pop	{r3, pc}
  2007bc:	0000      	movs	r0, r0
	...

002007c0 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
  2007c0:	b500      	push	{lr}
  2007c2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  2007c4:	b672      	cpsid	i
}
  2007c6:	bf00      	nop
  2007c8:	2330      	movs	r3, #48	; 0x30
  2007ca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2007cc:	9b01      	ldr	r3, [sp, #4]
  2007ce:	f383 8811 	msr	BASEPRI, r3
}
  2007d2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  2007d4:	b662      	cpsie	i
}
  2007d6:	bf00      	nop
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
  2007d8:	bf00      	nop

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
  2007da:	f001 fdb1 	bl	202340 <__dbg_check_lock>
}
  2007de:	bf00      	nop
  2007e0:	b003      	add	sp, #12
  2007e2:	f85d fb04 	ldr.w	pc, [sp], #4
  2007e6:	bf00      	nop
	...

002007f0 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
  2007f0:	b500      	push	{lr}
  2007f2:	b083      	sub	sp, #12

  __dbg_check_unlock();
  2007f4:	f001 fdcc 	bl	202390 <__dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  2007f8:	4b12      	ldr	r3, [pc, #72]	; (200844 <chSysUnlock.lto_priv.1+0x54>)
  2007fa:	681b      	ldr	r3, [r3, #0]
  2007fc:	4a11      	ldr	r2, [pc, #68]	; (200844 <chSysUnlock.lto_priv.1+0x54>)
  2007fe:	4293      	cmp	r3, r2
  200800:	bf14      	ite	ne
  200802:	2301      	movne	r3, #1
  200804:	2300      	moveq	r3, #0
  200806:	b2db      	uxtb	r3, r3
  200808:	2b00      	cmp	r3, #0
  20080a:	d00f      	beq.n	20082c <chSysUnlock.lto_priv.1+0x3c>
  20080c:	4b0d      	ldr	r3, [pc, #52]	; (200844 <chSysUnlock.lto_priv.1+0x54>)
  20080e:	68db      	ldr	r3, [r3, #12]
  200810:	689a      	ldr	r2, [r3, #8]
  200812:	4b0c      	ldr	r3, [pc, #48]	; (200844 <chSysUnlock.lto_priv.1+0x54>)
  200814:	681b      	ldr	r3, [r3, #0]
  200816:	689b      	ldr	r3, [r3, #8]
  200818:	429a      	cmp	r2, r3
  20081a:	bf34      	ite	cc
  20081c:	2301      	movcc	r3, #1
  20081e:	2300      	movcs	r3, #0
  200820:	b2db      	uxtb	r3, r3
  200822:	2b00      	cmp	r3, #0
  200824:	d002      	beq.n	20082c <chSysUnlock.lto_priv.1+0x3c>
  200826:	4808      	ldr	r0, [pc, #32]	; (200848 <chSysUnlock.lto_priv.1+0x58>)
  200828:	f001 fd3a 	bl	2022a0 <chSysHalt>
  20082c:	2300      	movs	r3, #0
  20082e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200830:	9b01      	ldr	r3, [sp, #4]
  200832:	f383 8811 	msr	BASEPRI, r3
}
  200836:	bf00      	nop
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
  200838:	bf00      	nop
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
  20083a:	bf00      	nop
  20083c:	b003      	add	sp, #12
  20083e:	f85d fb04 	ldr.w	pc, [sp], #4
  200842:	bf00      	nop
  200844:	200008c8 	.word	0x200008c8
  200848:	08004698 	.word	0x08004698
  20084c:	00000000 	.word	0x00000000

00200850 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
  200850:	b508      	push	{r3, lr}

  chSysLock();
  200852:	f7ff ffb5 	bl	2007c0 <chSysLock.lto_priv.1>
}
  200856:	bf00      	nop
  200858:	bd08      	pop	{r3, pc}
  20085a:	bf00      	nop
  20085c:	0000      	movs	r0, r0
	...

00200860 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
  200860:	b508      	push	{r3, lr}

  chSysUnlock();
  200862:	f7ff ffc5 	bl	2007f0 <chSysUnlock.lto_priv.1>
}
  200866:	bf00      	nop
  200868:	bd08      	pop	{r3, pc}
  20086a:	bf00      	nop
  20086c:	0000      	movs	r0, r0
	...

00200870 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
  200870:	b500      	push	{lr}
  200872:	b083      	sub	sp, #12
  200874:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
  200876:	9801      	ldr	r0, [sp, #4]
  200878:	f003 fa5a 	bl	203d30 <chThdQueueObjectInit>
}
  20087c:	bf00      	nop
  20087e:	b003      	add	sp, #12
  200880:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00200890 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
  200890:	b500      	push	{lr}
  200892:	b083      	sub	sp, #12
  200894:	9001      	str	r0, [sp, #4]
  200896:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
  200898:	9900      	ldr	r1, [sp, #0]
  20089a:	9801      	ldr	r0, [sp, #4]
  20089c:	f003 fa60 	bl	203d60 <chThdEnqueueTimeoutS>
  2008a0:	4603      	mov	r3, r0
}
  2008a2:	4618      	mov	r0, r3
  2008a4:	b003      	add	sp, #12
  2008a6:	f85d fb04 	ldr.w	pc, [sp], #4
  2008aa:	bf00      	nop
  2008ac:	0000      	movs	r0, r0
	...

002008b0 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  2008b0:	b500      	push	{lr}
  2008b2:	b083      	sub	sp, #12
  2008b4:	9001      	str	r0, [sp, #4]
  2008b6:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
  2008b8:	9900      	ldr	r1, [sp, #0]
  2008ba:	9801      	ldr	r0, [sp, #4]
  2008bc:	f003 fa70 	bl	203da0 <chThdDequeueNextI>
}
  2008c0:	bf00      	nop
  2008c2:	b003      	add	sp, #12
  2008c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002008d0 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
  2008d0:	b500      	push	{lr}
  2008d2:	b087      	sub	sp, #28
  2008d4:	9003      	str	r0, [sp, #12]
  2008d6:	9102      	str	r1, [sp, #8]
  2008d8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
  2008da:	9b01      	ldr	r3, [sp, #4]
  2008dc:	2b00      	cmp	r3, #0
  2008de:	bf0c      	ite	eq
  2008e0:	2301      	moveq	r3, #1
  2008e2:	2300      	movne	r3, #0
  2008e4:	b2db      	uxtb	r3, r3
  2008e6:	2b00      	cmp	r3, #0
  2008e8:	d002      	beq.n	2008f0 <iq_read+0x20>
  2008ea:	482e      	ldr	r0, [pc, #184]	; (2009a4 <iq_read+0xd4>)
  2008ec:	f001 fcd8 	bl	2022a0 <chSysHalt>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
  2008f0:	9b03      	ldr	r3, [sp, #12]
  2008f2:	689b      	ldr	r3, [r3, #8]
  2008f4:	9a01      	ldr	r2, [sp, #4]
  2008f6:	429a      	cmp	r2, r3
  2008f8:	d902      	bls.n	200900 <iq_read+0x30>
    n = iqGetFullI(iqp);
  2008fa:	9b03      	ldr	r3, [sp, #12]
  2008fc:	689b      	ldr	r3, [r3, #8]
  2008fe:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  200900:	9b03      	ldr	r3, [sp, #12]
  200902:	691a      	ldr	r2, [r3, #16]
  200904:	9b03      	ldr	r3, [sp, #12]
  200906:	699b      	ldr	r3, [r3, #24]
  200908:	1ad3      	subs	r3, r2, r3
  20090a:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
  20090c:	9a01      	ldr	r2, [sp, #4]
  20090e:	9b05      	ldr	r3, [sp, #20]
  200910:	429a      	cmp	r2, r3
  200912:	d20d      	bcs.n	200930 <iq_read+0x60>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  200914:	9b03      	ldr	r3, [sp, #12]
  200916:	699b      	ldr	r3, [r3, #24]
  200918:	9a01      	ldr	r2, [sp, #4]
  20091a:	4619      	mov	r1, r3
  20091c:	9802      	ldr	r0, [sp, #8]
  20091e:	f7ff fcfb 	bl	200318 <memcpy>
    iqp->q_rdptr += n;
  200922:	9b03      	ldr	r3, [sp, #12]
  200924:	699a      	ldr	r2, [r3, #24]
  200926:	9b01      	ldr	r3, [sp, #4]
  200928:	441a      	add	r2, r3
  20092a:	9b03      	ldr	r3, [sp, #12]
  20092c:	619a      	str	r2, [r3, #24]
  20092e:	e02b      	b.n	200988 <iq_read+0xb8>
  }
  else if (n > s1) {
  200930:	9a01      	ldr	r2, [sp, #4]
  200932:	9b05      	ldr	r3, [sp, #20]
  200934:	429a      	cmp	r2, r3
  200936:	d91c      	bls.n	200972 <iq_read+0xa2>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  200938:	9b03      	ldr	r3, [sp, #12]
  20093a:	699b      	ldr	r3, [r3, #24]
  20093c:	9a05      	ldr	r2, [sp, #20]
  20093e:	4619      	mov	r1, r3
  200940:	9802      	ldr	r0, [sp, #8]
  200942:	f7ff fce9 	bl	200318 <memcpy>
    bp += s1;
  200946:	9a02      	ldr	r2, [sp, #8]
  200948:	9b05      	ldr	r3, [sp, #20]
  20094a:	4413      	add	r3, r2
  20094c:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
  20094e:	9a01      	ldr	r2, [sp, #4]
  200950:	9b05      	ldr	r3, [sp, #20]
  200952:	1ad3      	subs	r3, r2, r3
  200954:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  200956:	9b03      	ldr	r3, [sp, #12]
  200958:	68db      	ldr	r3, [r3, #12]
  20095a:	9a04      	ldr	r2, [sp, #16]
  20095c:	4619      	mov	r1, r3
  20095e:	9802      	ldr	r0, [sp, #8]
  200960:	f7ff fcda 	bl	200318 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
  200964:	9b03      	ldr	r3, [sp, #12]
  200966:	68da      	ldr	r2, [r3, #12]
  200968:	9b04      	ldr	r3, [sp, #16]
  20096a:	441a      	add	r2, r3
  20096c:	9b03      	ldr	r3, [sp, #12]
  20096e:	619a      	str	r2, [r3, #24]
  200970:	e00a      	b.n	200988 <iq_read+0xb8>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  200972:	9b03      	ldr	r3, [sp, #12]
  200974:	699b      	ldr	r3, [r3, #24]
  200976:	9a01      	ldr	r2, [sp, #4]
  200978:	4619      	mov	r1, r3
  20097a:	9802      	ldr	r0, [sp, #8]
  20097c:	f7ff fccc 	bl	200318 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
  200980:	9b03      	ldr	r3, [sp, #12]
  200982:	68da      	ldr	r2, [r3, #12]
  200984:	9b03      	ldr	r3, [sp, #12]
  200986:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
  200988:	9b03      	ldr	r3, [sp, #12]
  20098a:	689a      	ldr	r2, [r3, #8]
  20098c:	9b01      	ldr	r3, [sp, #4]
  20098e:	1ad2      	subs	r2, r2, r3
  200990:	9b03      	ldr	r3, [sp, #12]
  200992:	609a      	str	r2, [r3, #8]
  return n;
  200994:	9b01      	ldr	r3, [sp, #4]
  200996:	bf00      	nop
  200998:	bf00      	nop
}
  20099a:	4618      	mov	r0, r3
  20099c:	b007      	add	sp, #28
  20099e:	f85d fb04 	ldr.w	pc, [sp], #4
  2009a2:	bf00      	nop
  2009a4:	08004684 	.word	0x08004684
	...

002009b0 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
  2009b0:	b500      	push	{lr}
  2009b2:	b087      	sub	sp, #28
  2009b4:	9003      	str	r0, [sp, #12]
  2009b6:	9102      	str	r1, [sp, #8]
  2009b8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
  2009ba:	9b01      	ldr	r3, [sp, #4]
  2009bc:	2b00      	cmp	r3, #0
  2009be:	bf0c      	ite	eq
  2009c0:	2301      	moveq	r3, #1
  2009c2:	2300      	movne	r3, #0
  2009c4:	b2db      	uxtb	r3, r3
  2009c6:	2b00      	cmp	r3, #0
  2009c8:	d002      	beq.n	2009d0 <oq_write+0x20>
  2009ca:	482e      	ldr	r0, [pc, #184]	; (200a84 <oq_write+0xd4>)
  2009cc:	f001 fc68 	bl	2022a0 <chSysHalt>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
  2009d0:	9b03      	ldr	r3, [sp, #12]
  2009d2:	689b      	ldr	r3, [r3, #8]
  2009d4:	9a01      	ldr	r2, [sp, #4]
  2009d6:	429a      	cmp	r2, r3
  2009d8:	d902      	bls.n	2009e0 <oq_write+0x30>
    n = oqGetEmptyI(oqp);
  2009da:	9b03      	ldr	r3, [sp, #12]
  2009dc:	689b      	ldr	r3, [r3, #8]
  2009de:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  2009e0:	9b03      	ldr	r3, [sp, #12]
  2009e2:	691a      	ldr	r2, [r3, #16]
  2009e4:	9b03      	ldr	r3, [sp, #12]
  2009e6:	695b      	ldr	r3, [r3, #20]
  2009e8:	1ad3      	subs	r3, r2, r3
  2009ea:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
  2009ec:	9a01      	ldr	r2, [sp, #4]
  2009ee:	9b05      	ldr	r3, [sp, #20]
  2009f0:	429a      	cmp	r2, r3
  2009f2:	d20d      	bcs.n	200a10 <oq_write+0x60>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  2009f4:	9b03      	ldr	r3, [sp, #12]
  2009f6:	695b      	ldr	r3, [r3, #20]
  2009f8:	9a01      	ldr	r2, [sp, #4]
  2009fa:	9902      	ldr	r1, [sp, #8]
  2009fc:	4618      	mov	r0, r3
  2009fe:	f7ff fc8b 	bl	200318 <memcpy>
    oqp->q_wrptr += n;
  200a02:	9b03      	ldr	r3, [sp, #12]
  200a04:	695a      	ldr	r2, [r3, #20]
  200a06:	9b01      	ldr	r3, [sp, #4]
  200a08:	441a      	add	r2, r3
  200a0a:	9b03      	ldr	r3, [sp, #12]
  200a0c:	615a      	str	r2, [r3, #20]
  200a0e:	e02b      	b.n	200a68 <oq_write+0xb8>
  }
  else if (n > s1) {
  200a10:	9a01      	ldr	r2, [sp, #4]
  200a12:	9b05      	ldr	r3, [sp, #20]
  200a14:	429a      	cmp	r2, r3
  200a16:	d91c      	bls.n	200a52 <oq_write+0xa2>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
  200a18:	9b03      	ldr	r3, [sp, #12]
  200a1a:	695b      	ldr	r3, [r3, #20]
  200a1c:	9a05      	ldr	r2, [sp, #20]
  200a1e:	9902      	ldr	r1, [sp, #8]
  200a20:	4618      	mov	r0, r3
  200a22:	f7ff fc79 	bl	200318 <memcpy>
    bp += s1;
  200a26:	9a02      	ldr	r2, [sp, #8]
  200a28:	9b05      	ldr	r3, [sp, #20]
  200a2a:	4413      	add	r3, r2
  200a2c:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
  200a2e:	9a01      	ldr	r2, [sp, #4]
  200a30:	9b05      	ldr	r3, [sp, #20]
  200a32:	1ad3      	subs	r3, r2, r3
  200a34:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
  200a36:	9b03      	ldr	r3, [sp, #12]
  200a38:	68db      	ldr	r3, [r3, #12]
  200a3a:	9a04      	ldr	r2, [sp, #16]
  200a3c:	9902      	ldr	r1, [sp, #8]
  200a3e:	4618      	mov	r0, r3
  200a40:	f7ff fc6a 	bl	200318 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
  200a44:	9b03      	ldr	r3, [sp, #12]
  200a46:	68da      	ldr	r2, [r3, #12]
  200a48:	9b04      	ldr	r3, [sp, #16]
  200a4a:	441a      	add	r2, r3
  200a4c:	9b03      	ldr	r3, [sp, #12]
  200a4e:	615a      	str	r2, [r3, #20]
  200a50:	e00a      	b.n	200a68 <oq_write+0xb8>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  200a52:	9b03      	ldr	r3, [sp, #12]
  200a54:	695b      	ldr	r3, [r3, #20]
  200a56:	9a01      	ldr	r2, [sp, #4]
  200a58:	9902      	ldr	r1, [sp, #8]
  200a5a:	4618      	mov	r0, r3
  200a5c:	f7ff fc5c 	bl	200318 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
  200a60:	9b03      	ldr	r3, [sp, #12]
  200a62:	68da      	ldr	r2, [r3, #12]
  200a64:	9b03      	ldr	r3, [sp, #12]
  200a66:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
  200a68:	9b03      	ldr	r3, [sp, #12]
  200a6a:	689a      	ldr	r2, [r3, #8]
  200a6c:	9b01      	ldr	r3, [sp, #4]
  200a6e:	1ad2      	subs	r2, r2, r3
  200a70:	9b03      	ldr	r3, [sp, #12]
  200a72:	609a      	str	r2, [r3, #8]
  return n;
  200a74:	9b01      	ldr	r3, [sp, #4]
  200a76:	bf00      	nop
  200a78:	bf00      	nop
}
  200a7a:	4618      	mov	r0, r3
  200a7c:	b007      	add	sp, #28
  200a7e:	f85d fb04 	ldr.w	pc, [sp], #4
  200a82:	bf00      	nop
  200a84:	0800468c 	.word	0x0800468c
	...

00200a90 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
  200a90:	b500      	push	{lr}
  200a92:	b085      	sub	sp, #20
  200a94:	9003      	str	r0, [sp, #12]
  200a96:	9102      	str	r1, [sp, #8]
  200a98:	9201      	str	r2, [sp, #4]
  200a9a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
  200a9c:	9b03      	ldr	r3, [sp, #12]
  200a9e:	4618      	mov	r0, r3
  200aa0:	f7ff fee6 	bl	200870 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
  200aa4:	9b03      	ldr	r3, [sp, #12]
  200aa6:	2200      	movs	r2, #0
  200aa8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  200aaa:	9b03      	ldr	r3, [sp, #12]
  200aac:	9a02      	ldr	r2, [sp, #8]
  200aae:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
  200ab0:	9b03      	ldr	r3, [sp, #12]
  200ab2:	9a02      	ldr	r2, [sp, #8]
  200ab4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
  200ab6:	9b03      	ldr	r3, [sp, #12]
  200ab8:	9a02      	ldr	r2, [sp, #8]
  200aba:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  200abc:	9a02      	ldr	r2, [sp, #8]
  200abe:	9b01      	ldr	r3, [sp, #4]
  200ac0:	441a      	add	r2, r3
  200ac2:	9b03      	ldr	r3, [sp, #12]
  200ac4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
  200ac6:	9b03      	ldr	r3, [sp, #12]
  200ac8:	9a00      	ldr	r2, [sp, #0]
  200aca:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
  200acc:	9b03      	ldr	r3, [sp, #12]
  200ace:	9a06      	ldr	r2, [sp, #24]
  200ad0:	621a      	str	r2, [r3, #32]
}
  200ad2:	bf00      	nop
  200ad4:	b005      	add	sp, #20
  200ad6:	f85d fb04 	ldr.w	pc, [sp], #4
  200ada:	bf00      	nop
  200adc:	0000      	movs	r0, r0
	...

00200ae0 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
  200ae0:	b500      	push	{lr}
  200ae2:	b083      	sub	sp, #12
  200ae4:	9001      	str	r0, [sp, #4]
  200ae6:	460b      	mov	r3, r1
  200ae8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  200aec:	f001 fd48 	bl	202580 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
  200af0:	9b01      	ldr	r3, [sp, #4]
  200af2:	695a      	ldr	r2, [r3, #20]
  200af4:	9b01      	ldr	r3, [sp, #4]
  200af6:	699b      	ldr	r3, [r3, #24]
  200af8:	429a      	cmp	r2, r3
  200afa:	d105      	bne.n	200b08 <iqPutI+0x28>
  200afc:	9b01      	ldr	r3, [sp, #4]
  200afe:	689b      	ldr	r3, [r3, #8]
  200b00:	2b00      	cmp	r3, #0
  200b02:	d001      	beq.n	200b08 <iqPutI+0x28>
  200b04:	2301      	movs	r3, #1
  200b06:	e000      	b.n	200b0a <iqPutI+0x2a>
  200b08:	2300      	movs	r3, #0
  200b0a:	f003 0301 	and.w	r3, r3, #1
  200b0e:	b2db      	uxtb	r3, r3
  200b10:	f083 0301 	eor.w	r3, r3, #1
  200b14:	b2db      	uxtb	r3, r3
  200b16:	2b00      	cmp	r3, #0
  200b18:	d01d      	beq.n	200b56 <iqPutI+0x76>
    iqp->q_counter++;
  200b1a:	9b01      	ldr	r3, [sp, #4]
  200b1c:	689b      	ldr	r3, [r3, #8]
  200b1e:	1c5a      	adds	r2, r3, #1
  200b20:	9b01      	ldr	r3, [sp, #4]
  200b22:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
  200b24:	9b01      	ldr	r3, [sp, #4]
  200b26:	695b      	ldr	r3, [r3, #20]
  200b28:	1c59      	adds	r1, r3, #1
  200b2a:	9a01      	ldr	r2, [sp, #4]
  200b2c:	6151      	str	r1, [r2, #20]
  200b2e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  200b32:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
  200b34:	9b01      	ldr	r3, [sp, #4]
  200b36:	695a      	ldr	r2, [r3, #20]
  200b38:	9b01      	ldr	r3, [sp, #4]
  200b3a:	691b      	ldr	r3, [r3, #16]
  200b3c:	429a      	cmp	r2, r3
  200b3e:	d303      	bcc.n	200b48 <iqPutI+0x68>
      iqp->q_wrptr = iqp->q_buffer;
  200b40:	9b01      	ldr	r3, [sp, #4]
  200b42:	68da      	ldr	r2, [r3, #12]
  200b44:	9b01      	ldr	r3, [sp, #4]
  200b46:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
  200b48:	9b01      	ldr	r3, [sp, #4]
  200b4a:	2100      	movs	r1, #0
  200b4c:	4618      	mov	r0, r3
  200b4e:	f7ff feaf 	bl	2008b0 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
  200b52:	2300      	movs	r3, #0
  200b54:	e001      	b.n	200b5a <iqPutI+0x7a>
  }

  return MSG_TIMEOUT;
  200b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
  200b5a:	4618      	mov	r0, r3
  200b5c:	b003      	add	sp, #12
  200b5e:	f85d fb04 	ldr.w	pc, [sp], #4
  200b62:	bf00      	nop
	...

00200b70 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
  200b70:	b500      	push	{lr}
  200b72:	b085      	sub	sp, #20
  200b74:	9001      	str	r0, [sp, #4]
  200b76:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
  200b78:	f7ff fe6a 	bl	200850 <osalSysLock.lto_priv.1>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
  200b7c:	e00c      	b.n	200b98 <iqGetTimeout+0x28>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
  200b7e:	9b01      	ldr	r3, [sp, #4]
  200b80:	9900      	ldr	r1, [sp, #0]
  200b82:	4618      	mov	r0, r3
  200b84:	f7ff fe84 	bl	200890 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200b88:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
  200b8a:	9b02      	ldr	r3, [sp, #8]
  200b8c:	2b00      	cmp	r3, #0
  200b8e:	da03      	bge.n	200b98 <iqGetTimeout+0x28>
      osalSysUnlock();
  200b90:	f7ff fe66 	bl	200860 <osalSysUnlock.lto_priv.1>
      return msg;
  200b94:	9b02      	ldr	r3, [sp, #8]
  200b96:	e026      	b.n	200be6 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
  200b98:	9b01      	ldr	r3, [sp, #4]
  200b9a:	689b      	ldr	r3, [r3, #8]
  200b9c:	2b00      	cmp	r3, #0
  200b9e:	d0ee      	beq.n	200b7e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  200ba0:	9b01      	ldr	r3, [sp, #4]
  200ba2:	689b      	ldr	r3, [r3, #8]
  200ba4:	1e5a      	subs	r2, r3, #1
  200ba6:	9b01      	ldr	r3, [sp, #4]
  200ba8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
  200baa:	9b01      	ldr	r3, [sp, #4]
  200bac:	699b      	ldr	r3, [r3, #24]
  200bae:	1c59      	adds	r1, r3, #1
  200bb0:	9a01      	ldr	r2, [sp, #4]
  200bb2:	6191      	str	r1, [r2, #24]
  200bb4:	781b      	ldrb	r3, [r3, #0]
  200bb6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
  200bba:	9b01      	ldr	r3, [sp, #4]
  200bbc:	699a      	ldr	r2, [r3, #24]
  200bbe:	9b01      	ldr	r3, [sp, #4]
  200bc0:	691b      	ldr	r3, [r3, #16]
  200bc2:	429a      	cmp	r2, r3
  200bc4:	d303      	bcc.n	200bce <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
  200bc6:	9b01      	ldr	r3, [sp, #4]
  200bc8:	68da      	ldr	r2, [r3, #12]
  200bca:	9b01      	ldr	r3, [sp, #4]
  200bcc:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
  200bce:	9b01      	ldr	r3, [sp, #4]
  200bd0:	69db      	ldr	r3, [r3, #28]
  200bd2:	2b00      	cmp	r3, #0
  200bd4:	d003      	beq.n	200bde <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
  200bd6:	9b01      	ldr	r3, [sp, #4]
  200bd8:	69db      	ldr	r3, [r3, #28]
  200bda:	9801      	ldr	r0, [sp, #4]
  200bdc:	4798      	blx	r3
  }

  osalSysUnlock();
  200bde:	f7ff fe3f 	bl	200860 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
  200be2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
  200be6:	4618      	mov	r0, r3
  200be8:	b005      	add	sp, #20
  200bea:	f85d fb04 	ldr.w	pc, [sp], #4
  200bee:	bf00      	nop

00200bf0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
  200bf0:	b500      	push	{lr}
  200bf2:	b089      	sub	sp, #36	; 0x24
  200bf4:	9003      	str	r0, [sp, #12]
  200bf6:	9102      	str	r1, [sp, #8]
  200bf8:	9201      	str	r2, [sp, #4]
  200bfa:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
  200bfc:	9b03      	ldr	r3, [sp, #12]
  200bfe:	69db      	ldr	r3, [r3, #28]
  200c00:	9307      	str	r3, [sp, #28]
  size_t max = n;
  200c02:	9b01      	ldr	r3, [sp, #4]
  200c04:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
  200c06:	9b01      	ldr	r3, [sp, #4]
  200c08:	2b00      	cmp	r3, #0
  200c0a:	bf0c      	ite	eq
  200c0c:	2301      	moveq	r3, #1
  200c0e:	2300      	movne	r3, #0
  200c10:	b2db      	uxtb	r3, r3
  200c12:	2b00      	cmp	r3, #0
  200c14:	d002      	beq.n	200c1c <iqReadTimeout+0x2c>
  200c16:	481c      	ldr	r0, [pc, #112]	; (200c88 <iqReadTimeout+0x98>)
  200c18:	f001 fb42 	bl	2022a0 <chSysHalt>

  osalSysLock();
  200c1c:	f7ff fe18 	bl	200850 <osalSysLock.lto_priv.1>

  while (n > 0U) {
  200c20:	e024      	b.n	200c6c <iqReadTimeout+0x7c>
    size_t done;

    done = iq_read(iqp, bp, n);
  200c22:	9a01      	ldr	r2, [sp, #4]
  200c24:	9902      	ldr	r1, [sp, #8]
  200c26:	9803      	ldr	r0, [sp, #12]
  200c28:	f7ff fe52 	bl	2008d0 <iq_read>
  200c2c:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
  200c2e:	9b05      	ldr	r3, [sp, #20]
  200c30:	2b00      	cmp	r3, #0
  200c32:	d109      	bne.n	200c48 <iqReadTimeout+0x58>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
  200c34:	9b03      	ldr	r3, [sp, #12]
  200c36:	9900      	ldr	r1, [sp, #0]
  200c38:	4618      	mov	r0, r3
  200c3a:	f7ff fe29 	bl	200890 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200c3e:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
  200c40:	9b04      	ldr	r3, [sp, #16]
  200c42:	2b00      	cmp	r3, #0
  200c44:	d012      	beq.n	200c6c <iqReadTimeout+0x7c>
        break;
  200c46:	e014      	b.n	200c72 <iqReadTimeout+0x82>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
  200c48:	9b07      	ldr	r3, [sp, #28]
  200c4a:	2b00      	cmp	r3, #0
  200c4c:	d002      	beq.n	200c54 <iqReadTimeout+0x64>
        nfy(iqp);
  200c4e:	9b07      	ldr	r3, [sp, #28]
  200c50:	9803      	ldr	r0, [sp, #12]
  200c52:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
  200c54:	f7ff fe04 	bl	200860 <osalSysUnlock.lto_priv.1>

      n  -= done;
  200c58:	9a01      	ldr	r2, [sp, #4]
  200c5a:	9b05      	ldr	r3, [sp, #20]
  200c5c:	1ad3      	subs	r3, r2, r3
  200c5e:	9301      	str	r3, [sp, #4]
      bp += done;
  200c60:	9a02      	ldr	r2, [sp, #8]
  200c62:	9b05      	ldr	r3, [sp, #20]
  200c64:	4413      	add	r3, r2
  200c66:	9302      	str	r3, [sp, #8]

      osalSysLock();
  200c68:	f7ff fdf2 	bl	200850 <osalSysLock.lto_priv.1>
  while (n > 0U) {
  200c6c:	9b01      	ldr	r3, [sp, #4]
  200c6e:	2b00      	cmp	r3, #0
  200c70:	d1d7      	bne.n	200c22 <iqReadTimeout+0x32>
    }
  }

  osalSysUnlock();
  200c72:	f7ff fdf5 	bl	200860 <osalSysUnlock.lto_priv.1>
  return max - n;
  200c76:	9a06      	ldr	r2, [sp, #24]
  200c78:	9b01      	ldr	r3, [sp, #4]
  200c7a:	1ad3      	subs	r3, r2, r3
  200c7c:	bf00      	nop
  200c7e:	bf00      	nop
}
  200c80:	4618      	mov	r0, r3
  200c82:	b009      	add	sp, #36	; 0x24
  200c84:	f85d fb04 	ldr.w	pc, [sp], #4
  200c88:	080046a4 	.word	0x080046a4
  200c8c:	00000000 	.word	0x00000000

00200c90 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
  200c90:	b500      	push	{lr}
  200c92:	b085      	sub	sp, #20
  200c94:	9003      	str	r0, [sp, #12]
  200c96:	9102      	str	r1, [sp, #8]
  200c98:	9201      	str	r2, [sp, #4]
  200c9a:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
  200c9c:	9b03      	ldr	r3, [sp, #12]
  200c9e:	4618      	mov	r0, r3
  200ca0:	f7ff fde6 	bl	200870 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
  200ca4:	9b03      	ldr	r3, [sp, #12]
  200ca6:	9a01      	ldr	r2, [sp, #4]
  200ca8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
  200caa:	9b03      	ldr	r3, [sp, #12]
  200cac:	9a02      	ldr	r2, [sp, #8]
  200cae:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
  200cb0:	9b03      	ldr	r3, [sp, #12]
  200cb2:	9a02      	ldr	r2, [sp, #8]
  200cb4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
  200cb6:	9b03      	ldr	r3, [sp, #12]
  200cb8:	9a02      	ldr	r2, [sp, #8]
  200cba:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  200cbc:	9a02      	ldr	r2, [sp, #8]
  200cbe:	9b01      	ldr	r3, [sp, #4]
  200cc0:	441a      	add	r2, r3
  200cc2:	9b03      	ldr	r3, [sp, #12]
  200cc4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
  200cc6:	9b03      	ldr	r3, [sp, #12]
  200cc8:	9a00      	ldr	r2, [sp, #0]
  200cca:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
  200ccc:	9b03      	ldr	r3, [sp, #12]
  200cce:	9a06      	ldr	r2, [sp, #24]
  200cd0:	621a      	str	r2, [r3, #32]
}
  200cd2:	bf00      	nop
  200cd4:	b005      	add	sp, #20
  200cd6:	f85d fb04 	ldr.w	pc, [sp], #4
  200cda:	bf00      	nop
  200cdc:	0000      	movs	r0, r0
	...

00200ce0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
  200ce0:	b500      	push	{lr}
  200ce2:	b087      	sub	sp, #28
  200ce4:	9003      	str	r0, [sp, #12]
  200ce6:	460b      	mov	r3, r1
  200ce8:	9201      	str	r2, [sp, #4]
  200cea:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
  200cee:	f7ff fdaf 	bl	200850 <osalSysLock.lto_priv.1>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
  200cf2:	e00c      	b.n	200d0e <oqPutTimeout+0x2e>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
  200cf4:	9b03      	ldr	r3, [sp, #12]
  200cf6:	9901      	ldr	r1, [sp, #4]
  200cf8:	4618      	mov	r0, r3
  200cfa:	f7ff fdc9 	bl	200890 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200cfe:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
  200d00:	9b05      	ldr	r3, [sp, #20]
  200d02:	2b00      	cmp	r3, #0
  200d04:	da03      	bge.n	200d0e <oqPutTimeout+0x2e>
      osalSysUnlock();
  200d06:	f7ff fdab 	bl	200860 <osalSysUnlock.lto_priv.1>
      return msg;
  200d0a:	9b05      	ldr	r3, [sp, #20]
  200d0c:	e025      	b.n	200d5a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
  200d0e:	9b03      	ldr	r3, [sp, #12]
  200d10:	689b      	ldr	r3, [r3, #8]
  200d12:	2b00      	cmp	r3, #0
  200d14:	d0ee      	beq.n	200cf4 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  200d16:	9b03      	ldr	r3, [sp, #12]
  200d18:	689b      	ldr	r3, [r3, #8]
  200d1a:	1e5a      	subs	r2, r3, #1
  200d1c:	9b03      	ldr	r3, [sp, #12]
  200d1e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
  200d20:	9b03      	ldr	r3, [sp, #12]
  200d22:	695b      	ldr	r3, [r3, #20]
  200d24:	1c59      	adds	r1, r3, #1
  200d26:	9a03      	ldr	r2, [sp, #12]
  200d28:	6151      	str	r1, [r2, #20]
  200d2a:	f89d 200b 	ldrb.w	r2, [sp, #11]
  200d2e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200d30:	9b03      	ldr	r3, [sp, #12]
  200d32:	695a      	ldr	r2, [r3, #20]
  200d34:	9b03      	ldr	r3, [sp, #12]
  200d36:	691b      	ldr	r3, [r3, #16]
  200d38:	429a      	cmp	r2, r3
  200d3a:	d303      	bcc.n	200d44 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
  200d3c:	9b03      	ldr	r3, [sp, #12]
  200d3e:	68da      	ldr	r2, [r3, #12]
  200d40:	9b03      	ldr	r3, [sp, #12]
  200d42:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
  200d44:	9b03      	ldr	r3, [sp, #12]
  200d46:	69db      	ldr	r3, [r3, #28]
  200d48:	2b00      	cmp	r3, #0
  200d4a:	d003      	beq.n	200d54 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
  200d4c:	9b03      	ldr	r3, [sp, #12]
  200d4e:	69db      	ldr	r3, [r3, #28]
  200d50:	9803      	ldr	r0, [sp, #12]
  200d52:	4798      	blx	r3
  }

  osalSysUnlock();
  200d54:	f7ff fd84 	bl	200860 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
  200d58:	2300      	movs	r3, #0
}
  200d5a:	4618      	mov	r0, r3
  200d5c:	b007      	add	sp, #28
  200d5e:	f85d fb04 	ldr.w	pc, [sp], #4
  200d62:	bf00      	nop
	...

00200d70 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
  200d70:	b500      	push	{lr}
  200d72:	b085      	sub	sp, #20
  200d74:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
  200d76:	f001 fc03 	bl	202580 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
  200d7a:	9b01      	ldr	r3, [sp, #4]
  200d7c:	695a      	ldr	r2, [r3, #20]
  200d7e:	9b01      	ldr	r3, [sp, #4]
  200d80:	699b      	ldr	r3, [r3, #24]
  200d82:	429a      	cmp	r2, r3
  200d84:	d105      	bne.n	200d92 <oqGetI+0x22>
  200d86:	9b01      	ldr	r3, [sp, #4]
  200d88:	689b      	ldr	r3, [r3, #8]
  200d8a:	2b00      	cmp	r3, #0
  200d8c:	d001      	beq.n	200d92 <oqGetI+0x22>
  200d8e:	2301      	movs	r3, #1
  200d90:	e000      	b.n	200d94 <oqGetI+0x24>
  200d92:	2300      	movs	r3, #0
  200d94:	f003 0301 	and.w	r3, r3, #1
  200d98:	b2db      	uxtb	r3, r3
  200d9a:	f083 0301 	eor.w	r3, r3, #1
  200d9e:	b2db      	uxtb	r3, r3
  200da0:	2b00      	cmp	r3, #0
  200da2:	d01e      	beq.n	200de2 <oqGetI+0x72>
    uint8_t b;

    oqp->q_counter++;
  200da4:	9b01      	ldr	r3, [sp, #4]
  200da6:	689b      	ldr	r3, [r3, #8]
  200da8:	1c5a      	adds	r2, r3, #1
  200daa:	9b01      	ldr	r3, [sp, #4]
  200dac:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
  200dae:	9b01      	ldr	r3, [sp, #4]
  200db0:	699b      	ldr	r3, [r3, #24]
  200db2:	1c59      	adds	r1, r3, #1
  200db4:	9a01      	ldr	r2, [sp, #4]
  200db6:	6191      	str	r1, [r2, #24]
  200db8:	781b      	ldrb	r3, [r3, #0]
  200dba:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
  200dbe:	9b01      	ldr	r3, [sp, #4]
  200dc0:	699a      	ldr	r2, [r3, #24]
  200dc2:	9b01      	ldr	r3, [sp, #4]
  200dc4:	691b      	ldr	r3, [r3, #16]
  200dc6:	429a      	cmp	r2, r3
  200dc8:	d303      	bcc.n	200dd2 <oqGetI+0x62>
      oqp->q_rdptr = oqp->q_buffer;
  200dca:	9b01      	ldr	r3, [sp, #4]
  200dcc:	68da      	ldr	r2, [r3, #12]
  200dce:	9b01      	ldr	r3, [sp, #4]
  200dd0:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
  200dd2:	9b01      	ldr	r3, [sp, #4]
  200dd4:	2100      	movs	r1, #0
  200dd6:	4618      	mov	r0, r3
  200dd8:	f7ff fd6a 	bl	2008b0 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
  200ddc:	f89d 300f 	ldrb.w	r3, [sp, #15]
  200de0:	e001      	b.n	200de6 <oqGetI+0x76>
  }

  return MSG_TIMEOUT;
  200de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
  200de6:	4618      	mov	r0, r3
  200de8:	b005      	add	sp, #20
  200dea:	f85d fb04 	ldr.w	pc, [sp], #4
  200dee:	bf00      	nop

00200df0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  200df0:	b500      	push	{lr}
  200df2:	b089      	sub	sp, #36	; 0x24
  200df4:	9003      	str	r0, [sp, #12]
  200df6:	9102      	str	r1, [sp, #8]
  200df8:	9201      	str	r2, [sp, #4]
  200dfa:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
  200dfc:	9b03      	ldr	r3, [sp, #12]
  200dfe:	69db      	ldr	r3, [r3, #28]
  200e00:	9307      	str	r3, [sp, #28]
  size_t max = n;
  200e02:	9b01      	ldr	r3, [sp, #4]
  200e04:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
  200e06:	9b01      	ldr	r3, [sp, #4]
  200e08:	2b00      	cmp	r3, #0
  200e0a:	bf0c      	ite	eq
  200e0c:	2301      	moveq	r3, #1
  200e0e:	2300      	movne	r3, #0
  200e10:	b2db      	uxtb	r3, r3
  200e12:	2b00      	cmp	r3, #0
  200e14:	d002      	beq.n	200e1c <oqWriteTimeout+0x2c>
  200e16:	481c      	ldr	r0, [pc, #112]	; (200e88 <oqWriteTimeout+0x98>)
  200e18:	f001 fa42 	bl	2022a0 <chSysHalt>

  osalSysLock();
  200e1c:	f7ff fd18 	bl	200850 <osalSysLock.lto_priv.1>

  while (n > 0U) {
  200e20:	e024      	b.n	200e6c <oqWriteTimeout+0x7c>
    size_t done;

    done = oq_write(oqp, bp, n);
  200e22:	9a01      	ldr	r2, [sp, #4]
  200e24:	9902      	ldr	r1, [sp, #8]
  200e26:	9803      	ldr	r0, [sp, #12]
  200e28:	f7ff fdc2 	bl	2009b0 <oq_write>
  200e2c:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
  200e2e:	9b05      	ldr	r3, [sp, #20]
  200e30:	2b00      	cmp	r3, #0
  200e32:	d109      	bne.n	200e48 <oqWriteTimeout+0x58>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
  200e34:	9b03      	ldr	r3, [sp, #12]
  200e36:	9900      	ldr	r1, [sp, #0]
  200e38:	4618      	mov	r0, r3
  200e3a:	f7ff fd29 	bl	200890 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200e3e:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
  200e40:	9b04      	ldr	r3, [sp, #16]
  200e42:	2b00      	cmp	r3, #0
  200e44:	d012      	beq.n	200e6c <oqWriteTimeout+0x7c>
        break;
  200e46:	e014      	b.n	200e72 <oqWriteTimeout+0x82>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
  200e48:	9b07      	ldr	r3, [sp, #28]
  200e4a:	2b00      	cmp	r3, #0
  200e4c:	d002      	beq.n	200e54 <oqWriteTimeout+0x64>
        nfy(oqp);
  200e4e:	9b07      	ldr	r3, [sp, #28]
  200e50:	9803      	ldr	r0, [sp, #12]
  200e52:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
  200e54:	f7ff fd04 	bl	200860 <osalSysUnlock.lto_priv.1>

      n  -= done;
  200e58:	9a01      	ldr	r2, [sp, #4]
  200e5a:	9b05      	ldr	r3, [sp, #20]
  200e5c:	1ad3      	subs	r3, r2, r3
  200e5e:	9301      	str	r3, [sp, #4]
      bp += done;
  200e60:	9a02      	ldr	r2, [sp, #8]
  200e62:	9b05      	ldr	r3, [sp, #20]
  200e64:	4413      	add	r3, r2
  200e66:	9302      	str	r3, [sp, #8]

      osalSysLock();
  200e68:	f7ff fcf2 	bl	200850 <osalSysLock.lto_priv.1>
  while (n > 0U) {
  200e6c:	9b01      	ldr	r3, [sp, #4]
  200e6e:	2b00      	cmp	r3, #0
  200e70:	d1d7      	bne.n	200e22 <oqWriteTimeout+0x32>
    }
  }

  osalSysUnlock();
  200e72:	f7ff fcf5 	bl	200860 <osalSysUnlock.lto_priv.1>
  return max - n;
  200e76:	9a06      	ldr	r2, [sp, #24]
  200e78:	9b01      	ldr	r3, [sp, #4]
  200e7a:	1ad3      	subs	r3, r2, r3
  200e7c:	bf00      	nop
  200e7e:	bf00      	nop
}
  200e80:	4618      	mov	r0, r3
  200e82:	b009      	add	sp, #36	; 0x24
  200e84:	f85d fb04 	ldr.w	pc, [sp], #4
  200e88:	080046b4 	.word	0x080046b4
  200e8c:	00000000 	.word	0x00000000

00200e90 <icuInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void icuInit(void) {
  200e90:	b508      	push	{r3, lr}

  icu_lld_init();
  200e92:	f000 fe45 	bl	201b20 <icu_lld_init>
}
  200e96:	bf00      	nop
  200e98:	bd08      	pop	{r3, pc}
  200e9a:	bf00      	nop
  200e9c:	0000      	movs	r0, r0
	...

00200ea0 <icuObjectInit>:
 *
 * @param[out] icup     pointer to the @p ICUDriver object
 *
 * @init
 */
void icuObjectInit(ICUDriver *icup) {
  200ea0:	b082      	sub	sp, #8
  200ea2:	9001      	str	r0, [sp, #4]

  icup->state  = ICU_STOP;
  200ea4:	9b01      	ldr	r3, [sp, #4]
  200ea6:	2201      	movs	r2, #1
  200ea8:	701a      	strb	r2, [r3, #0]
  icup->config = NULL;
  200eaa:	9b01      	ldr	r3, [sp, #4]
  200eac:	2200      	movs	r2, #0
  200eae:	605a      	str	r2, [r3, #4]
}
  200eb0:	bf00      	nop
  200eb2:	b002      	add	sp, #8
  200eb4:	4770      	bx	lr
  200eb6:	bf00      	nop
	...

00200ec0 <pwmInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void pwmInit(void) {
  200ec0:	b508      	push	{r3, lr}

  pwm_lld_init();
  200ec2:	f000 febd 	bl	201c40 <pwm_lld_init>
}
  200ec6:	bf00      	nop
  200ec8:	bd08      	pop	{r3, pc}
  200eca:	bf00      	nop
  200ecc:	0000      	movs	r0, r0
	...

00200ed0 <pwmObjectInit>:
 *
 * @param[out] pwmp     pointer to a @p PWMDriver object
 *
 * @init
 */
void pwmObjectInit(PWMDriver *pwmp) {
  200ed0:	b082      	sub	sp, #8
  200ed2:	9001      	str	r0, [sp, #4]

  pwmp->state    = PWM_STOP;
  200ed4:	9b01      	ldr	r3, [sp, #4]
  200ed6:	2201      	movs	r2, #1
  200ed8:	701a      	strb	r2, [r3, #0]
  pwmp->config   = NULL;
  200eda:	9b01      	ldr	r3, [sp, #4]
  200edc:	2200      	movs	r2, #0
  200ede:	605a      	str	r2, [r3, #4]
  pwmp->enabled  = 0;
  200ee0:	9b01      	ldr	r3, [sp, #4]
  200ee2:	2200      	movs	r2, #0
  200ee4:	60da      	str	r2, [r3, #12]
  pwmp->channels = 0;
  200ee6:	9b01      	ldr	r3, [sp, #4]
  200ee8:	2200      	movs	r2, #0
  200eea:	741a      	strb	r2, [r3, #16]
#if defined(PWM_DRIVER_EXT_INIT_HOOK)
  PWM_DRIVER_EXT_INIT_HOOK(pwmp);
#endif
}
  200eec:	bf00      	nop
  200eee:	b002      	add	sp, #8
  200ef0:	4770      	bx	lr
  200ef2:	bf00      	nop
	...

00200f00 <osalEventObjectInit>:
 *
 * @param[out] esp      pointer to the event source object
 *
 * @init
 */
static inline void osalEventObjectInit(event_source_t *esp) {
  200f00:	b500      	push	{lr}
  200f02:	b083      	sub	sp, #12
  200f04:	9001      	str	r0, [sp, #4]

  chEvtObjectInit(esp);
  200f06:	9801      	ldr	r0, [sp, #4]
  200f08:	f003 f812 	bl	203f30 <chEvtObjectInit>
}
  200f0c:	bf00      	nop
  200f0e:	b003      	add	sp, #12
  200f10:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00200f20 <osalEventBroadcastFlagsI.lto_priv.1>:
 * @param[in] flags     flags to be ORed to the flags mask
 *
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {
  200f20:	b500      	push	{lr}
  200f22:	b083      	sub	sp, #12
  200f24:	9001      	str	r0, [sp, #4]
  200f26:	9100      	str	r1, [sp, #0]

  chEvtBroadcastFlagsI(esp, flags);
  200f28:	9900      	ldr	r1, [sp, #0]
  200f2a:	9801      	ldr	r0, [sp, #4]
  200f2c:	f003 f858 	bl	203fe0 <chEvtBroadcastFlagsI>
}
  200f30:	bf00      	nop
  200f32:	b003      	add	sp, #12
  200f34:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00200f40 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  200f40:	b500      	push	{lr}
  200f42:	b085      	sub	sp, #20
  200f44:	9003      	str	r0, [sp, #12]
  200f46:	9102      	str	r1, [sp, #8]
  200f48:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  200f4a:	9b03      	ldr	r3, [sp, #12]
  200f4c:	f103 0030 	add.w	r0, r3, #48	; 0x30
  200f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  200f54:	9a01      	ldr	r2, [sp, #4]
  200f56:	9902      	ldr	r1, [sp, #8]
  200f58:	f7ff ff4a 	bl	200df0 <oqWriteTimeout>
  200f5c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
  200f5e:	4618      	mov	r0, r3
  200f60:	b005      	add	sp, #20
  200f62:	f85d fb04 	ldr.w	pc, [sp], #4
  200f66:	bf00      	nop
	...

00200f70 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
  200f70:	b500      	push	{lr}
  200f72:	b085      	sub	sp, #20
  200f74:	9003      	str	r0, [sp, #12]
  200f76:	9102      	str	r1, [sp, #8]
  200f78:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  200f7a:	9b03      	ldr	r3, [sp, #12]
  200f7c:	f103 000c 	add.w	r0, r3, #12
  200f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  200f84:	9a01      	ldr	r2, [sp, #4]
  200f86:	9902      	ldr	r1, [sp, #8]
  200f88:	f7ff fe32 	bl	200bf0 <iqReadTimeout>
  200f8c:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
  200f8e:	4618      	mov	r0, r3
  200f90:	b005      	add	sp, #20
  200f92:	f85d fb04 	ldr.w	pc, [sp], #4
  200f96:	bf00      	nop
	...

00200fa0 <_put>:

static msg_t _put(void *ip, uint8_t b) {
  200fa0:	b500      	push	{lr}
  200fa2:	b083      	sub	sp, #12
  200fa4:	9001      	str	r0, [sp, #4]
  200fa6:	460b      	mov	r3, r1
  200fa8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  200fac:	9b01      	ldr	r3, [sp, #4]
  200fae:	3330      	adds	r3, #48	; 0x30
  200fb0:	f89d 1003 	ldrb.w	r1, [sp, #3]
  200fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  200fb8:	4618      	mov	r0, r3
  200fba:	f7ff fe91 	bl	200ce0 <oqPutTimeout>
  200fbe:	4603      	mov	r3, r0
}
  200fc0:	4618      	mov	r0, r3
  200fc2:	b003      	add	sp, #12
  200fc4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00200fd0 <_get>:

static msg_t _get(void *ip) {
  200fd0:	b500      	push	{lr}
  200fd2:	b083      	sub	sp, #12
  200fd4:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  200fd6:	9b01      	ldr	r3, [sp, #4]
  200fd8:	330c      	adds	r3, #12
  200fda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  200fde:	4618      	mov	r0, r3
  200fe0:	f7ff fdc6 	bl	200b70 <iqGetTimeout>
  200fe4:	4603      	mov	r3, r0
}
  200fe6:	4618      	mov	r0, r3
  200fe8:	b003      	add	sp, #12
  200fea:	f85d fb04 	ldr.w	pc, [sp], #4
  200fee:	bf00      	nop

00200ff0 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
  200ff0:	b500      	push	{lr}
  200ff2:	b085      	sub	sp, #20
  200ff4:	9003      	str	r0, [sp, #12]
  200ff6:	460b      	mov	r3, r1
  200ff8:	9201      	str	r2, [sp, #4]
  200ffa:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  200ffe:	9b03      	ldr	r3, [sp, #12]
  201000:	3330      	adds	r3, #48	; 0x30
  201002:	f89d 100b 	ldrb.w	r1, [sp, #11]
  201006:	9a01      	ldr	r2, [sp, #4]
  201008:	4618      	mov	r0, r3
  20100a:	f7ff fe69 	bl	200ce0 <oqPutTimeout>
  20100e:	4603      	mov	r3, r0
}
  201010:	4618      	mov	r0, r3
  201012:	b005      	add	sp, #20
  201014:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201020 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
  201020:	b500      	push	{lr}
  201022:	b083      	sub	sp, #12
  201024:	9001      	str	r0, [sp, #4]
  201026:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201028:	9b01      	ldr	r3, [sp, #4]
  20102a:	330c      	adds	r3, #12
  20102c:	9900      	ldr	r1, [sp, #0]
  20102e:	4618      	mov	r0, r3
  201030:	f7ff fd9e 	bl	200b70 <iqGetTimeout>
  201034:	4603      	mov	r3, r0
}
  201036:	4618      	mov	r0, r3
  201038:	b003      	add	sp, #12
  20103a:	f85d fb04 	ldr.w	pc, [sp], #4
  20103e:	bf00      	nop

00201040 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
  201040:	b500      	push	{lr}
  201042:	b085      	sub	sp, #20
  201044:	9003      	str	r0, [sp, #12]
  201046:	9102      	str	r1, [sp, #8]
  201048:	9201      	str	r2, [sp, #4]
  20104a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  20104c:	9b03      	ldr	r3, [sp, #12]
  20104e:	f103 0030 	add.w	r0, r3, #48	; 0x30
  201052:	9b00      	ldr	r3, [sp, #0]
  201054:	9a01      	ldr	r2, [sp, #4]
  201056:	9902      	ldr	r1, [sp, #8]
  201058:	f7ff feca 	bl	200df0 <oqWriteTimeout>
  20105c:	4603      	mov	r3, r0
}
  20105e:	4618      	mov	r0, r3
  201060:	b005      	add	sp, #20
  201062:	f85d fb04 	ldr.w	pc, [sp], #4
  201066:	bf00      	nop
	...

00201070 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
  201070:	b500      	push	{lr}
  201072:	b085      	sub	sp, #20
  201074:	9003      	str	r0, [sp, #12]
  201076:	9102      	str	r1, [sp, #8]
  201078:	9201      	str	r2, [sp, #4]
  20107a:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  20107c:	9b03      	ldr	r3, [sp, #12]
  20107e:	f103 000c 	add.w	r0, r3, #12
  201082:	9b00      	ldr	r3, [sp, #0]
  201084:	9a01      	ldr	r2, [sp, #4]
  201086:	9902      	ldr	r1, [sp, #8]
  201088:	f7ff fdb2 	bl	200bf0 <iqReadTimeout>
  20108c:	4603      	mov	r3, r0
}
  20108e:	4618      	mov	r0, r3
  201090:	b005      	add	sp, #20
  201092:	f85d fb04 	ldr.w	pc, [sp], #4
  201096:	bf00      	nop
	...

002010a0 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
  2010a0:	b500      	push	{lr}
  2010a2:	b087      	sub	sp, #28
  2010a4:	9003      	str	r0, [sp, #12]
  2010a6:	9102      	str	r1, [sp, #8]
  2010a8:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
  2010aa:	9b03      	ldr	r3, [sp, #12]
  2010ac:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);
  2010ae:	9b05      	ldr	r3, [sp, #20]
  2010b0:	2b00      	cmp	r3, #0
  2010b2:	bf0c      	ite	eq
  2010b4:	2301      	moveq	r3, #1
  2010b6:	2300      	movne	r3, #0
  2010b8:	b2db      	uxtb	r3, r3
  2010ba:	2b00      	cmp	r3, #0
  2010bc:	d002      	beq.n	2010c4 <_ctl+0x24>
  2010be:	4811      	ldr	r0, [pc, #68]	; (201104 <_ctl+0x64>)
  2010c0:	f001 f8ee 	bl	2022a0 <chSysHalt>

  switch (operation) {
  2010c4:	9b02      	ldr	r3, [sp, #8]
  2010c6:	2b00      	cmp	r3, #0
  2010c8:	d00e      	beq.n	2010e8 <_ctl+0x48>
  2010ca:	9b02      	ldr	r3, [sp, #8]
  2010cc:	2b01      	cmp	r3, #1
  2010ce:	d10e      	bne.n	2010ee <_ctl+0x4e>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
  2010d0:	9b01      	ldr	r3, [sp, #4]
  2010d2:	2b00      	cmp	r3, #0
  2010d4:	bf14      	ite	ne
  2010d6:	2301      	movne	r3, #1
  2010d8:	2300      	moveq	r3, #0
  2010da:	b2db      	uxtb	r3, r3
  2010dc:	2b00      	cmp	r3, #0
  2010de:	d009      	beq.n	2010f4 <_ctl+0x54>
  2010e0:	4808      	ldr	r0, [pc, #32]	; (201104 <_ctl+0x64>)
  2010e2:	f001 f8dd 	bl	2022a0 <chSysHalt>
    break;
  2010e6:	e005      	b.n	2010f4 <_ctl+0x54>
  case CHN_CTL_INVALID:
    return HAL_RET_UNKNOWN_CTL;
  2010e8:	f06f 0313 	mvn.w	r3, #19
  2010ec:	e005      	b.n	2010fa <_ctl+0x5a>
  default:
#if defined(SD_LLD_IMPLEMENTS_CTL)
    /* Delegating to the LLD if supported.*/
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
  2010ee:	f06f 0313 	mvn.w	r3, #19
  2010f2:	e002      	b.n	2010fa <_ctl+0x5a>
    break;
  2010f4:	bf00      	nop
#endif
  }
  return HAL_RET_SUCCESS;
  2010f6:	2300      	movs	r3, #0
  2010f8:	bf00      	nop
}
  2010fa:	4618      	mov	r0, r3
  2010fc:	b007      	add	sp, #28
  2010fe:	f85d fb04 	ldr.w	pc, [sp], #4
  201102:	bf00      	nop
  201104:	080046ec 	.word	0x080046ec
	...

00201110 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
  201110:	b508      	push	{r3, lr}

  sd_lld_init();
  201112:	f000 fea5 	bl	201e60 <sd_lld_init>
}
  201116:	bf00      	nop
  201118:	bd08      	pop	{r3, pc}
  20111a:	bf00      	nop
  20111c:	0000      	movs	r0, r0
	...

00201120 <sdObjectInit>:
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {
  201120:	b500      	push	{lr}
  201122:	b083      	sub	sp, #12
  201124:	9001      	str	r0, [sp, #4]

  sdp->vmt = &vmt;
  201126:	9b01      	ldr	r3, [sp, #4]
  201128:	4a06      	ldr	r2, [pc, #24]	; (201144 <sdObjectInit+0x24>)
  20112a:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
  20112c:	9b01      	ldr	r3, [sp, #4]
  20112e:	3304      	adds	r3, #4
  201130:	4618      	mov	r0, r3
  201132:	f7ff fee5 	bl	200f00 <osalEventObjectInit>
  sdp->state = SD_STOP;
  201136:	9b01      	ldr	r3, [sp, #4]
  201138:	2201      	movs	r2, #1
  20113a:	721a      	strb	r2, [r3, #8]
}
  20113c:	bf00      	nop
  20113e:	b003      	add	sp, #12
  201140:	f85d fb04 	ldr.w	pc, [sp], #4
  201144:	080046c4 	.word	0x080046c4
	...

00201150 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
  201150:	b500      	push	{lr}
  201152:	b083      	sub	sp, #12
  201154:	9001      	str	r0, [sp, #4]
  201156:	460b      	mov	r3, r1
  201158:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  20115c:	f001 fa10 	bl	202580 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
  201160:	9b01      	ldr	r3, [sp, #4]
  201162:	2b00      	cmp	r3, #0
  201164:	bf0c      	ite	eq
  201166:	2301      	moveq	r3, #1
  201168:	2300      	movne	r3, #0
  20116a:	b2db      	uxtb	r3, r3
  20116c:	2b00      	cmp	r3, #0
  20116e:	d002      	beq.n	201176 <sdIncomingDataI+0x26>
  201170:	4811      	ldr	r0, [pc, #68]	; (2011b8 <sdIncomingDataI+0x68>)
  201172:	f001 f895 	bl	2022a0 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
  201176:	9b01      	ldr	r3, [sp, #4]
  201178:	695b      	ldr	r3, [r3, #20]
  20117a:	2b00      	cmp	r3, #0
  20117c:	d105      	bne.n	20118a <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  20117e:	9b01      	ldr	r3, [sp, #4]
  201180:	3304      	adds	r3, #4
  201182:	2104      	movs	r1, #4
  201184:	4618      	mov	r0, r3
  201186:	f7ff fecb 	bl	200f20 <osalEventBroadcastFlagsI.lto_priv.1>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  20118a:	9b01      	ldr	r3, [sp, #4]
  20118c:	330c      	adds	r3, #12
  20118e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  201192:	4611      	mov	r1, r2
  201194:	4618      	mov	r0, r3
  201196:	f7ff fca3 	bl	200ae0 <iqPutI>
  20119a:	4603      	mov	r3, r0
  20119c:	2b00      	cmp	r3, #0
  20119e:	da06      	bge.n	2011ae <sdIncomingDataI+0x5e>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
  2011a0:	9b01      	ldr	r3, [sp, #4]
  2011a2:	3304      	adds	r3, #4
  2011a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  2011a8:	4618      	mov	r0, r3
  2011aa:	f7ff feb9 	bl	200f20 <osalEventBroadcastFlagsI.lto_priv.1>
}
  2011ae:	bf00      	nop
  2011b0:	b003      	add	sp, #12
  2011b2:	f85d fb04 	ldr.w	pc, [sp], #4
  2011b6:	bf00      	nop
  2011b8:	080046f4 	.word	0x080046f4
  2011bc:	00000000 	.word	0x00000000

002011c0 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
  2011c0:	b082      	sub	sp, #8
  2011c2:	9001      	str	r0, [sp, #4]
  2011c4:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
  2011c6:	9b00      	ldr	r3, [sp, #0]
  2011c8:	b2db      	uxtb	r3, r3
  2011ca:	4a11      	ldr	r2, [pc, #68]	; (201210 <nvicEnableVector+0x50>)
  2011cc:	011b      	lsls	r3, r3, #4
  2011ce:	b2d9      	uxtb	r1, r3
  2011d0:	9b01      	ldr	r3, [sp, #4]
  2011d2:	4413      	add	r3, r2
  2011d4:	f503 7340 	add.w	r3, r3, #768	; 0x300
  2011d8:	460a      	mov	r2, r1
  2011da:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
  2011dc:	9b01      	ldr	r3, [sp, #4]
  2011de:	f003 021f 	and.w	r2, r3, #31
  2011e2:	490b      	ldr	r1, [pc, #44]	; (201210 <nvicEnableVector+0x50>)
  2011e4:	9b01      	ldr	r3, [sp, #4]
  2011e6:	095b      	lsrs	r3, r3, #5
  2011e8:	2001      	movs	r0, #1
  2011ea:	fa00 f202 	lsl.w	r2, r0, r2
  2011ee:	3360      	adds	r3, #96	; 0x60
  2011f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
  2011f4:	9b01      	ldr	r3, [sp, #4]
  2011f6:	f003 021f 	and.w	r2, r3, #31
  2011fa:	4905      	ldr	r1, [pc, #20]	; (201210 <nvicEnableVector+0x50>)
  2011fc:	9b01      	ldr	r3, [sp, #4]
  2011fe:	095b      	lsrs	r3, r3, #5
  201200:	2001      	movs	r0, #1
  201202:	fa00 f202 	lsl.w	r2, r0, r2
  201206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
  20120a:	bf00      	nop
  20120c:	b002      	add	sp, #8
  20120e:	4770      	bx	lr
  201210:	e000e100 	.word	0xe000e100
	...

00201220 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
  201220:	bf00      	nop
  201222:	4770      	bx	lr
	...

00201230 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
  201230:	bf00      	nop
  201232:	4770      	bx	lr
	...

00201240 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
  201240:	bf00      	nop
  201242:	4770      	bx	lr
	...

00201250 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
  201250:	bf00      	nop
  201252:	4770      	bx	lr
	...

00201260 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
  201260:	bf00      	nop
  201262:	4770      	bx	lr
	...

00201270 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
  201270:	bf00      	nop
  201272:	4770      	bx	lr
	...

00201280 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
  201280:	bf00      	nop
  201282:	4770      	bx	lr
	...

00201290 <exti16_irq_init>:

static inline void exti16_irq_init(void) {
#if defined(STM32_EXTI16_IS_USED)
  nvicEnableVector(STM32_EXTI16_NUMBER, STM32_IRQ_EXTI16_PRIORITY);
#endif
}
  201290:	bf00      	nop
  201292:	4770      	bx	lr
	...

002012a0 <exti17_irq_init>:

static inline void exti17_irq_init(void) {
#if defined(STM32_EXTI17_IS_USED)
  nvicEnableVector(STM32_EXTI17_NUMBER, STM32_IRQ_EXTI17_PRIORITY);
#endif
}
  2012a0:	bf00      	nop
  2012a2:	4770      	bx	lr
	...

002012b0 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
  2012b0:	bf00      	nop
  2012b2:	4770      	bx	lr
	...

002012c0 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
  2012c0:	bf00      	nop
  2012c2:	4770      	bx	lr
	...

002012d0 <exti20_irq_init>:

static inline void exti20_irq_init(void) {
#if defined(STM32_EXTI20_IS_USED)
  nvicEnableVector(STM32_EXTI20_NUMBER, STM32_IRQ_EXTI20_PRIORITY);
#endif
}
  2012d0:	bf00      	nop
  2012d2:	4770      	bx	lr
	...

002012e0 <exti21_irq_init>:

static inline void exti21_irq_init(void) {
#if defined(STM32_EXTI21_IS_USED)
  nvicEnableVector(STM32_EXTI21_NUMBER, STM32_IRQ_EXTI21_PRIORITY);
#endif
}
  2012e0:	bf00      	nop
  2012e2:	4770      	bx	lr
	...

002012f0 <exti22_irq_init>:

static inline void exti22_irq_init(void) {
#if defined(STM32_EXTI22_IS_USED)
  nvicEnableVector(STM32_EXTI22_NUMBER, STM32_IRQ_EXTI22_PRIORITY);
#endif
}
  2012f0:	bf00      	nop
  2012f2:	4770      	bx	lr
	...

00201300 <exti23_irq_init>:

static inline void exti23_irq_init(void) {
#if defined(STM32_EXTI23_IS_USED)
  nvicEnableVector(STM32_EXTI23_NUMBER, STM32_IRQ_EXTI23_PRIORITY);
#endif
}
  201300:	bf00      	nop
  201302:	4770      	bx	lr
	...

00201310 <usart1_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart1_irq_init(void) {
  201310:	b508      	push	{r3, lr}
#if defined(STM32_USART1_IS_USED)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
  201312:	210c      	movs	r1, #12
  201314:	2025      	movs	r0, #37	; 0x25
  201316:	f7ff ff53 	bl	2011c0 <nvicEnableVector>
#endif
}
  20131a:	bf00      	nop
  20131c:	bd08      	pop	{r3, pc}
  20131e:	bf00      	nop

00201320 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
  201320:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  201322:	4808      	ldr	r0, [pc, #32]	; (201344 <VectorD4+0x24>)
  201324:	f001 fa4c 	bl	2027c0 <__trace_isr_enter>
  201328:	f001 f8aa 	bl	202480 <__dbg_check_enter_isr>

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
  20132c:	4806      	ldr	r0, [pc, #24]	; (201348 <VectorD4+0x28>)
  20132e:	f000 fdc7 	bl	201ec0 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART1
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  201332:	f001 f8e5 	bl	202500 <__dbg_check_leave_isr>
  201336:	4803      	ldr	r0, [pc, #12]	; (201344 <VectorD4+0x24>)
  201338:	f001 fa82 	bl	202840 <__trace_isr_leave>
  20133c:	f003 f8d8 	bl	2044f0 <__port_irq_epilogue>
}
  201340:	bf00      	nop
  201342:	bd08      	pop	{r3, pc}
  201344:	08004704 	.word	0x08004704
  201348:	20000838 	.word	0x20000838
  20134c:	00000000 	.word	0x00000000

00201350 <usart2_irq_init>:

static inline void usart2_irq_init(void) {
#if defined(STM32_USART2_IS_USED)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
#endif
}
  201350:	bf00      	nop
  201352:	4770      	bx	lr
	...

00201360 <usart3_irq_init>:

static inline void usart3_irq_init(void) {
#if defined(STM32_USART3_IS_USED)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
#endif
}
  201360:	bf00      	nop
  201362:	4770      	bx	lr
	...

00201370 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if defined(STM32_UART4_IS_USED)
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
  201370:	bf00      	nop
  201372:	4770      	bx	lr
	...

00201380 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if defined(STM32_UART5_IS_USED)
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
  201380:	bf00      	nop
  201382:	4770      	bx	lr
	...

00201390 <usart6_irq_init>:

static inline void usart6_irq_init(void) {
#if defined(STM32_USART6_IS_USED)
  nvicEnableVector(STM32_USART6_NUMBER, STM32_IRQ_USART6_PRIORITY);
#endif
}
  201390:	bf00      	nop
  201392:	4770      	bx	lr
	...

002013a0 <uart7_irq_init>:

static inline void uart7_irq_init(void) {
#if defined(STM32_UART7_IS_USED)
  nvicEnableVector(STM32_UART7_NUMBER, STM32_IRQ_UART7_PRIORITY);
#endif
}
  2013a0:	bf00      	nop
  2013a2:	4770      	bx	lr
	...

002013b0 <uart8_irq_init>:

static inline void uart8_irq_init(void) {
#if defined(STM32_UART8_IS_USED)
  nvicEnableVector(STM32_UART8_NUMBER, STM32_IRQ_UART8_PRIORITY);
#endif
}
  2013b0:	bf00      	nop
  2013b2:	4770      	bx	lr
	...

002013c0 <tim1_tim9_tim10_tim11_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim1_tim9_tim10_tim11_irq_init(void) {
  2013c0:	b508      	push	{r3, lr}
#if defined(STM32_TIM1_IS_USED) || defined(STM32_TIM9_IS_USED)
  nvicEnableVector(STM32_TIM1_BRK_TIM9_NUMBER,
  2013c2:	2107      	movs	r1, #7
  2013c4:	2018      	movs	r0, #24
  2013c6:	f7ff fefb 	bl	2011c0 <nvicEnableVector>
                   STM32_IRQ_TIM1_BRK_TIM9_PRIORITY);
#endif
#if defined(STM32_TIM1_IS_USED) || defined(STM32_TIM10_IS_USED)
  nvicEnableVector(STM32_TIM1_UP_TIM10_NUMBER,
  2013ca:	2107      	movs	r1, #7
  2013cc:	2019      	movs	r0, #25
  2013ce:	f7ff fef7 	bl	2011c0 <nvicEnableVector>
                   STM32_IRQ_TIM1_UP_TIM10_PRIORITY);
#endif
#if defined(STM32_TIM1_IS_USED) || defined(STM32_TIM11_IS_USED)
  nvicEnableVector(STM32_TIM1_TRGCO_TIM11_NUMBER,
  2013d2:	2107      	movs	r1, #7
  2013d4:	201a      	movs	r0, #26
  2013d6:	f7ff fef3 	bl	2011c0 <nvicEnableVector>
                   STM32_IRQ_TIM1_TRGCO_TIM11_PRIORITY);
#endif
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_CC_NUMBER,
  2013da:	2107      	movs	r1, #7
  2013dc:	201b      	movs	r0, #27
  2013de:	f7ff feef 	bl	2011c0 <nvicEnableVector>
                   STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
  2013e2:	bf00      	nop
  2013e4:	bd08      	pop	{r3, pc}
  2013e6:	bf00      	nop
	...

002013f0 <VectorA0>:
/**
 * @brief   TIM1-BRK, TIM9 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_BRK_TIM9_HANDLER) {
  2013f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  2013f2:	4807      	ldr	r0, [pc, #28]	; (201410 <VectorA0+0x20>)
  2013f4:	f001 f9e4 	bl	2027c0 <__trace_isr_enter>
  2013f8:	f001 f842 	bl	202480 <__dbg_check_enter_isr>
#if STM32_ST_USE_TIM9
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  2013fc:	f001 f880 	bl	202500 <__dbg_check_leave_isr>
  201400:	4803      	ldr	r0, [pc, #12]	; (201410 <VectorA0+0x20>)
  201402:	f001 fa1d 	bl	202840 <__trace_isr_leave>
  201406:	f003 f873 	bl	2044f0 <__port_irq_epilogue>
}
  20140a:	bf00      	nop
  20140c:	bd08      	pop	{r3, pc}
  20140e:	bf00      	nop
  201410:	08004710 	.word	0x08004710
	...

00201420 <VectorA4>:
/**
 * @brief   TIM1-UP, TIM10 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_UP_TIM10_HANDLER) {
  201420:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  201422:	4808      	ldr	r0, [pc, #32]	; (201444 <VectorA4+0x24>)
  201424:	f001 f9cc 	bl	2027c0 <__trace_isr_enter>
  201428:	f001 f82a 	bl	202480 <__dbg_check_enter_isr>
  icu_lld_serve_interrupt(&ICUD10);
#endif
#endif
#if HAL_USE_PWM
#if STM32_PWM_USE_TIM1
  pwm_lld_serve_interrupt(&PWMD1);
  20142c:	4806      	ldr	r0, [pc, #24]	; (201448 <VectorA4+0x28>)
  20142e:	f000 fc1f 	bl	201c70 <pwm_lld_serve_interrupt>
#if STM32_ST_USE_TIM10
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  201432:	f001 f865 	bl	202500 <__dbg_check_leave_isr>
  201436:	4803      	ldr	r0, [pc, #12]	; (201444 <VectorA4+0x24>)
  201438:	f001 fa02 	bl	202840 <__trace_isr_leave>
  20143c:	f003 f858 	bl	2044f0 <__port_irq_epilogue>
}
  201440:	bf00      	nop
  201442:	bd08      	pop	{r3, pc}
  201444:	0800471c 	.word	0x0800471c
  201448:	20000818 	.word	0x20000818
  20144c:	00000000 	.word	0x00000000

00201450 <VectorA8>:
/**
 * @brief   TIM1-TRG-COM, TIM11 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_TRGCO_TIM11_HANDLER) {
  201450:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  201452:	4807      	ldr	r0, [pc, #28]	; (201470 <VectorA8+0x20>)
  201454:	f001 f9b4 	bl	2027c0 <__trace_isr_enter>
  201458:	f001 f812 	bl	202480 <__dbg_check_enter_isr>
#if STM32_ST_USE_TIM11
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  20145c:	f001 f850 	bl	202500 <__dbg_check_leave_isr>
  201460:	4803      	ldr	r0, [pc, #12]	; (201470 <VectorA8+0x20>)
  201462:	f001 f9ed 	bl	202840 <__trace_isr_leave>
  201466:	f003 f843 	bl	2044f0 <__port_irq_epilogue>
}
  20146a:	bf00      	nop
  20146c:	bd08      	pop	{r3, pc}
  20146e:	bf00      	nop
  201470:	08004728 	.word	0x08004728
	...

00201480 <VectorAC>:
/**
 * @brief   TIM1-CC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM1_CC_HANDLER) {
  201480:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  201482:	4808      	ldr	r0, [pc, #32]	; (2014a4 <VectorAC+0x24>)
  201484:	f001 f99c 	bl	2027c0 <__trace_isr_enter>
  201488:	f000 fffa 	bl	202480 <__dbg_check_enter_isr>
  icu_lld_serve_interrupt(&ICUD1);
#endif
#endif
#if HAL_USE_PWM
#if STM32_PWM_USE_TIM1
  pwm_lld_serve_interrupt(&PWMD1);
  20148c:	4806      	ldr	r0, [pc, #24]	; (2014a8 <VectorAC+0x28>)
  20148e:	f000 fbef 	bl	201c70 <pwm_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  201492:	f001 f835 	bl	202500 <__dbg_check_leave_isr>
  201496:	4803      	ldr	r0, [pc, #12]	; (2014a4 <VectorAC+0x24>)
  201498:	f001 f9d2 	bl	202840 <__trace_isr_leave>
  20149c:	f003 f828 	bl	2044f0 <__port_irq_epilogue>
}
  2014a0:	bf00      	nop
  2014a2:	bd08      	pop	{r3, pc}
  2014a4:	08004734 	.word	0x08004734
  2014a8:	20000818 	.word	0x20000818
  2014ac:	00000000 	.word	0x00000000

002014b0 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
  2014b0:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
  2014b2:	2107      	movs	r1, #7
  2014b4:	201c      	movs	r0, #28
  2014b6:	f7ff fe83 	bl	2011c0 <nvicEnableVector>
#endif
}
  2014ba:	bf00      	nop
  2014bc:	bd08      	pop	{r3, pc}
  2014be:	bf00      	nop

002014c0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
  2014c0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  2014c2:	4808      	ldr	r0, [pc, #32]	; (2014e4 <VectorB0+0x24>)
  2014c4:	f001 f97c 	bl	2027c0 <__trace_isr_enter>
  2014c8:	f000 ffda 	bl	202480 <__dbg_check_enter_isr>
  gpt_lld_serve_interrupt(&GPTD2);
#endif
#endif
#if HAL_USE_ICU
#if STM32_ICU_USE_TIM2
  icu_lld_serve_interrupt(&ICUD2);
  2014cc:	4806      	ldr	r0, [pc, #24]	; (2014e8 <VectorB0+0x28>)
  2014ce:	f000 fb37 	bl	201b40 <icu_lld_serve_interrupt>
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  2014d2:	f001 f815 	bl	202500 <__dbg_check_leave_isr>
  2014d6:	4803      	ldr	r0, [pc, #12]	; (2014e4 <VectorB0+0x24>)
  2014d8:	f001 f9b2 	bl	202840 <__trace_isr_leave>
  2014dc:	f003 f808 	bl	2044f0 <__port_irq_epilogue>
}
  2014e0:	bf00      	nop
  2014e2:	bd08      	pop	{r3, pc}
  2014e4:	08004740 	.word	0x08004740
  2014e8:	20000800 	.word	0x20000800
  2014ec:	00000000 	.word	0x00000000

002014f0 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
  2014f0:	bf00      	nop
  2014f2:	4770      	bx	lr
	...

00201500 <tim4_irq_init>:

static inline void tim4_irq_init(void) {
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
#endif
}
  201500:	bf00      	nop
  201502:	4770      	bx	lr
	...

00201510 <tim5_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim5_irq_init(void) {
  201510:	b508      	push	{r3, lr}
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
  201512:	2107      	movs	r1, #7
  201514:	2032      	movs	r0, #50	; 0x32
  201516:	f7ff fe53 	bl	2011c0 <nvicEnableVector>
#endif
}
  20151a:	bf00      	nop
  20151c:	bd08      	pop	{r3, pc}
  20151e:	bf00      	nop

00201520 <Vector108>:
/**
 * @brief   TIM5 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM5_HANDLER) {
  201520:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  201522:	4808      	ldr	r0, [pc, #32]	; (201544 <Vector108+0x24>)
  201524:	f001 f94c 	bl	2027c0 <__trace_isr_enter>
  201528:	f000 ffaa 	bl	202480 <__dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD5);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM5
  st_lld_serve_interrupt();
  20152c:	f000 fad0 	bl	201ad0 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  201530:	f000 ffe6 	bl	202500 <__dbg_check_leave_isr>
  201534:	4803      	ldr	r0, [pc, #12]	; (201544 <Vector108+0x24>)
  201536:	f001 f983 	bl	202840 <__trace_isr_leave>
  20153a:	f002 ffd9 	bl	2044f0 <__port_irq_epilogue>
}
  20153e:	bf00      	nop
  201540:	bd08      	pop	{r3, pc}
  201542:	bf00      	nop
  201544:	0800474c 	.word	0x0800474c
	...

00201550 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
  201550:	bf00      	nop
  201552:	4770      	bx	lr
	...

00201560 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
  201560:	bf00      	nop
  201562:	4770      	bx	lr
	...

00201570 <tim8_tim12_tim13_tim14_irq_init>:
#endif
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_CC_NUMBER,
                   STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
  201570:	bf00      	nop
  201572:	4770      	bx	lr
	...

00201580 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
  201580:	b508      	push	{r3, lr}

  exti0_irq_init();
  201582:	f7ff fe4d 	bl	201220 <exti0_irq_init>
  exti1_irq_init();
  201586:	f7ff fe53 	bl	201230 <exti1_irq_init>
  exti2_irq_init();
  20158a:	f7ff fe59 	bl	201240 <exti2_irq_init>
  exti3_irq_init();
  20158e:	f7ff fe5f 	bl	201250 <exti3_irq_init>
  exti4_irq_init();
  201592:	f7ff fe65 	bl	201260 <exti4_irq_init>
  exti5_9_irq_init();
  201596:	f7ff fe6b 	bl	201270 <exti5_9_irq_init>
  exti10_15_irq_init();
  20159a:	f7ff fe71 	bl	201280 <exti10_15_irq_init>
  exti16_irq_init();
  20159e:	f7ff fe77 	bl	201290 <exti16_irq_init>
  exti17_irq_init();
  2015a2:	f7ff fe7d 	bl	2012a0 <exti17_irq_init>
  exti18_irq_init();
  2015a6:	f7ff fe83 	bl	2012b0 <exti18_irq_init>
  exti19_irq_init();
  2015aa:	f7ff fe89 	bl	2012c0 <exti19_irq_init>
  exti20_irq_init();
  2015ae:	f7ff fe8f 	bl	2012d0 <exti20_irq_init>
  exti21_irq_init();
  2015b2:	f7ff fe95 	bl	2012e0 <exti21_irq_init>
  exti22_irq_init();
  2015b6:	f7ff fe9b 	bl	2012f0 <exti22_irq_init>
  exti23_irq_init();
  2015ba:	f7ff fea1 	bl	201300 <exti23_irq_init>

  tim1_tim9_tim10_tim11_irq_init();
  2015be:	f7ff feff 	bl	2013c0 <tim1_tim9_tim10_tim11_irq_init>
  tim2_irq_init();
  2015c2:	f7ff ff75 	bl	2014b0 <tim2_irq_init>
  tim3_irq_init();
  2015c6:	f7ff ff93 	bl	2014f0 <tim3_irq_init>
  tim4_irq_init();
  2015ca:	f7ff ff99 	bl	201500 <tim4_irq_init>
  tim5_irq_init();
  2015ce:	f7ff ff9f 	bl	201510 <tim5_irq_init>
  tim6_irq_init();
  2015d2:	f7ff ffbd 	bl	201550 <tim6_irq_init>
  tim7_irq_init();
  2015d6:	f7ff ffc3 	bl	201560 <tim7_irq_init>
  tim8_tim12_tim13_tim14_irq_init();
  2015da:	f7ff ffc9 	bl	201570 <tim8_tim12_tim13_tim14_irq_init>

  usart1_irq_init();
  2015de:	f7ff fe97 	bl	201310 <usart1_irq_init>
  usart2_irq_init();
  2015e2:	f7ff feb5 	bl	201350 <usart2_irq_init>
  usart3_irq_init();
  2015e6:	f7ff febb 	bl	201360 <usart3_irq_init>
  uart4_irq_init();
  2015ea:	f7ff fec1 	bl	201370 <uart4_irq_init>
  uart5_irq_init();
  2015ee:	f7ff fec7 	bl	201380 <uart5_irq_init>
  usart6_irq_init();
  2015f2:	f7ff fecd 	bl	201390 <usart6_irq_init>
  uart7_irq_init();
  2015f6:	f7ff fed3 	bl	2013a0 <uart7_irq_init>
  uart8_irq_init();
  2015fa:	f7ff fed9 	bl	2013b0 <uart8_irq_init>
}
  2015fe:	bf00      	nop
  201600:	bd08      	pop	{r3, pc}
  201602:	bf00      	nop
	...

00201610 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR1 |= PWR_CR1_DBP;
  201610:	4b14      	ldr	r3, [pc, #80]	; (201664 <hal_lld_backup_domain_init+0x54>)
  201612:	681b      	ldr	r3, [r3, #0]
  201614:	4a13      	ldr	r2, [pc, #76]	; (201664 <hal_lld_backup_domain_init+0x54>)
  201616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  20161a:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  20161c:	4b12      	ldr	r3, [pc, #72]	; (201668 <hal_lld_backup_domain_init+0x58>)
  20161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  201620:	f403 7340 	and.w	r3, r3, #768	; 0x300
  201624:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  201628:	d006      	beq.n	201638 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
  20162a:	4b0f      	ldr	r3, [pc, #60]	; (201668 <hal_lld_backup_domain_init+0x58>)
  20162c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  201630:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201632:	4b0d      	ldr	r3, [pc, #52]	; (201668 <hal_lld_backup_domain_init+0x58>)
  201634:	2200      	movs	r2, #0
  201636:	671a      	str	r2, [r3, #112]	; 0x70
#if defined(STM32_LSE_BYPASS)
  /* LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201638:	4b0b      	ldr	r3, [pc, #44]	; (201668 <hal_lld_backup_domain_init+0x58>)
  20163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  20163c:	4a0a      	ldr	r2, [pc, #40]	; (201668 <hal_lld_backup_domain_init+0x58>)
  20163e:	f043 0319 	orr.w	r3, r3, #25
  201642:	6713      	str	r3, [r2, #112]	; 0x70
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201644:	bf00      	nop
  201646:	4b08      	ldr	r3, [pc, #32]	; (201668 <hal_lld_backup_domain_init+0x58>)
  201648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  20164a:	f003 0302 	and.w	r3, r3, #2
  20164e:	2b00      	cmp	r3, #0
  201650:	d0f9      	beq.n	201646 <hal_lld_backup_domain_init+0x36>

  PWR->CSR1 |= PWR_CSR1_BRE;
  while ((PWR->CSR1 & PWR_CSR1_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201652:	4b04      	ldr	r3, [pc, #16]	; (201664 <hal_lld_backup_domain_init+0x54>)
  201654:	685b      	ldr	r3, [r3, #4]
  201656:	4a03      	ldr	r2, [pc, #12]	; (201664 <hal_lld_backup_domain_init+0x54>)
  201658:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  20165c:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
  20165e:	bf00      	nop
  201660:	4770      	bx	lr
  201662:	bf00      	nop
  201664:	40007000 	.word	0x40007000
  201668:	40023800 	.word	0x40023800
  20166c:	00000000 	.word	0x00000000

00201670 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
  201670:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  201672:	4b1e      	ldr	r3, [pc, #120]	; (2016ec <hal_lld_init+0x7c>)
  201674:	691a      	ldr	r2, [r3, #16]
  201676:	491d      	ldr	r1, [pc, #116]	; (2016ec <hal_lld_init+0x7c>)
  201678:	4b1d      	ldr	r3, [pc, #116]	; (2016f0 <hal_lld_init+0x80>)
  20167a:	4313      	orrs	r3, r2
  20167c:	610b      	str	r3, [r1, #16]
  20167e:	4b1b      	ldr	r3, [pc, #108]	; (2016ec <hal_lld_init+0x7c>)
  201680:	691b      	ldr	r3, [r3, #16]
  201682:	4a1a      	ldr	r2, [pc, #104]	; (2016ec <hal_lld_init+0x7c>)
  201684:	f3c3 030a 	ubfx	r3, r3, #0, #11
  201688:	6113      	str	r3, [r2, #16]
  20168a:	4b18      	ldr	r3, [pc, #96]	; (2016ec <hal_lld_init+0x7c>)
  20168c:	691b      	ldr	r3, [r3, #16]
  rccResetAHB2(~0);
  20168e:	4b17      	ldr	r3, [pc, #92]	; (2016ec <hal_lld_init+0x7c>)
  201690:	695b      	ldr	r3, [r3, #20]
  201692:	4b16      	ldr	r3, [pc, #88]	; (2016ec <hal_lld_init+0x7c>)
  201694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  201698:	615a      	str	r2, [r3, #20]
  20169a:	4b14      	ldr	r3, [pc, #80]	; (2016ec <hal_lld_init+0x7c>)
  20169c:	695b      	ldr	r3, [r3, #20]
  20169e:	4b13      	ldr	r3, [pc, #76]	; (2016ec <hal_lld_init+0x7c>)
  2016a0:	2200      	movs	r2, #0
  2016a2:	615a      	str	r2, [r3, #20]
  2016a4:	4b11      	ldr	r3, [pc, #68]	; (2016ec <hal_lld_init+0x7c>)
  2016a6:	695b      	ldr	r3, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  2016a8:	4b10      	ldr	r3, [pc, #64]	; (2016ec <hal_lld_init+0x7c>)
  2016aa:	6a1b      	ldr	r3, [r3, #32]
  2016ac:	4a0f      	ldr	r2, [pc, #60]	; (2016ec <hal_lld_init+0x7c>)
  2016ae:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
  2016b2:	6213      	str	r3, [r2, #32]
  2016b4:	4b0d      	ldr	r3, [pc, #52]	; (2016ec <hal_lld_init+0x7c>)
  2016b6:	6a1b      	ldr	r3, [r3, #32]
  2016b8:	4a0c      	ldr	r2, [pc, #48]	; (2016ec <hal_lld_init+0x7c>)
  2016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  2016be:	6213      	str	r3, [r2, #32]
  2016c0:	4b0a      	ldr	r3, [pc, #40]	; (2016ec <hal_lld_init+0x7c>)
  2016c2:	6a1b      	ldr	r3, [r3, #32]
  rccResetAPB2(~0);
  2016c4:	4b09      	ldr	r3, [pc, #36]	; (2016ec <hal_lld_init+0x7c>)
  2016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2016c8:	4b08      	ldr	r3, [pc, #32]	; (2016ec <hal_lld_init+0x7c>)
  2016ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  2016ce:	625a      	str	r2, [r3, #36]	; 0x24
  2016d0:	4b06      	ldr	r3, [pc, #24]	; (2016ec <hal_lld_init+0x7c>)
  2016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2016d4:	4b05      	ldr	r3, [pc, #20]	; (2016ec <hal_lld_init+0x7c>)
  2016d6:	2200      	movs	r2, #0
  2016d8:	625a      	str	r2, [r3, #36]	; 0x24
  2016da:	4b04      	ldr	r3, [pc, #16]	; (2016ec <hal_lld_init+0x7c>)
  2016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
  2016de:	f7ff ff97 	bl	201610 <hal_lld_backup_domain_init>
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
  2016e2:	f7ff ff4d 	bl	201580 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR1 |= PWR_CR1_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
  2016e6:	bf00      	nop
  2016e8:	bd08      	pop	{r3, pc}
  2016ea:	bf00      	nop
  2016ec:	40023800 	.word	0x40023800
  2016f0:	fffff800 	.word	0xfffff800
	...

00201700 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
  201700:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
  201702:	4b50      	ldr	r3, [pc, #320]	; (201844 <stm32_clock_init+0x144>)
  201704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  201708:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  20170a:	4b4f      	ldr	r3, [pc, #316]	; (201848 <stm32_clock_init+0x148>)
  20170c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  201710:	601a      	str	r2, [r3, #0]

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201712:	4b4c      	ldr	r3, [pc, #304]	; (201844 <stm32_clock_init+0x144>)
  201714:	681b      	ldr	r3, [r3, #0]
  201716:	4a4b      	ldr	r2, [pc, #300]	; (201844 <stm32_clock_init+0x144>)
  201718:	f043 0301 	orr.w	r3, r3, #1
  20171c:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  20171e:	bf00      	nop
  201720:	4b48      	ldr	r3, [pc, #288]	; (201844 <stm32_clock_init+0x144>)
  201722:	681b      	ldr	r3, [r3, #0]
  201724:	f003 0302 	and.w	r3, r3, #2
  201728:	2b00      	cmp	r3, #0
  20172a:	d0f9      	beq.n	201720 <stm32_clock_init+0x20>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  20172c:	4b45      	ldr	r3, [pc, #276]	; (201844 <stm32_clock_init+0x144>)
  20172e:	689b      	ldr	r3, [r3, #8]
  201730:	4a44      	ldr	r2, [pc, #272]	; (201844 <stm32_clock_init+0x144>)
  201732:	f023 0303 	bic.w	r3, r3, #3
  201736:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201738:	bf00      	nop
  20173a:	4b42      	ldr	r3, [pc, #264]	; (201844 <stm32_clock_init+0x144>)
  20173c:	689b      	ldr	r3, [r3, #8]
  20173e:	f003 030c 	and.w	r3, r3, #12
  201742:	2b00      	cmp	r3, #0
  201744:	d1f9      	bne.n	20173a <stm32_clock_init+0x3a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201746:	4b3f      	ldr	r3, [pc, #252]	; (201844 <stm32_clock_init+0x144>)
  201748:	681b      	ldr	r3, [r3, #0]
  20174a:	4a3e      	ldr	r2, [pc, #248]	; (201844 <stm32_clock_init+0x144>)
  20174c:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
  201750:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201752:	4b3c      	ldr	r3, [pc, #240]	; (201844 <stm32_clock_init+0x144>)
  201754:	2200      	movs	r2, #0
  201756:	609a      	str	r2, [r3, #8]

#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201758:	4b3a      	ldr	r3, [pc, #232]	; (201844 <stm32_clock_init+0x144>)
  20175a:	681b      	ldr	r3, [r3, #0]
  20175c:	4a39      	ldr	r2, [pc, #228]	; (201844 <stm32_clock_init+0x144>)
  20175e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201762:	6013      	str	r3, [r2, #0]
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201764:	bf00      	nop
  201766:	4b37      	ldr	r3, [pc, #220]	; (201844 <stm32_clock_init+0x144>)
  201768:	681b      	ldr	r3, [r3, #0]
  20176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  20176e:	2b00      	cmp	r3, #0
  201770:	d0f9      	beq.n	201766 <stm32_clock_init+0x66>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201772:	4b34      	ldr	r3, [pc, #208]	; (201844 <stm32_clock_init+0x144>)
  201774:	4a35      	ldr	r2, [pc, #212]	; (20184c <stm32_clock_init+0x14c>)
  201776:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
  201778:	4b32      	ldr	r3, [pc, #200]	; (201844 <stm32_clock_init+0x144>)
  20177a:	681b      	ldr	r3, [r3, #0]
  20177c:	4a31      	ldr	r2, [pc, #196]	; (201844 <stm32_clock_init+0x144>)
  20177e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  201782:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201784:	bf00      	nop
  201786:	4b30      	ldr	r3, [pc, #192]	; (201848 <stm32_clock_init+0x148>)
  201788:	685b      	ldr	r3, [r3, #4]
  20178a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  20178e:	2b00      	cmp	r3, #0
  201790:	d0f9      	beq.n	201786 <stm32_clock_init+0x86>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201792:	4b2d      	ldr	r3, [pc, #180]	; (201848 <stm32_clock_init+0x148>)
  201794:	681b      	ldr	r3, [r3, #0]
  201796:	4a2c      	ldr	r2, [pc, #176]	; (201848 <stm32_clock_init+0x148>)
  201798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  20179c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  20179e:	bf00      	nop
  2017a0:	4b29      	ldr	r3, [pc, #164]	; (201848 <stm32_clock_init+0x148>)
  2017a2:	685b      	ldr	r3, [r3, #4]
  2017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  2017a8:	2b00      	cmp	r3, #0
  2017aa:	d0f9      	beq.n	2017a0 <stm32_clock_init+0xa0>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  2017ac:	4b26      	ldr	r3, [pc, #152]	; (201848 <stm32_clock_init+0x148>)
  2017ae:	681b      	ldr	r3, [r3, #0]
  2017b0:	4a25      	ldr	r2, [pc, #148]	; (201848 <stm32_clock_init+0x148>)
  2017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  2017b6:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  2017b8:	bf00      	nop
  2017ba:	4b23      	ldr	r3, [pc, #140]	; (201848 <stm32_clock_init+0x148>)
  2017bc:	685b      	ldr	r3, [r3, #4]
  2017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  2017c2:	2b00      	cmp	r3, #0
  2017c4:	d0f9      	beq.n	2017ba <stm32_clock_init+0xba>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  2017c6:	bf00      	nop
  2017c8:	4b1e      	ldr	r3, [pc, #120]	; (201844 <stm32_clock_init+0x144>)
  2017ca:	681b      	ldr	r3, [r3, #0]
  2017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  2017d0:	2b00      	cmp	r3, #0
  2017d2:	d0f9      	beq.n	2017c8 <stm32_clock_init+0xc8>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  2017d4:	4b1b      	ldr	r3, [pc, #108]	; (201844 <stm32_clock_init+0x144>)
  2017d6:	4a1e      	ldr	r2, [pc, #120]	; (201850 <stm32_clock_init+0x150>)
  2017d8:	609a      	str	r2, [r3, #8]
              STM32_HPRE;

  /* DCKCFGR1 register initialization, note, must take care of the _OFF
     pseudo settings.*/
  {
    uint32_t dckcfgr1 = STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ | STM32_PLLSAIDIVR;
  2017da:	f240 1301 	movw	r3, #257	; 0x101
  2017de:	9301      	str	r3, [sp, #4]
    dckcfgr1 |= STM32_SAI1SEL;
#endif
#if STM32_TIMPRE_ENABLE == TRUE
    dckcfgr1 |= RCC_DCKCFGR1_TIMPRE;
#endif
    RCC->DCKCFGR1 = dckcfgr1;
  2017e0:	4a18      	ldr	r2, [pc, #96]	; (201844 <stm32_clock_init+0x144>)
  2017e2:	9b01      	ldr	r3, [sp, #4]
  2017e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /* Peripheral clock sources.*/
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  2017e8:	4b16      	ldr	r3, [pc, #88]	; (201844 <stm32_clock_init+0x144>)
  2017ea:	2200      	movs	r2, #0
  2017ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                  STM32_UART8SEL  | STM32_UART7SEL  | STM32_USART6SEL |
                  STM32_UART5SEL  | STM32_UART4SEL  | STM32_USART3SEL |
                  STM32_USART2SEL | STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  2017f0:	4b18      	ldr	r3, [pc, #96]	; (201854 <stm32_clock_init+0x154>)
  2017f2:	f240 3207 	movw	r2, #775	; 0x307
  2017f6:	601a      	str	r2, [r3, #0]
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
  2017f8:	bf00      	nop
  2017fa:	4b16      	ldr	r3, [pc, #88]	; (201854 <stm32_clock_init+0x154>)
  2017fc:	681b      	ldr	r3, [r3, #0]
  2017fe:	f003 030f 	and.w	r3, r3, #15
  201802:	2b07      	cmp	r3, #7
  201804:	d1f9      	bne.n	2017fa <stm32_clock_init+0xfa>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201806:	4b0f      	ldr	r3, [pc, #60]	; (201844 <stm32_clock_init+0x144>)
  201808:	689b      	ldr	r3, [r3, #8]
  20180a:	4a0e      	ldr	r2, [pc, #56]	; (201844 <stm32_clock_init+0x144>)
  20180c:	f043 0302 	orr.w	r3, r3, #2
  201810:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201812:	bf00      	nop
  201814:	4b0b      	ldr	r3, [pc, #44]	; (201844 <stm32_clock_init+0x144>)
  201816:	689b      	ldr	r3, [r3, #8]
  201818:	f003 030c 	and.w	r3, r3, #12
  20181c:	2b08      	cmp	r3, #8
  20181e:	d1f9      	bne.n	201814 <stm32_clock_init+0x114>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
  201820:	4b08      	ldr	r3, [pc, #32]	; (201844 <stm32_clock_init+0x144>)
  201822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  201824:	4a07      	ldr	r2, [pc, #28]	; (201844 <stm32_clock_init+0x144>)
  201826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  20182a:	6453      	str	r3, [r2, #68]	; 0x44
  20182c:	4b05      	ldr	r3, [pc, #20]	; (201844 <stm32_clock_init+0x144>)
  20182e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  201830:	4a04      	ldr	r2, [pc, #16]	; (201844 <stm32_clock_init+0x144>)
  201832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201836:	6653      	str	r3, [r2, #100]	; 0x64
  201838:	4b02      	ldr	r3, [pc, #8]	; (201844 <stm32_clock_init+0x144>)
  20183a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
  20183c:	bf00      	nop
  20183e:	b002      	add	sp, #8
  201840:	4770      	bx	lr
  201842:	bf00      	nop
  201844:	40023800 	.word	0x40023800
  201848:	40007000 	.word	0x40007000
  20184c:	09406c19 	.word	0x09406c19
  201850:	30999400 	.word	0x30999400
  201854:	40023c00 	.word	0x40023c00
	...

00201860 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
  201860:	bf00      	nop
  201862:	4770      	bx	lr
	...

00201870 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  201870:	b08e      	sub	sp, #56	; 0x38
  201872:	9003      	str	r0, [sp, #12]
  201874:	9102      	str	r1, [sp, #8]
  201876:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  201878:	9b01      	ldr	r3, [sp, #4]
  20187a:	f003 0303 	and.w	r3, r3, #3
  20187e:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  201880:	9b01      	ldr	r3, [sp, #4]
  201882:	089b      	lsrs	r3, r3, #2
  201884:	f003 0301 	and.w	r3, r3, #1
  201888:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  20188a:	9b01      	ldr	r3, [sp, #4]
  20188c:	08db      	lsrs	r3, r3, #3
  20188e:	f003 0303 	and.w	r3, r3, #3
  201892:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  201894:	9b01      	ldr	r3, [sp, #4]
  201896:	095b      	lsrs	r3, r3, #5
  201898:	f003 0303 	and.w	r3, r3, #3
  20189c:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  20189e:	9b01      	ldr	r3, [sp, #4]
  2018a0:	09db      	lsrs	r3, r3, #7
  2018a2:	f003 030f 	and.w	r3, r3, #15
  2018a6:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
  2018a8:	2300      	movs	r3, #0
  2018aa:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
  2018ac:	9b02      	ldr	r3, [sp, #8]
  2018ae:	f003 0301 	and.w	r3, r3, #1
  2018b2:	2b00      	cmp	r3, #0
  2018b4:	d079      	beq.n	2019aa <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  2018b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2018b8:	f003 0307 	and.w	r3, r3, #7
  2018bc:	009b      	lsls	r3, r3, #2
  2018be:	9a08      	ldr	r2, [sp, #32]
  2018c0:	fa02 f303 	lsl.w	r3, r2, r3
  2018c4:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
  2018c6:	2201      	movs	r2, #1
  2018c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2018ca:	fa02 f303 	lsl.w	r3, r2, r3
  2018ce:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
  2018d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2018d2:	005b      	lsls	r3, r3, #1
  2018d4:	2203      	movs	r2, #3
  2018d6:	fa02 f303 	lsl.w	r3, r2, r3
  2018da:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
  2018dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2018de:	f003 0307 	and.w	r3, r3, #7
  2018e2:	009b      	lsls	r3, r3, #2
  2018e4:	220f      	movs	r2, #15
  2018e6:	fa02 f303 	lsl.w	r3, r2, r3
  2018ea:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  2018ec:	9b03      	ldr	r3, [sp, #12]
  2018ee:	685a      	ldr	r2, [r3, #4]
  2018f0:	9b06      	ldr	r3, [sp, #24]
  2018f2:	43db      	mvns	r3, r3
  2018f4:	401a      	ands	r2, r3
  2018f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2018f8:	431a      	orrs	r2, r3
  2018fa:	9b03      	ldr	r3, [sp, #12]
  2018fc:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  2018fe:	9b03      	ldr	r3, [sp, #12]
  201900:	689a      	ldr	r2, [r3, #8]
  201902:	9b05      	ldr	r3, [sp, #20]
  201904:	43db      	mvns	r3, r3
  201906:	401a      	ands	r2, r3
  201908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  20190a:	431a      	orrs	r2, r3
  20190c:	9b03      	ldr	r3, [sp, #12]
  20190e:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  201910:	9b03      	ldr	r3, [sp, #12]
  201912:	68da      	ldr	r2, [r3, #12]
  201914:	9b05      	ldr	r3, [sp, #20]
  201916:	43db      	mvns	r3, r3
  201918:	401a      	ands	r2, r3
  20191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  20191c:	431a      	orrs	r2, r3
  20191e:	9b03      	ldr	r3, [sp, #12]
  201920:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  201922:	9b01      	ldr	r3, [sp, #4]
  201924:	f003 0303 	and.w	r3, r3, #3
  201928:	2b02      	cmp	r3, #2
  20192a:	d11f      	bne.n	20196c <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
  20192c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  20192e:	2b07      	cmp	r3, #7
  201930:	d809      	bhi.n	201946 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201932:	9b03      	ldr	r3, [sp, #12]
  201934:	6a1a      	ldr	r2, [r3, #32]
  201936:	9b04      	ldr	r3, [sp, #16]
  201938:	43db      	mvns	r3, r3
  20193a:	401a      	ands	r2, r3
  20193c:	9b07      	ldr	r3, [sp, #28]
  20193e:	431a      	orrs	r2, r3
  201940:	9b03      	ldr	r3, [sp, #12]
  201942:	621a      	str	r2, [r3, #32]
  201944:	e008      	b.n	201958 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201946:	9b03      	ldr	r3, [sp, #12]
  201948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  20194a:	9b04      	ldr	r3, [sp, #16]
  20194c:	43db      	mvns	r3, r3
  20194e:	401a      	ands	r2, r3
  201950:	9b07      	ldr	r3, [sp, #28]
  201952:	431a      	orrs	r2, r3
  201954:	9b03      	ldr	r3, [sp, #12]
  201956:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
  201958:	9b03      	ldr	r3, [sp, #12]
  20195a:	681a      	ldr	r2, [r3, #0]
  20195c:	9b05      	ldr	r3, [sp, #20]
  20195e:	43db      	mvns	r3, r3
  201960:	401a      	ands	r2, r3
  201962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  201964:	431a      	orrs	r2, r3
  201966:	9b03      	ldr	r3, [sp, #12]
  201968:	601a      	str	r2, [r3, #0]
  20196a:	e01e      	b.n	2019aa <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
  20196c:	9b03      	ldr	r3, [sp, #12]
  20196e:	681a      	ldr	r2, [r3, #0]
  201970:	9b05      	ldr	r3, [sp, #20]
  201972:	43db      	mvns	r3, r3
  201974:	401a      	ands	r2, r3
  201976:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  201978:	431a      	orrs	r2, r3
  20197a:	9b03      	ldr	r3, [sp, #12]
  20197c:	601a      	str	r2, [r3, #0]
        if (bit < 8)
  20197e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  201980:	2b07      	cmp	r3, #7
  201982:	d809      	bhi.n	201998 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  201984:	9b03      	ldr	r3, [sp, #12]
  201986:	6a1a      	ldr	r2, [r3, #32]
  201988:	9b04      	ldr	r3, [sp, #16]
  20198a:	43db      	mvns	r3, r3
  20198c:	401a      	ands	r2, r3
  20198e:	9b07      	ldr	r3, [sp, #28]
  201990:	431a      	orrs	r2, r3
  201992:	9b03      	ldr	r3, [sp, #12]
  201994:	621a      	str	r2, [r3, #32]
  201996:	e008      	b.n	2019aa <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  201998:	9b03      	ldr	r3, [sp, #12]
  20199a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  20199c:	9b04      	ldr	r3, [sp, #16]
  20199e:	43db      	mvns	r3, r3
  2019a0:	401a      	ands	r2, r3
  2019a2:	9b07      	ldr	r3, [sp, #28]
  2019a4:	431a      	orrs	r2, r3
  2019a6:	9b03      	ldr	r3, [sp, #12]
  2019a8:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
  2019aa:	9b02      	ldr	r3, [sp, #8]
  2019ac:	085b      	lsrs	r3, r3, #1
  2019ae:	9302      	str	r3, [sp, #8]
    if (!mask)
  2019b0:	9b02      	ldr	r3, [sp, #8]
  2019b2:	2b00      	cmp	r3, #0
  2019b4:	d00f      	beq.n	2019d6 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
  2019b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2019b8:	005b      	lsls	r3, r3, #1
  2019ba:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
  2019bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  2019be:	009b      	lsls	r3, r3, #2
  2019c0:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
  2019c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  2019c4:	009b      	lsls	r3, r3, #2
  2019c6:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
  2019c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  2019ca:	009b      	lsls	r3, r3, #2
  2019cc:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
  2019ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2019d0:	3301      	adds	r3, #1
  2019d2:	9309      	str	r3, [sp, #36]	; 0x24
    if ((mask & 1) != 0) {
  2019d4:	e76a      	b.n	2018ac <_pal_lld_setgroupmode+0x3c>
      return;
  2019d6:	bf00      	nop
  }
}
  2019d8:	b00e      	add	sp, #56	; 0x38
  2019da:	4770      	bx	lr
  2019dc:	0000      	movs	r0, r0
	...

002019e0 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
  2019e0:	b500      	push	{lr}
  2019e2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  2019e4:	b672      	cpsid	i
}
  2019e6:	bf00      	nop
  2019e8:	2330      	movs	r3, #48	; 0x30
  2019ea:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2019ec:	9b01      	ldr	r3, [sp, #4]
  2019ee:	f383 8811 	msr	BASEPRI, r3
}
  2019f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  2019f4:	b662      	cpsie	i
}
  2019f6:	bf00      	nop
}
  2019f8:	bf00      	nop
 * @note    Same as @p port_lock() in this port.
 */
__STATIC_FORCEINLINE void port_lock_from_isr(void) {

  port_lock();
}
  2019fa:	bf00      	nop

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
  2019fc:	f000 fcf0 	bl	2023e0 <__dbg_check_lock_from_isr>
}
  201a00:	bf00      	nop
  201a02:	b003      	add	sp, #12
  201a04:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201a10 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
  201a10:	b500      	push	{lr}
  201a12:	b083      	sub	sp, #12

  __dbg_check_unlock_from_isr();
  201a14:	f000 fd0c 	bl	202430 <__dbg_check_unlock_from_isr>
  201a18:	2300      	movs	r3, #0
  201a1a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  201a1c:	9b01      	ldr	r3, [sp, #4]
  201a1e:	f383 8811 	msr	BASEPRI, r3
}
  201a22:	bf00      	nop
}
  201a24:	bf00      	nop
 * @note    Same as @p port_unlock() in this port.
 */
__STATIC_FORCEINLINE void port_unlock_from_isr(void) {

  port_unlock();
}
  201a26:	bf00      	nop
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
  201a28:	bf00      	nop
  201a2a:	b003      	add	sp, #12
  201a2c:	f85d fb04 	ldr.w	pc, [sp], #4

00201a30 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
  201a30:	b508      	push	{r3, lr}
  chSysLockFromISR();
  201a32:	f7ff ffd5 	bl	2019e0 <chSysLockFromISR.lto_priv.0>
}
  201a36:	bf00      	nop
  201a38:	bd08      	pop	{r3, pc}
  201a3a:	bf00      	nop
  201a3c:	0000      	movs	r0, r0
	...

00201a40 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
  201a40:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  201a42:	f7ff ffe5 	bl	201a10 <chSysUnlockFromISR.lto_priv.0>
}
  201a46:	bf00      	nop
  201a48:	bd08      	pop	{r3, pc}
  201a4a:	bf00      	nop
  201a4c:	0000      	movs	r0, r0
	...

00201a50 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
  201a50:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
  201a52:	f000 fc5d 	bl	202310 <chSysTimerHandlerI>
}
  201a56:	bf00      	nop
  201a58:	bd08      	pop	{r3, pc}
  201a5a:	bf00      	nop
  201a5c:	0000      	movs	r0, r0
	...

00201a60 <st_lld_init>:
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
  201a60:	4b17      	ldr	r3, [pc, #92]	; (201ac0 <st_lld_init+0x60>)
  201a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  201a64:	4a16      	ldr	r2, [pc, #88]	; (201ac0 <st_lld_init+0x60>)
  201a66:	f043 0308 	orr.w	r3, r3, #8
  201a6a:	6413      	str	r3, [r2, #64]	; 0x40
  201a6c:	4b14      	ldr	r3, [pc, #80]	; (201ac0 <st_lld_init+0x60>)
  201a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  201a70:	4a13      	ldr	r2, [pc, #76]	; (201ac0 <st_lld_init+0x60>)
  201a72:	f043 0308 	orr.w	r3, r3, #8
  201a76:	6613      	str	r3, [r2, #96]	; 0x60
  201a78:	4b11      	ldr	r3, [pc, #68]	; (201ac0 <st_lld_init+0x60>)
  201a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
  201a7c:	4b11      	ldr	r3, [pc, #68]	; (201ac4 <st_lld_init+0x64>)
  201a7e:	689b      	ldr	r3, [r3, #8]
  201a80:	4a10      	ldr	r2, [pc, #64]	; (201ac4 <st_lld_init+0x64>)
  201a82:	f043 0308 	orr.w	r3, r3, #8
  201a86:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  201a88:	4b0f      	ldr	r3, [pc, #60]	; (201ac8 <st_lld_init+0x68>)
  201a8a:	f642 222f 	movw	r2, #10799	; 0x2a2f
  201a8e:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  201a90:	4b0d      	ldr	r3, [pc, #52]	; (201ac8 <st_lld_init+0x68>)
  201a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  201a96:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
  201a98:	4b0b      	ldr	r3, [pc, #44]	; (201ac8 <st_lld_init+0x68>)
  201a9a:	2200      	movs	r2, #0
  201a9c:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
  201a9e:	4b0a      	ldr	r3, [pc, #40]	; (201ac8 <st_lld_init+0x68>)
  201aa0:	2200      	movs	r2, #0
  201aa2:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  201aa4:	4b08      	ldr	r3, [pc, #32]	; (201ac8 <st_lld_init+0x68>)
  201aa6:	2200      	movs	r2, #0
  201aa8:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
  201aaa:	4b07      	ldr	r3, [pc, #28]	; (201ac8 <st_lld_init+0x68>)
  201aac:	2200      	movs	r2, #0
  201aae:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  201ab0:	4b05      	ldr	r3, [pc, #20]	; (201ac8 <st_lld_init+0x68>)
  201ab2:	2201      	movs	r2, #1
  201ab4:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  201ab6:	4b04      	ldr	r3, [pc, #16]	; (201ac8 <st_lld_init+0x68>)
  201ab8:	2201      	movs	r2, #1
  201aba:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
  201abc:	bf00      	nop
  201abe:	4770      	bx	lr
  201ac0:	40023800 	.word	0x40023800
  201ac4:	e0042000 	.word	0xe0042000
  201ac8:	40000c00 	.word	0x40000c00
  201acc:	00000000 	.word	0x00000000

00201ad0 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
  201ad0:	b500      	push	{lr}
  201ad2:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
  201ad4:	4b0e      	ldr	r3, [pc, #56]	; (201b10 <st_lld_serve_interrupt+0x40>)
  201ad6:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
  201ad8:	9b01      	ldr	r3, [sp, #4]
  201ada:	691b      	ldr	r3, [r3, #16]
  201adc:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
  201ade:	9b01      	ldr	r3, [sp, #4]
  201ae0:	68db      	ldr	r3, [r3, #12]
  201ae2:	b2db      	uxtb	r3, r3
  201ae4:	9a00      	ldr	r2, [sp, #0]
  201ae6:	4013      	ands	r3, r2
  201ae8:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
  201aea:	9b00      	ldr	r3, [sp, #0]
  201aec:	43da      	mvns	r2, r3
  201aee:	9b01      	ldr	r3, [sp, #4]
  201af0:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
  201af2:	9b00      	ldr	r3, [sp, #0]
  201af4:	f003 0302 	and.w	r3, r3, #2
  201af8:	2b00      	cmp	r3, #0
  201afa:	d005      	beq.n	201b08 <st_lld_serve_interrupt+0x38>
#endif
  {
    osalSysLockFromISR();
  201afc:	f7ff ff98 	bl	201a30 <osalSysLockFromISR.lto_priv.0>
    osalOsTimerHandlerI();
  201b00:	f7ff ffa6 	bl	201a50 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
  201b04:	f7ff ff9c 	bl	201a40 <osalSysUnlockFromISR.lto_priv.0>
      st_callbacks[3](3U);
    }
  }
#endif
#endif
}
  201b08:	bf00      	nop
  201b0a:	b003      	add	sp, #12
  201b0c:	f85d fb04 	ldr.w	pc, [sp], #4
  201b10:	40000c00 	.word	0x40000c00
	...

00201b20 <icu_lld_init>:
/**
 * @brief   Low level ICU driver initialization.
 *
 * @notapi
 */
void icu_lld_init(void) {
  201b20:	b508      	push	{r3, lr}
  ICUD1.tim = STM32_TIM1;
#endif

#if STM32_ICU_USE_TIM2
  /* Driver initialization.*/
  icuObjectInit(&ICUD2);
  201b22:	4804      	ldr	r0, [pc, #16]	; (201b34 <icu_lld_init+0x14>)
  201b24:	f7ff f9bc 	bl	200ea0 <icuObjectInit>
  ICUD2.tim = STM32_TIM2;
  201b28:	4b02      	ldr	r3, [pc, #8]	; (201b34 <icu_lld_init+0x14>)
  201b2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  201b2e:	60da      	str	r2, [r3, #12]
#if STM32_ICU_USE_TIM22
  /* Driver initialization.*/
  icuObjectInit(&ICUD22);
  ICUD22.tim = STM32_TIM22;
#endif
}
  201b30:	bf00      	nop
  201b32:	bd08      	pop	{r3, pc}
  201b34:	20000800 	.word	0x20000800
	...

00201b40 <icu_lld_serve_interrupt>:
 *
 * @param[in] icup      pointer to the @p ICUDriver object
 *
 * @notapi
 */
void icu_lld_serve_interrupt(ICUDriver *icup) {
  201b40:	b500      	push	{lr}
  201b42:	b085      	sub	sp, #20
  201b44:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = icup->tim->SR;
  201b46:	9b01      	ldr	r3, [sp, #4]
  201b48:	68db      	ldr	r3, [r3, #12]
  201b4a:	691b      	ldr	r3, [r3, #16]
  201b4c:	9303      	str	r3, [sp, #12]
  sr &= icup->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  201b4e:	9b01      	ldr	r3, [sp, #4]
  201b50:	68db      	ldr	r3, [r3, #12]
  201b52:	68db      	ldr	r3, [r3, #12]
  201b54:	b2db      	uxtb	r3, r3
  201b56:	9a03      	ldr	r2, [sp, #12]
  201b58:	4013      	ands	r3, r2
  201b5a:	9303      	str	r3, [sp, #12]
  icup->tim->SR = ~sr;
  201b5c:	9b01      	ldr	r3, [sp, #4]
  201b5e:	68db      	ldr	r3, [r3, #12]
  201b60:	9a03      	ldr	r2, [sp, #12]
  201b62:	43d2      	mvns	r2, r2
  201b64:	611a      	str	r2, [r3, #16]
  if (icup->config->channel == ICU_CHANNEL_1) {
  201b66:	9b01      	ldr	r3, [sp, #4]
  201b68:	685b      	ldr	r3, [r3, #4]
  201b6a:	7d1b      	ldrb	r3, [r3, #20]
  201b6c:	2b00      	cmp	r3, #0
  201b6e:	d129      	bne.n	201bc4 <icu_lld_serve_interrupt+0x84>
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  201b70:	9b03      	ldr	r3, [sp, #12]
  201b72:	f003 0304 	and.w	r3, r3, #4
  201b76:	2b00      	cmp	r3, #0
  201b78:	d00d      	beq.n	201b96 <icu_lld_serve_interrupt+0x56>
      _icu_isr_invoke_width_cb(icup);
  201b7a:	9b01      	ldr	r3, [sp, #4]
  201b7c:	781b      	ldrb	r3, [r3, #0]
  201b7e:	2b04      	cmp	r3, #4
  201b80:	d109      	bne.n	201b96 <icu_lld_serve_interrupt+0x56>
  201b82:	9b01      	ldr	r3, [sp, #4]
  201b84:	685b      	ldr	r3, [r3, #4]
  201b86:	689b      	ldr	r3, [r3, #8]
  201b88:	2b00      	cmp	r3, #0
  201b8a:	d004      	beq.n	201b96 <icu_lld_serve_interrupt+0x56>
  201b8c:	9b01      	ldr	r3, [sp, #4]
  201b8e:	685b      	ldr	r3, [r3, #4]
  201b90:	689b      	ldr	r3, [r3, #8]
  201b92:	9801      	ldr	r0, [sp, #4]
  201b94:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  201b96:	9b03      	ldr	r3, [sp, #12]
  201b98:	f003 0302 	and.w	r3, r3, #2
  201b9c:	2b00      	cmp	r3, #0
  201b9e:	d03a      	beq.n	201c16 <icu_lld_serve_interrupt+0xd6>
      _icu_isr_invoke_period_cb(icup);
  201ba0:	9b01      	ldr	r3, [sp, #4]
  201ba2:	781b      	ldrb	r3, [r3, #0]
  201ba4:	2b04      	cmp	r3, #4
  201ba6:	d109      	bne.n	201bbc <icu_lld_serve_interrupt+0x7c>
  201ba8:	9b01      	ldr	r3, [sp, #4]
  201baa:	685b      	ldr	r3, [r3, #4]
  201bac:	68db      	ldr	r3, [r3, #12]
  201bae:	2b00      	cmp	r3, #0
  201bb0:	d004      	beq.n	201bbc <icu_lld_serve_interrupt+0x7c>
  201bb2:	9b01      	ldr	r3, [sp, #4]
  201bb4:	685b      	ldr	r3, [r3, #4]
  201bb6:	68db      	ldr	r3, [r3, #12]
  201bb8:	9801      	ldr	r0, [sp, #4]
  201bba:	4798      	blx	r3
  201bbc:	9b01      	ldr	r3, [sp, #4]
  201bbe:	2204      	movs	r2, #4
  201bc0:	701a      	strb	r2, [r3, #0]
  201bc2:	e028      	b.n	201c16 <icu_lld_serve_interrupt+0xd6>
  }
  else {
    if ((sr & STM32_TIM_SR_CC1IF) != 0)
  201bc4:	9b03      	ldr	r3, [sp, #12]
  201bc6:	f003 0302 	and.w	r3, r3, #2
  201bca:	2b00      	cmp	r3, #0
  201bcc:	d00d      	beq.n	201bea <icu_lld_serve_interrupt+0xaa>
      _icu_isr_invoke_width_cb(icup);
  201bce:	9b01      	ldr	r3, [sp, #4]
  201bd0:	781b      	ldrb	r3, [r3, #0]
  201bd2:	2b04      	cmp	r3, #4
  201bd4:	d109      	bne.n	201bea <icu_lld_serve_interrupt+0xaa>
  201bd6:	9b01      	ldr	r3, [sp, #4]
  201bd8:	685b      	ldr	r3, [r3, #4]
  201bda:	689b      	ldr	r3, [r3, #8]
  201bdc:	2b00      	cmp	r3, #0
  201bde:	d004      	beq.n	201bea <icu_lld_serve_interrupt+0xaa>
  201be0:	9b01      	ldr	r3, [sp, #4]
  201be2:	685b      	ldr	r3, [r3, #4]
  201be4:	689b      	ldr	r3, [r3, #8]
  201be6:	9801      	ldr	r0, [sp, #4]
  201be8:	4798      	blx	r3
    if ((sr & STM32_TIM_SR_CC2IF) != 0)
  201bea:	9b03      	ldr	r3, [sp, #12]
  201bec:	f003 0304 	and.w	r3, r3, #4
  201bf0:	2b00      	cmp	r3, #0
  201bf2:	d010      	beq.n	201c16 <icu_lld_serve_interrupt+0xd6>
      _icu_isr_invoke_period_cb(icup);
  201bf4:	9b01      	ldr	r3, [sp, #4]
  201bf6:	781b      	ldrb	r3, [r3, #0]
  201bf8:	2b04      	cmp	r3, #4
  201bfa:	d109      	bne.n	201c10 <icu_lld_serve_interrupt+0xd0>
  201bfc:	9b01      	ldr	r3, [sp, #4]
  201bfe:	685b      	ldr	r3, [r3, #4]
  201c00:	68db      	ldr	r3, [r3, #12]
  201c02:	2b00      	cmp	r3, #0
  201c04:	d004      	beq.n	201c10 <icu_lld_serve_interrupt+0xd0>
  201c06:	9b01      	ldr	r3, [sp, #4]
  201c08:	685b      	ldr	r3, [r3, #4]
  201c0a:	68db      	ldr	r3, [r3, #12]
  201c0c:	9801      	ldr	r0, [sp, #4]
  201c0e:	4798      	blx	r3
  201c10:	9b01      	ldr	r3, [sp, #4]
  201c12:	2204      	movs	r2, #4
  201c14:	701a      	strb	r2, [r3, #0]
  }
  if ((sr & STM32_TIM_SR_UIF) != 0)
  201c16:	9b03      	ldr	r3, [sp, #12]
  201c18:	f003 0301 	and.w	r3, r3, #1
  201c1c:	2b00      	cmp	r3, #0
  201c1e:	d007      	beq.n	201c30 <icu_lld_serve_interrupt+0xf0>
    _icu_isr_invoke_overflow_cb(icup);
  201c20:	9b01      	ldr	r3, [sp, #4]
  201c22:	685b      	ldr	r3, [r3, #4]
  201c24:	691b      	ldr	r3, [r3, #16]
  201c26:	9801      	ldr	r0, [sp, #4]
  201c28:	4798      	blx	r3
  201c2a:	9b01      	ldr	r3, [sp, #4]
  201c2c:	2203      	movs	r2, #3
  201c2e:	701a      	strb	r2, [r3, #0]
}
  201c30:	bf00      	nop
  201c32:	b005      	add	sp, #20
  201c34:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201c40 <pwm_lld_init>:
/**
 * @brief   Low level PWM driver initialization.
 *
 * @notapi
 */
void pwm_lld_init(void) {
  201c40:	b508      	push	{r3, lr}

#if STM32_PWM_USE_TIM1
  /* Driver initialization.*/
  pwmObjectInit(&PWMD1);
  201c42:	4807      	ldr	r0, [pc, #28]	; (201c60 <pwm_lld_init+0x20>)
  201c44:	f7ff f944 	bl	200ed0 <pwmObjectInit>
  PWMD1.channels = STM32_TIM1_CHANNELS;
  201c48:	4b05      	ldr	r3, [pc, #20]	; (201c60 <pwm_lld_init+0x20>)
  201c4a:	2206      	movs	r2, #6
  201c4c:	741a      	strb	r2, [r3, #16]
  PWMD1.tim = STM32_TIM1;
  201c4e:	4b04      	ldr	r3, [pc, #16]	; (201c60 <pwm_lld_init+0x20>)
  201c50:	4a04      	ldr	r2, [pc, #16]	; (201c64 <pwm_lld_init+0x24>)
  201c52:	61da      	str	r2, [r3, #28]
  PWMD1.has_bdtr = true;
  201c54:	4b02      	ldr	r3, [pc, #8]	; (201c60 <pwm_lld_init+0x20>)
  201c56:	2201      	movs	r2, #1
  201c58:	761a      	strb	r2, [r3, #24]
  pwmObjectInit(&PWMD22);
  PWMD22.channels = STM32_TIM22_CHANNELS;
  PWMD22.tim = STM32_TIM22;
  PWMD22.has_bdtr = false;
#endif
}
  201c5a:	bf00      	nop
  201c5c:	bd08      	pop	{r3, pc}
  201c5e:	bf00      	nop
  201c60:	20000818 	.word	0x20000818
  201c64:	40010000 	.word	0x40010000
	...

00201c70 <pwm_lld_serve_interrupt>:
 *
 * @param[in] pwmp      pointer to a @p PWMDriver object
 *
 * @notapi
 */
void pwm_lld_serve_interrupt(PWMDriver *pwmp) {
  201c70:	b500      	push	{lr}
  201c72:	b085      	sub	sp, #20
  201c74:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = pwmp->tim->SR;
  201c76:	9b01      	ldr	r3, [sp, #4]
  201c78:	69db      	ldr	r3, [r3, #28]
  201c7a:	691b      	ldr	r3, [r3, #16]
  201c7c:	9303      	str	r3, [sp, #12]
  sr &= pwmp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  201c7e:	9b01      	ldr	r3, [sp, #4]
  201c80:	69db      	ldr	r3, [r3, #28]
  201c82:	68db      	ldr	r3, [r3, #12]
  201c84:	b2db      	uxtb	r3, r3
  201c86:	9a03      	ldr	r2, [sp, #12]
  201c88:	4013      	ands	r3, r2
  201c8a:	9303      	str	r3, [sp, #12]
  pwmp->tim->SR = ~sr;
  201c8c:	9b01      	ldr	r3, [sp, #4]
  201c8e:	69db      	ldr	r3, [r3, #28]
  201c90:	9a03      	ldr	r2, [sp, #12]
  201c92:	43d2      	mvns	r2, r2
  201c94:	611a      	str	r2, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  201c96:	9b03      	ldr	r3, [sp, #12]
  201c98:	f003 0302 	and.w	r3, r3, #2
  201c9c:	2b00      	cmp	r3, #0
  201c9e:	d009      	beq.n	201cb4 <pwm_lld_serve_interrupt+0x44>
      (pwmp->config->channels[0].callback != NULL))
  201ca0:	9b01      	ldr	r3, [sp, #4]
  201ca2:	685b      	ldr	r3, [r3, #4]
  201ca4:	691b      	ldr	r3, [r3, #16]
  if (((sr & STM32_TIM_SR_CC1IF) != 0) &&
  201ca6:	2b00      	cmp	r3, #0
  201ca8:	d004      	beq.n	201cb4 <pwm_lld_serve_interrupt+0x44>
    pwmp->config->channels[0].callback(pwmp);
  201caa:	9b01      	ldr	r3, [sp, #4]
  201cac:	685b      	ldr	r3, [r3, #4]
  201cae:	691b      	ldr	r3, [r3, #16]
  201cb0:	9801      	ldr	r0, [sp, #4]
  201cb2:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  201cb4:	9b03      	ldr	r3, [sp, #12]
  201cb6:	f003 0304 	and.w	r3, r3, #4
  201cba:	2b00      	cmp	r3, #0
  201cbc:	d009      	beq.n	201cd2 <pwm_lld_serve_interrupt+0x62>
      (pwmp->config->channels[1].callback != NULL))
  201cbe:	9b01      	ldr	r3, [sp, #4]
  201cc0:	685b      	ldr	r3, [r3, #4]
  201cc2:	699b      	ldr	r3, [r3, #24]
  if (((sr & STM32_TIM_SR_CC2IF) != 0) &&
  201cc4:	2b00      	cmp	r3, #0
  201cc6:	d004      	beq.n	201cd2 <pwm_lld_serve_interrupt+0x62>
    pwmp->config->channels[1].callback(pwmp);
  201cc8:	9b01      	ldr	r3, [sp, #4]
  201cca:	685b      	ldr	r3, [r3, #4]
  201ccc:	699b      	ldr	r3, [r3, #24]
  201cce:	9801      	ldr	r0, [sp, #4]
  201cd0:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  201cd2:	9b03      	ldr	r3, [sp, #12]
  201cd4:	f003 0308 	and.w	r3, r3, #8
  201cd8:	2b00      	cmp	r3, #0
  201cda:	d009      	beq.n	201cf0 <pwm_lld_serve_interrupt+0x80>
      (pwmp->config->channels[2].callback != NULL))
  201cdc:	9b01      	ldr	r3, [sp, #4]
  201cde:	685b      	ldr	r3, [r3, #4]
  201ce0:	6a1b      	ldr	r3, [r3, #32]
  if (((sr & STM32_TIM_SR_CC3IF) != 0) &&
  201ce2:	2b00      	cmp	r3, #0
  201ce4:	d004      	beq.n	201cf0 <pwm_lld_serve_interrupt+0x80>
    pwmp->config->channels[2].callback(pwmp);
  201ce6:	9b01      	ldr	r3, [sp, #4]
  201ce8:	685b      	ldr	r3, [r3, #4]
  201cea:	6a1b      	ldr	r3, [r3, #32]
  201cec:	9801      	ldr	r0, [sp, #4]
  201cee:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  201cf0:	9b03      	ldr	r3, [sp, #12]
  201cf2:	f003 0310 	and.w	r3, r3, #16
  201cf6:	2b00      	cmp	r3, #0
  201cf8:	d009      	beq.n	201d0e <pwm_lld_serve_interrupt+0x9e>
      (pwmp->config->channels[3].callback != NULL))
  201cfa:	9b01      	ldr	r3, [sp, #4]
  201cfc:	685b      	ldr	r3, [r3, #4]
  201cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((sr & STM32_TIM_SR_CC4IF) != 0) &&
  201d00:	2b00      	cmp	r3, #0
  201d02:	d004      	beq.n	201d0e <pwm_lld_serve_interrupt+0x9e>
    pwmp->config->channels[3].callback(pwmp);
  201d04:	9b01      	ldr	r3, [sp, #4]
  201d06:	685b      	ldr	r3, [r3, #4]
  201d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  201d0a:	9801      	ldr	r0, [sp, #4]
  201d0c:	4798      	blx	r3
  if (((sr & STM32_TIM_SR_UIF) != 0) && (pwmp->config->callback != NULL))
  201d0e:	9b03      	ldr	r3, [sp, #12]
  201d10:	f003 0301 	and.w	r3, r3, #1
  201d14:	2b00      	cmp	r3, #0
  201d16:	d009      	beq.n	201d2c <pwm_lld_serve_interrupt+0xbc>
  201d18:	9b01      	ldr	r3, [sp, #4]
  201d1a:	685b      	ldr	r3, [r3, #4]
  201d1c:	689b      	ldr	r3, [r3, #8]
  201d1e:	2b00      	cmp	r3, #0
  201d20:	d004      	beq.n	201d2c <pwm_lld_serve_interrupt+0xbc>
    pwmp->config->callback(pwmp);
  201d22:	9b01      	ldr	r3, [sp, #4]
  201d24:	685b      	ldr	r3, [r3, #4]
  201d26:	689b      	ldr	r3, [r3, #8]
  201d28:	9801      	ldr	r0, [sp, #4]
  201d2a:	4798      	blx	r3
}
  201d2c:	bf00      	nop
  201d2e:	b005      	add	sp, #20
  201d30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201d40 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
  201d40:	b500      	push	{lr}
  201d42:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  201d44:	b672      	cpsid	i
}
  201d46:	bf00      	nop
  201d48:	2330      	movs	r3, #48	; 0x30
  201d4a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  201d4c:	9b01      	ldr	r3, [sp, #4]
  201d4e:	f383 8811 	msr	BASEPRI, r3
}
  201d52:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  201d54:	b662      	cpsie	i
}
  201d56:	bf00      	nop
}
  201d58:	bf00      	nop
}
  201d5a:	bf00      	nop
  __dbg_check_lock_from_isr();
  201d5c:	f000 fb40 	bl	2023e0 <__dbg_check_lock_from_isr>
}
  201d60:	bf00      	nop
  201d62:	b003      	add	sp, #12
  201d64:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201d70 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
  201d70:	b500      	push	{lr}
  201d72:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  201d74:	f000 fb5c 	bl	202430 <__dbg_check_unlock_from_isr>
  201d78:	2300      	movs	r3, #0
  201d7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  201d7c:	9b01      	ldr	r3, [sp, #4]
  201d7e:	f383 8811 	msr	BASEPRI, r3
}
  201d82:	bf00      	nop
}
  201d84:	bf00      	nop
}
  201d86:	bf00      	nop
}
  201d88:	bf00      	nop
  201d8a:	b003      	add	sp, #12
  201d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00201d90 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
  201d90:	b508      	push	{r3, lr}
  chSysLockFromISR();
  201d92:	f7ff ffd5 	bl	201d40 <chSysLockFromISR.lto_priv.1>
}
  201d96:	bf00      	nop
  201d98:	bd08      	pop	{r3, pc}
  201d9a:	bf00      	nop
  201d9c:	0000      	movs	r0, r0
	...

00201da0 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
  201da0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  201da2:	f7ff ffe5 	bl	201d70 <chSysUnlockFromISR.lto_priv.1>
}
  201da6:	bf00      	nop
  201da8:	bd08      	pop	{r3, pc}
  201daa:	bf00      	nop
  201dac:	0000      	movs	r0, r0
	...

00201db0 <osalEventBroadcastFlagsI.lto_priv.2>:
                                            eventflags_t flags) {
  201db0:	b500      	push	{lr}
  201db2:	b083      	sub	sp, #12
  201db4:	9001      	str	r0, [sp, #4]
  201db6:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
  201db8:	9900      	ldr	r1, [sp, #0]
  201dba:	9801      	ldr	r0, [sp, #4]
  201dbc:	f002 f910 	bl	203fe0 <chEvtBroadcastFlagsI>
}
  201dc0:	bf00      	nop
  201dc2:	b003      	add	sp, #12
  201dc4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201dd0 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  201dd0:	b500      	push	{lr}
  201dd2:	b085      	sub	sp, #20
  201dd4:	9001      	str	r0, [sp, #4]
  201dd6:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
  201dd8:	2300      	movs	r3, #0
  201dda:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
  201ddc:	9b00      	ldr	r3, [sp, #0]
  201dde:	f003 0308 	and.w	r3, r3, #8
  201de2:	2b00      	cmp	r3, #0
  201de4:	d003      	beq.n	201dee <set_error+0x1e>
    sts |= SD_OVERRUN_ERROR;
  201de6:	9b03      	ldr	r3, [sp, #12]
  201de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  201dec:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
  201dee:	9b00      	ldr	r3, [sp, #0]
  201df0:	f003 0301 	and.w	r3, r3, #1
  201df4:	2b00      	cmp	r3, #0
  201df6:	d003      	beq.n	201e00 <set_error+0x30>
    sts |= SD_PARITY_ERROR;
  201df8:	9b03      	ldr	r3, [sp, #12]
  201dfa:	f043 0320 	orr.w	r3, r3, #32
  201dfe:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
  201e00:	9b00      	ldr	r3, [sp, #0]
  201e02:	f003 0302 	and.w	r3, r3, #2
  201e06:	2b00      	cmp	r3, #0
  201e08:	d003      	beq.n	201e12 <set_error+0x42>
    sts |= SD_FRAMING_ERROR;
  201e0a:	9b03      	ldr	r3, [sp, #12]
  201e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  201e10:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
  201e12:	9b00      	ldr	r3, [sp, #0]
  201e14:	f003 0304 	and.w	r3, r3, #4
  201e18:	2b00      	cmp	r3, #0
  201e1a:	d003      	beq.n	201e24 <set_error+0x54>
    sts |= SD_NOISE_ERROR;
  201e1c:	9b03      	ldr	r3, [sp, #12]
  201e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  201e22:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
  201e24:	f7ff ffb4 	bl	201d90 <osalSysLockFromISR.lto_priv.1>
  chnAddFlagsI(sdp, sts);
  201e28:	9b01      	ldr	r3, [sp, #4]
  201e2a:	3304      	adds	r3, #4
  201e2c:	9903      	ldr	r1, [sp, #12]
  201e2e:	4618      	mov	r0, r3
  201e30:	f7ff ffbe 	bl	201db0 <osalEventBroadcastFlagsI.lto_priv.2>
  osalSysUnlockFromISR();
  201e34:	f7ff ffb4 	bl	201da0 <osalSysUnlockFromISR.lto_priv.1>
}
  201e38:	bf00      	nop
  201e3a:	b005      	add	sp, #20
  201e3c:	f85d fb04 	ldr.w	pc, [sp], #4

00201e40 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
  201e40:	b082      	sub	sp, #8
  201e42:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  201e44:	4b04      	ldr	r3, [pc, #16]	; (201e58 <notify1+0x18>)
  201e46:	681b      	ldr	r3, [r3, #0]
  201e48:	4a03      	ldr	r2, [pc, #12]	; (201e58 <notify1+0x18>)
  201e4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  201e4e:	6013      	str	r3, [r2, #0]
}
  201e50:	bf00      	nop
  201e52:	b002      	add	sp, #8
  201e54:	4770      	bx	lr
  201e56:	bf00      	nop
  201e58:	40011000 	.word	0x40011000
  201e5c:	00000000 	.word	0x00000000

00201e60 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
  201e60:	b500      	push	{lr}
  201e62:	b083      	sub	sp, #12

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  201e64:	480e      	ldr	r0, [pc, #56]	; (201ea0 <sd_lld_init+0x40>)
  201e66:	f7ff f95b 	bl	201120 <sdObjectInit>
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  201e6a:	4b0d      	ldr	r3, [pc, #52]	; (201ea0 <sd_lld_init+0x40>)
  201e6c:	9300      	str	r3, [sp, #0]
  201e6e:	2300      	movs	r3, #0
  201e70:	2210      	movs	r2, #16
  201e72:	490c      	ldr	r1, [pc, #48]	; (201ea4 <sd_lld_init+0x44>)
  201e74:	480c      	ldr	r0, [pc, #48]	; (201ea8 <sd_lld_init+0x48>)
  201e76:	f7fe fe0b 	bl	200a90 <iqObjectInit>
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  201e7a:	4b09      	ldr	r3, [pc, #36]	; (201ea0 <sd_lld_init+0x40>)
  201e7c:	9300      	str	r3, [sp, #0]
  201e7e:	4b0b      	ldr	r3, [pc, #44]	; (201eac <sd_lld_init+0x4c>)
  201e80:	2210      	movs	r2, #16
  201e82:	490b      	ldr	r1, [pc, #44]	; (201eb0 <sd_lld_init+0x50>)
  201e84:	480b      	ldr	r0, [pc, #44]	; (201eb4 <sd_lld_init+0x54>)
  201e86:	f7fe ff03 	bl	200c90 <oqObjectInit>
  SD1.usart = USART1;
  201e8a:	4b05      	ldr	r3, [pc, #20]	; (201ea0 <sd_lld_init+0x40>)
  201e8c:	4a0a      	ldr	r2, [pc, #40]	; (201eb8 <sd_lld_init+0x58>)
  201e8e:	655a      	str	r2, [r3, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
  201e90:	4b03      	ldr	r3, [pc, #12]	; (201ea0 <sd_lld_init+0x40>)
  201e92:	4a0a      	ldr	r2, [pc, #40]	; (201ebc <sd_lld_init+0x5c>)
  201e94:	659a      	str	r2, [r3, #88]	; 0x58
  LPSD1.clock = STM32_LPUART1CLK;
#if !defined(STM32_LPUART1_SUPPRESS_ISR) && defined(STM32_LPUART1_NUMBER)
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_SERIAL_LPUART1_PRIORITY);
#endif
#endif
}
  201e96:	bf00      	nop
  201e98:	b003      	add	sp, #12
  201e9a:	f85d fb04 	ldr.w	pc, [sp], #4
  201e9e:	bf00      	nop
  201ea0:	20000838 	.word	0x20000838
  201ea4:	20000898 	.word	0x20000898
  201ea8:	20000844 	.word	0x20000844
  201eac:	00201e41 	.word	0x00201e41
  201eb0:	200008a8 	.word	0x200008a8
  201eb4:	20000868 	.word	0x20000868
  201eb8:	40011000 	.word	0x40011000
  201ebc:	066ff300 	.word	0x066ff300

00201ec0 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  201ec0:	b500      	push	{lr}
  201ec2:	b087      	sub	sp, #28
  201ec4:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
  201ec6:	9b01      	ldr	r3, [sp, #4]
  201ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  201eca:	9303      	str	r3, [sp, #12]
  uint32_t cr1;
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
  201ecc:	9b03      	ldr	r3, [sp, #12]
  201ece:	69db      	ldr	r3, [r3, #28]
  201ed0:	9304      	str	r3, [sp, #16]
  u->ICR = isr;
  201ed2:	9b03      	ldr	r3, [sp, #12]
  201ed4:	9a04      	ldr	r2, [sp, #16]
  201ed6:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  201ed8:	9b04      	ldr	r3, [sp, #16]
  201eda:	f003 030f 	and.w	r3, r3, #15
  201ede:	2b00      	cmp	r3, #0
  201ee0:	d003      	beq.n	201eea <sd_lld_serve_interrupt+0x2a>
    set_error(sdp, isr);
  201ee2:	9904      	ldr	r1, [sp, #16]
  201ee4:	9801      	ldr	r0, [sp, #4]
  201ee6:	f7ff ff73 	bl	201dd0 <set_error>

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
  201eea:	9b04      	ldr	r3, [sp, #16]
  201eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  201ef0:	2b00      	cmp	r3, #0
  201ef2:	d01e      	beq.n	201f32 <sd_lld_serve_interrupt+0x72>
    osalSysLockFromISR();
  201ef4:	f7ff ff4c 	bl	201d90 <osalSysLockFromISR.lto_priv.1>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
  201ef8:	9b01      	ldr	r3, [sp, #4]
  201efa:	3304      	adds	r3, #4
  201efc:	f44f 6180 	mov.w	r1, #1024	; 0x400
  201f00:	4618      	mov	r0, r3
  201f02:	f7ff ff55 	bl	201db0 <osalEventBroadcastFlagsI.lto_priv.2>
    osalSysUnlockFromISR();
  201f06:	f7ff ff4b 	bl	201da0 <osalSysUnlockFromISR.lto_priv.1>
  /* Data available, note it is a while in order to handle two situations:
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
  201f0a:	e012      	b.n	201f32 <sd_lld_serve_interrupt+0x72>
    osalSysLockFromISR();
  201f0c:	f7ff ff40 	bl	201d90 <osalSysLockFromISR.lto_priv.1>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  201f10:	9b03      	ldr	r3, [sp, #12]
  201f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201f14:	b2da      	uxtb	r2, r3
  201f16:	9b01      	ldr	r3, [sp, #4]
  201f18:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  201f1c:	4013      	ands	r3, r2
  201f1e:	b2db      	uxtb	r3, r3
  201f20:	4619      	mov	r1, r3
  201f22:	9801      	ldr	r0, [sp, #4]
  201f24:	f7ff f914 	bl	201150 <sdIncomingDataI>
    osalSysUnlockFromISR();
  201f28:	f7ff ff3a 	bl	201da0 <osalSysUnlockFromISR.lto_priv.1>

    isr = u->ISR;
  201f2c:	9b03      	ldr	r3, [sp, #12]
  201f2e:	69db      	ldr	r3, [r3, #28]
  201f30:	9304      	str	r3, [sp, #16]
  while (isr & USART_ISR_RXNE) {
  201f32:	9b04      	ldr	r3, [sp, #16]
  201f34:	f003 0320 	and.w	r3, r3, #32
  201f38:	2b00      	cmp	r3, #0
  201f3a:	d1e7      	bne.n	201f0c <sd_lld_serve_interrupt+0x4c>
  }

  /* Caching CR1.*/
  cr1 = u->CR1;
  201f3c:	9b03      	ldr	r3, [sp, #12]
  201f3e:	681b      	ldr	r3, [r3, #0]
  201f40:	9305      	str	r3, [sp, #20]
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
  201f42:	9b05      	ldr	r3, [sp, #20]
  201f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
  201f48:	2b00      	cmp	r3, #0
  201f4a:	d025      	beq.n	201f98 <sd_lld_serve_interrupt+0xd8>
    while (isr & USART_ISR_TXE) {
  201f4c:	e01f      	b.n	201f8e <sd_lld_serve_interrupt+0xce>
      msg_t b;

      osalSysLockFromISR();
  201f4e:	f7ff ff1f 	bl	201d90 <osalSysLockFromISR.lto_priv.1>
      b = oqGetI(&sdp->oqueue);
  201f52:	9b01      	ldr	r3, [sp, #4]
  201f54:	3330      	adds	r3, #48	; 0x30
  201f56:	4618      	mov	r0, r3
  201f58:	f7fe ff0a 	bl	200d70 <oqGetI>
  201f5c:	9002      	str	r0, [sp, #8]
      if (b < MSG_OK) {
  201f5e:	9b02      	ldr	r3, [sp, #8]
  201f60:	2b00      	cmp	r3, #0
  201f62:	da0c      	bge.n	201f7e <sd_lld_serve_interrupt+0xbe>
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  201f64:	9b01      	ldr	r3, [sp, #4]
  201f66:	3304      	adds	r3, #4
  201f68:	2108      	movs	r1, #8
  201f6a:	4618      	mov	r0, r3
  201f6c:	f7ff ff20 	bl	201db0 <osalEventBroadcastFlagsI.lto_priv.2>
        cr1 &= ~USART_CR1_TXEIE;
  201f70:	9b05      	ldr	r3, [sp, #20]
  201f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  201f76:	9305      	str	r3, [sp, #20]
        osalSysUnlockFromISR();
  201f78:	f7ff ff12 	bl	201da0 <osalSysUnlockFromISR.lto_priv.1>
        break;
  201f7c:	e00c      	b.n	201f98 <sd_lld_serve_interrupt+0xd8>
      }
      u->TDR = b;
  201f7e:	9a02      	ldr	r2, [sp, #8]
  201f80:	9b03      	ldr	r3, [sp, #12]
  201f82:	629a      	str	r2, [r3, #40]	; 0x28
      osalSysUnlockFromISR();
  201f84:	f7ff ff0c 	bl	201da0 <osalSysUnlockFromISR.lto_priv.1>

      isr = u->ISR;
  201f88:	9b03      	ldr	r3, [sp, #12]
  201f8a:	69db      	ldr	r3, [r3, #28]
  201f8c:	9304      	str	r3, [sp, #16]
    while (isr & USART_ISR_TXE) {
  201f8e:	9b04      	ldr	r3, [sp, #16]
  201f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
  201f94:	2b00      	cmp	r3, #0
  201f96:	d1da      	bne.n	201f4e <sd_lld_serve_interrupt+0x8e>
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
  201f98:	9b05      	ldr	r3, [sp, #20]
  201f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  201f9e:	2b00      	cmp	r3, #0
  201fa0:	d024      	beq.n	201fec <sd_lld_serve_interrupt+0x12c>
  201fa2:	9b04      	ldr	r3, [sp, #16]
  201fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  201fa8:	2b00      	cmp	r3, #0
  201faa:	d01f      	beq.n	201fec <sd_lld_serve_interrupt+0x12c>
    osalSysLockFromISR();
  201fac:	f7ff fef0 	bl	201d90 <osalSysLockFromISR.lto_priv.1>
    if (oqIsEmptyI(&sdp->oqueue)) {
  201fb0:	9b01      	ldr	r3, [sp, #4]
  201fb2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  201fb4:	9b01      	ldr	r3, [sp, #4]
  201fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  201fb8:	429a      	cmp	r2, r3
  201fba:	d105      	bne.n	201fc8 <sd_lld_serve_interrupt+0x108>
  201fbc:	9b01      	ldr	r3, [sp, #4]
  201fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  201fc0:	2b00      	cmp	r3, #0
  201fc2:	d001      	beq.n	201fc8 <sd_lld_serve_interrupt+0x108>
  201fc4:	2301      	movs	r3, #1
  201fc6:	e000      	b.n	201fca <sd_lld_serve_interrupt+0x10a>
  201fc8:	2300      	movs	r3, #0
  201fca:	f003 0301 	and.w	r3, r3, #1
  201fce:	b2db      	uxtb	r3, r3
  201fd0:	2b00      	cmp	r3, #0
  201fd2:	d009      	beq.n	201fe8 <sd_lld_serve_interrupt+0x128>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
  201fd4:	9b01      	ldr	r3, [sp, #4]
  201fd6:	3304      	adds	r3, #4
  201fd8:	2110      	movs	r1, #16
  201fda:	4618      	mov	r0, r3
  201fdc:	f7ff fee8 	bl	201db0 <osalEventBroadcastFlagsI.lto_priv.2>
      cr1 &= ~USART_CR1_TCIE;
  201fe0:	9b05      	ldr	r3, [sp, #20]
  201fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  201fe6:	9305      	str	r3, [sp, #20]
    }
    osalSysUnlockFromISR();
  201fe8:	f7ff feda 	bl	201da0 <osalSysUnlockFromISR.lto_priv.1>
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
  201fec:	9b03      	ldr	r3, [sp, #12]
  201fee:	9a05      	ldr	r2, [sp, #20]
  201ff0:	601a      	str	r2, [r3, #0]
}
  201ff2:	bf00      	nop
  201ff4:	b007      	add	sp, #28
  201ff6:	f85d fb04 	ldr.w	pc, [sp], #4
  201ffa:	bf00      	nop
  201ffc:	0000      	movs	r0, r0
	...

00202000 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
  202000:	b082      	sub	sp, #8
  202002:	9001      	str	r0, [sp, #4]
  202004:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
  202006:	9b00      	ldr	r3, [sp, #0]
  202008:	685a      	ldr	r2, [r3, #4]
  20200a:	9b01      	ldr	r3, [sp, #4]
  20200c:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
  20200e:	9b00      	ldr	r3, [sp, #0]
  202010:	689a      	ldr	r2, [r3, #8]
  202012:	9b01      	ldr	r3, [sp, #4]
  202014:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
  202016:	9b00      	ldr	r3, [sp, #0]
  202018:	68da      	ldr	r2, [r3, #12]
  20201a:	9b01      	ldr	r3, [sp, #4]
  20201c:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
  20201e:	9b00      	ldr	r3, [sp, #0]
  202020:	691a      	ldr	r2, [r3, #16]
  202022:	9b01      	ldr	r3, [sp, #4]
  202024:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
  202026:	9b00      	ldr	r3, [sp, #0]
  202028:	695a      	ldr	r2, [r3, #20]
  20202a:	9b01      	ldr	r3, [sp, #4]
  20202c:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
  20202e:	9b00      	ldr	r3, [sp, #0]
  202030:	699a      	ldr	r2, [r3, #24]
  202032:	9b01      	ldr	r3, [sp, #4]
  202034:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  202036:	9b00      	ldr	r3, [sp, #0]
  202038:	681a      	ldr	r2, [r3, #0]
  20203a:	9b01      	ldr	r3, [sp, #4]
  20203c:	601a      	str	r2, [r3, #0]
}
  20203e:	bf00      	nop
  202040:	b002      	add	sp, #8
  202042:	4770      	bx	lr
	...

00202050 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
  202050:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
  202052:	4b26      	ldr	r3, [pc, #152]	; (2020ec <stm32_gpio_init+0x9c>)
  202054:	691a      	ldr	r2, [r3, #16]
  202056:	4925      	ldr	r1, [pc, #148]	; (2020ec <stm32_gpio_init+0x9c>)
  202058:	f240 73ff 	movw	r3, #2047	; 0x7ff
  20205c:	4313      	orrs	r3, r2
  20205e:	610b      	str	r3, [r1, #16]
  202060:	4b22      	ldr	r3, [pc, #136]	; (2020ec <stm32_gpio_init+0x9c>)
  202062:	691a      	ldr	r2, [r3, #16]
  202064:	4921      	ldr	r1, [pc, #132]	; (2020ec <stm32_gpio_init+0x9c>)
  202066:	4b22      	ldr	r3, [pc, #136]	; (2020f0 <stm32_gpio_init+0xa0>)
  202068:	4013      	ands	r3, r2
  20206a:	610b      	str	r3, [r1, #16]
  20206c:	4b1f      	ldr	r3, [pc, #124]	; (2020ec <stm32_gpio_init+0x9c>)
  20206e:	691b      	ldr	r3, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  202070:	4b1e      	ldr	r3, [pc, #120]	; (2020ec <stm32_gpio_init+0x9c>)
  202072:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  202074:	491d      	ldr	r1, [pc, #116]	; (2020ec <stm32_gpio_init+0x9c>)
  202076:	f240 73ff 	movw	r3, #2047	; 0x7ff
  20207a:	4313      	orrs	r3, r2
  20207c:	630b      	str	r3, [r1, #48]	; 0x30
  20207e:	4b1b      	ldr	r3, [pc, #108]	; (2020ec <stm32_gpio_init+0x9c>)
  202080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  202082:	491a      	ldr	r1, [pc, #104]	; (2020ec <stm32_gpio_init+0x9c>)
  202084:	f240 73ff 	movw	r3, #2047	; 0x7ff
  202088:	4313      	orrs	r3, r2
  20208a:	650b      	str	r3, [r1, #80]	; 0x50
  20208c:	4b17      	ldr	r3, [pc, #92]	; (2020ec <stm32_gpio_init+0x9c>)
  20208e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
  202090:	4918      	ldr	r1, [pc, #96]	; (2020f4 <stm32_gpio_init+0xa4>)
  202092:	4819      	ldr	r0, [pc, #100]	; (2020f8 <stm32_gpio_init+0xa8>)
  202094:	f7ff ffb4 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
  202098:	4918      	ldr	r1, [pc, #96]	; (2020fc <stm32_gpio_init+0xac>)
  20209a:	4819      	ldr	r0, [pc, #100]	; (202100 <stm32_gpio_init+0xb0>)
  20209c:	f7ff ffb0 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
  2020a0:	4918      	ldr	r1, [pc, #96]	; (202104 <stm32_gpio_init+0xb4>)
  2020a2:	4819      	ldr	r0, [pc, #100]	; (202108 <stm32_gpio_init+0xb8>)
  2020a4:	f7ff ffac 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
  2020a8:	4918      	ldr	r1, [pc, #96]	; (20210c <stm32_gpio_init+0xbc>)
  2020aa:	4819      	ldr	r0, [pc, #100]	; (202110 <stm32_gpio_init+0xc0>)
  2020ac:	f7ff ffa8 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
  2020b0:	4918      	ldr	r1, [pc, #96]	; (202114 <stm32_gpio_init+0xc4>)
  2020b2:	4819      	ldr	r0, [pc, #100]	; (202118 <stm32_gpio_init+0xc8>)
  2020b4:	f7ff ffa4 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
  2020b8:	4918      	ldr	r1, [pc, #96]	; (20211c <stm32_gpio_init+0xcc>)
  2020ba:	4819      	ldr	r0, [pc, #100]	; (202120 <stm32_gpio_init+0xd0>)
  2020bc:	f7ff ffa0 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
  2020c0:	4918      	ldr	r1, [pc, #96]	; (202124 <stm32_gpio_init+0xd4>)
  2020c2:	4819      	ldr	r0, [pc, #100]	; (202128 <stm32_gpio_init+0xd8>)
  2020c4:	f7ff ff9c 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
  2020c8:	4918      	ldr	r1, [pc, #96]	; (20212c <stm32_gpio_init+0xdc>)
  2020ca:	4819      	ldr	r0, [pc, #100]	; (202130 <stm32_gpio_init+0xe0>)
  2020cc:	f7ff ff98 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
  2020d0:	4918      	ldr	r1, [pc, #96]	; (202134 <stm32_gpio_init+0xe4>)
  2020d2:	4819      	ldr	r0, [pc, #100]	; (202138 <stm32_gpio_init+0xe8>)
  2020d4:	f7ff ff94 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOJ
  gpio_init(GPIOJ, &gpio_default_config.PJData);
  2020d8:	4918      	ldr	r1, [pc, #96]	; (20213c <stm32_gpio_init+0xec>)
  2020da:	4819      	ldr	r0, [pc, #100]	; (202140 <stm32_gpio_init+0xf0>)
  2020dc:	f7ff ff90 	bl	202000 <gpio_init>
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
  2020e0:	4918      	ldr	r1, [pc, #96]	; (202144 <stm32_gpio_init+0xf4>)
  2020e2:	4819      	ldr	r0, [pc, #100]	; (202148 <stm32_gpio_init+0xf8>)
  2020e4:	f7ff ff8c 	bl	202000 <gpio_init>
#endif
}
  2020e8:	bf00      	nop
  2020ea:	bd08      	pop	{r3, pc}
  2020ec:	40023800 	.word	0x40023800
  2020f0:	fffff800 	.word	0xfffff800
  2020f4:	08004758 	.word	0x08004758
  2020f8:	40020000 	.word	0x40020000
  2020fc:	08004774 	.word	0x08004774
  202100:	40020400 	.word	0x40020400
  202104:	08004790 	.word	0x08004790
  202108:	40020800 	.word	0x40020800
  20210c:	080047ac 	.word	0x080047ac
  202110:	40020c00 	.word	0x40020c00
  202114:	080047c8 	.word	0x080047c8
  202118:	40021000 	.word	0x40021000
  20211c:	080047e4 	.word	0x080047e4
  202120:	40021400 	.word	0x40021400
  202124:	08004800 	.word	0x08004800
  202128:	40021800 	.word	0x40021800
  20212c:	0800481c 	.word	0x0800481c
  202130:	40021c00 	.word	0x40021c00
  202134:	08004838 	.word	0x08004838
  202138:	40022000 	.word	0x40022000
  20213c:	08004854 	.word	0x08004854
  202140:	40022400 	.word	0x40022400
  202144:	08004870 	.word	0x08004870
  202148:	40022800 	.word	0x40022800
  20214c:	00000000 	.word	0x00000000

00202150 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
  202150:	b508      	push	{r3, lr}

  stm32_gpio_init();
  202152:	f7ff ff7d 	bl	202050 <stm32_gpio_init>
  stm32_clock_init();
  202156:	f7ff fad3 	bl	201700 <stm32_clock_init>
}
  20215a:	bf00      	nop
  20215c:	bd08      	pop	{r3, pc}
  20215e:	bf00      	nop

00202160 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
  202160:	bf00      	nop
  202162:	4770      	bx	lr
	...

00202170 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to a @p tm_calibration_t object
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
  202170:	b500      	push	{lr}
  202172:	b08b      	sub	sp, #44	; 0x2c
  202174:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
  202176:	9b01      	ldr	r3, [sp, #4]
  202178:	2200      	movs	r2, #0
  20217a:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
  20217c:	ab02      	add	r3, sp, #8
  20217e:	4618      	mov	r0, r3
  202180:	f001 fe5e 	bl	203e40 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
  202184:	2304      	movs	r3, #4
  202186:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    chTMStartMeasurementX(&tm);
  202188:	ab02      	add	r3, sp, #8
  20218a:	4618      	mov	r0, r3
  20218c:	f001 fe78 	bl	203e80 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
  202190:	ab02      	add	r3, sp, #8
  202192:	4618      	mov	r0, r3
  202194:	f001 fe84 	bl	203ea0 <chTMStopMeasurementX>
    i--;
  202198:	9b09      	ldr	r3, [sp, #36]	; 0x24
  20219a:	3b01      	subs	r3, #1
  20219c:	9309      	str	r3, [sp, #36]	; 0x24
  } while (i > 0U);
  20219e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2021a0:	2b00      	cmp	r3, #0
  2021a2:	d1f1      	bne.n	202188 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
  2021a4:	9a02      	ldr	r2, [sp, #8]
  2021a6:	9b01      	ldr	r3, [sp, #4]
  2021a8:	601a      	str	r2, [r3, #0]
}
  2021aa:	bf00      	nop
  2021ac:	b00b      	add	sp, #44	; 0x2c
  2021ae:	f85d fb04 	ldr.w	pc, [sp], #4
  2021b2:	bf00      	nop
	...

002021c0 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
  2021c0:	b500      	push	{lr}
  2021c2:	b083      	sub	sp, #12
  __dbg_check_unlock();
  2021c4:	f000 f8e4 	bl	202390 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  2021c8:	4b12      	ldr	r3, [pc, #72]	; (202214 <chSysUnlock.lto_priv.6+0x54>)
  2021ca:	681b      	ldr	r3, [r3, #0]
  2021cc:	4a11      	ldr	r2, [pc, #68]	; (202214 <chSysUnlock.lto_priv.6+0x54>)
  2021ce:	4293      	cmp	r3, r2
  2021d0:	bf14      	ite	ne
  2021d2:	2301      	movne	r3, #1
  2021d4:	2300      	moveq	r3, #0
  2021d6:	b2db      	uxtb	r3, r3
  2021d8:	2b00      	cmp	r3, #0
  2021da:	d00f      	beq.n	2021fc <chSysUnlock.lto_priv.6+0x3c>
  2021dc:	4b0d      	ldr	r3, [pc, #52]	; (202214 <chSysUnlock.lto_priv.6+0x54>)
  2021de:	68db      	ldr	r3, [r3, #12]
  2021e0:	689a      	ldr	r2, [r3, #8]
  2021e2:	4b0c      	ldr	r3, [pc, #48]	; (202214 <chSysUnlock.lto_priv.6+0x54>)
  2021e4:	681b      	ldr	r3, [r3, #0]
  2021e6:	689b      	ldr	r3, [r3, #8]
  2021e8:	429a      	cmp	r2, r3
  2021ea:	bf34      	ite	cc
  2021ec:	2301      	movcc	r3, #1
  2021ee:	2300      	movcs	r3, #0
  2021f0:	b2db      	uxtb	r3, r3
  2021f2:	2b00      	cmp	r3, #0
  2021f4:	d002      	beq.n	2021fc <chSysUnlock.lto_priv.6+0x3c>
  2021f6:	4808      	ldr	r0, [pc, #32]	; (202218 <chSysUnlock.lto_priv.6+0x58>)
  2021f8:	f000 f852 	bl	2022a0 <chSysHalt>
  2021fc:	2300      	movs	r3, #0
  2021fe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202200:	9b01      	ldr	r3, [sp, #4]
  202202:	f383 8811 	msr	BASEPRI, r3
}
  202206:	bf00      	nop
}
  202208:	bf00      	nop
}
  20220a:	bf00      	nop
  20220c:	b003      	add	sp, #12
  20220e:	f85d fb04 	ldr.w	pc, [sp], #4
  202212:	bf00      	nop
  202214:	200008c8 	.word	0x200008c8
  202218:	080048a4 	.word	0x080048a4
  20221c:	00000000 	.word	0x00000000

00202220 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
  202220:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
  202222:	f001 ff65 	bl	2040f0 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
  202226:	f001 ffeb 	bl	204200 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
  20222a:	f002 f889 	bl	204340 <__factory_init>
#endif
}
  20222e:	bf00      	nop
  202230:	bd08      	pop	{r3, pc}
  202232:	bf00      	nop
	...

00202240 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
  202240:	b500      	push	{lr}
  202242:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
  202244:	4b11      	ldr	r3, [pc, #68]	; (20228c <chSysInit+0x4c>)
  202246:	2201      	movs	r2, #1
  202248:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
  20224a:	2300      	movs	r3, #0
  20224c:	9301      	str	r3, [sp, #4]
  20224e:	e008      	b.n	202262 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
  202250:	4a0e      	ldr	r2, [pc, #56]	; (20228c <chSysInit+0x4c>)
  202252:	9b01      	ldr	r3, [sp, #4]
  202254:	009b      	lsls	r3, r3, #2
  202256:	4413      	add	r3, r2
  202258:	2200      	movs	r2, #0
  20225a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
  20225c:	9b01      	ldr	r3, [sp, #4]
  20225e:	3301      	adds	r3, #1
  202260:	9301      	str	r3, [sp, #4]
  202262:	9b01      	ldr	r3, [sp, #4]
  202264:	2b00      	cmp	r3, #0
  202266:	d0f3      	beq.n	202250 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
  202268:	4809      	ldr	r0, [pc, #36]	; (202290 <chSysInit+0x50>)
  20226a:	f7ff ff81 	bl	202170 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
  20226e:	f7ff ffd7 	bl	202220 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
  202272:	4908      	ldr	r1, [pc, #32]	; (202294 <chSysInit+0x54>)
  202274:	4808      	ldr	r0, [pc, #32]	; (202298 <chSysInit+0x58>)
  202276:	f001 fa1b 	bl	2036b0 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
  20227a:	4b04      	ldr	r3, [pc, #16]	; (20228c <chSysInit+0x4c>)
  20227c:	2202      	movs	r2, #2
  20227e:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
  202280:	f7ff ff9e 	bl	2021c0 <chSysUnlock.lto_priv.6>
}
  202284:	bf00      	nop
  202286:	b003      	add	sp, #12
  202288:	f85d fb04 	ldr.w	pc, [sp], #4
  20228c:	200008b8 	.word	0x200008b8
  202290:	200008c0 	.word	0x200008c0
  202294:	08004890 	.word	0x08004890
  202298:	200008c8 	.word	0x200008c8
  20229c:	00000000 	.word	0x00000000

002022a0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
  2022a0:	b500      	push	{lr}
  2022a2:	b083      	sub	sp, #12
  2022a4:	9001      	str	r0, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  2022a6:	b672      	cpsid	i
}
  2022a8:	bf00      	nop
 *          the priority mask to level 0.
 */
__STATIC_FORCEINLINE void port_disable(void) {

  __disable_irq();
}
  2022aa:	bf00      	nop

  port_disable();

  /* Logging the event.*/
  __trace_halt(reason);
  2022ac:	9801      	ldr	r0, [sp, #4]
  2022ae:	f000 fb07 	bl	2028c0 <__trace_halt>

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
  2022b2:	4a04      	ldr	r2, [pc, #16]	; (2022c4 <chSysHalt+0x24>)
  2022b4:	9b01      	ldr	r3, [sp, #4]
  2022b6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
  2022ba:	4b03      	ldr	r3, [pc, #12]	; (2022c8 <chSysHalt+0x28>)
  2022bc:	2203      	movs	r2, #3
  2022be:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
  2022c0:	e7fe      	b.n	2022c0 <chSysHalt+0x20>
  2022c2:	bf00      	nop
  2022c4:	200008c8 	.word	0x200008c8
  2022c8:	200008b8 	.word	0x200008b8
  2022cc:	00000000 	.word	0x00000000

002022d0 <chSysGetIdleThreadX>:
 *
 * @return              Pointer to the idle thread.
 *
 * @xclass
 */
thread_t *chSysGetIdleThreadX(void) {
  2022d0:	b500      	push	{lr}
  2022d2:	b083      	sub	sp, #12
  thread_t *tp = threadref(currcore->rlist.pqueue.prev);
  2022d4:	4b0a      	ldr	r3, [pc, #40]	; (202300 <chSysGetIdleThreadX+0x30>)
  2022d6:	685b      	ldr	r3, [r3, #4]
  2022d8:	9301      	str	r3, [sp, #4]

  chDbgAssert(tp->hdr.pqueue.prio == IDLEPRIO, "not idle thread");
  2022da:	9b01      	ldr	r3, [sp, #4]
  2022dc:	689b      	ldr	r3, [r3, #8]
  2022de:	2b01      	cmp	r3, #1
  2022e0:	bf14      	ite	ne
  2022e2:	2301      	movne	r3, #1
  2022e4:	2300      	moveq	r3, #0
  2022e6:	b2db      	uxtb	r3, r3
  2022e8:	2b00      	cmp	r3, #0
  2022ea:	d002      	beq.n	2022f2 <chSysGetIdleThreadX+0x22>
  2022ec:	4805      	ldr	r0, [pc, #20]	; (202304 <chSysGetIdleThreadX+0x34>)
  2022ee:	f7ff ffd7 	bl	2022a0 <chSysHalt>

  return tp;
  2022f2:	9b01      	ldr	r3, [sp, #4]
  2022f4:	bf00      	nop
  2022f6:	bf00      	nop
}
  2022f8:	4618      	mov	r0, r3
  2022fa:	b003      	add	sp, #12
  2022fc:	f85d fb04 	ldr.w	pc, [sp], #4
  202300:	200008c8 	.word	0x200008c8
  202304:	080048b0 	.word	0x080048b0
	...

00202310 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
  202310:	b508      	push	{r3, lr}
#if (CH_CFG_TIME_QUANTUM > 0) || (CH_DBG_THREADS_PROFILING == TRUE)
  thread_t *currtp = chThdGetSelfX();
#endif

  chDbgCheckClassI();
  202312:	f000 f935 	bl	202580 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
  202316:	f000 fdf3 	bl	202f00 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
  20231a:	bf00      	nop
  20231c:	bd08      	pop	{r3, pc}
  20231e:	bf00      	nop

00202320 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
  202320:	b082      	sub	sp, #8
  202322:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
  202324:	4b04      	ldr	r3, [pc, #16]	; (202338 <chRFCUCollectFaultsI+0x18>)
  202326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  202328:	9b01      	ldr	r3, [sp, #4]
  20232a:	4313      	orrs	r3, r2
  20232c:	4a02      	ldr	r2, [pc, #8]	; (202338 <chRFCUCollectFaultsI+0x18>)
  20232e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
  202330:	bf00      	nop
  202332:	b002      	add	sp, #8
  202334:	4770      	bx	lr
  202336:	bf00      	nop
  202338:	200008c8 	.word	0x200008c8
  20233c:	00000000 	.word	0x00000000

00202340 <__dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void __dbg_check_lock(void) {
  202340:	b500      	push	{lr}
  202342:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  202344:	4b10      	ldr	r3, [pc, #64]	; (202388 <__dbg_check_lock+0x48>)
  202346:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
  202348:	9b01      	ldr	r3, [sp, #4]
  20234a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20234e:	2b00      	cmp	r3, #0
  202350:	bf14      	ite	ne
  202352:	2301      	movne	r3, #1
  202354:	2300      	moveq	r3, #0
  202356:	b2db      	uxtb	r3, r3
  202358:	2b00      	cmp	r3, #0
  20235a:	d109      	bne.n	202370 <__dbg_check_lock+0x30>
  20235c:	9b01      	ldr	r3, [sp, #4]
  20235e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  202362:	2b00      	cmp	r3, #0
  202364:	bf14      	ite	ne
  202366:	2301      	movne	r3, #1
  202368:	2300      	moveq	r3, #0
  20236a:	b2db      	uxtb	r3, r3
  20236c:	2b00      	cmp	r3, #0
  20236e:	d002      	beq.n	202376 <__dbg_check_lock+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#4");
  202370:	4806      	ldr	r0, [pc, #24]	; (20238c <__dbg_check_lock+0x4c>)
  202372:	f7ff ff95 	bl	2022a0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
  202376:	9b01      	ldr	r3, [sp, #4]
  202378:	2201      	movs	r2, #1
  20237a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  20237e:	bf00      	nop
  202380:	b003      	add	sp, #12
  202382:	f85d fb04 	ldr.w	pc, [sp], #4
  202386:	bf00      	nop
  202388:	200008c8 	.word	0x200008c8
  20238c:	080048c4 	.word	0x080048c4

00202390 <__dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void __dbg_check_unlock(void) {
  202390:	b500      	push	{lr}
  202392:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  202394:	4b10      	ldr	r3, [pc, #64]	; (2023d8 <__dbg_check_unlock+0x48>)
  202396:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
  202398:	9b01      	ldr	r3, [sp, #4]
  20239a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20239e:	2b00      	cmp	r3, #0
  2023a0:	bf14      	ite	ne
  2023a2:	2301      	movne	r3, #1
  2023a4:	2300      	moveq	r3, #0
  2023a6:	b2db      	uxtb	r3, r3
  2023a8:	2b00      	cmp	r3, #0
  2023aa:	d109      	bne.n	2023c0 <__dbg_check_unlock+0x30>
  2023ac:	9b01      	ldr	r3, [sp, #4]
  2023ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  2023b2:	2b00      	cmp	r3, #0
  2023b4:	bfd4      	ite	le
  2023b6:	2301      	movle	r3, #1
  2023b8:	2300      	movgt	r3, #0
  2023ba:	b2db      	uxtb	r3, r3
  2023bc:	2b00      	cmp	r3, #0
  2023be:	d002      	beq.n	2023c6 <__dbg_check_unlock+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#5");
  2023c0:	4806      	ldr	r0, [pc, #24]	; (2023dc <__dbg_check_unlock+0x4c>)
  2023c2:	f7ff ff6d 	bl	2022a0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
  2023c6:	9b01      	ldr	r3, [sp, #4]
  2023c8:	2200      	movs	r2, #0
  2023ca:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  2023ce:	bf00      	nop
  2023d0:	b003      	add	sp, #12
  2023d2:	f85d fb04 	ldr.w	pc, [sp], #4
  2023d6:	bf00      	nop
  2023d8:	200008c8 	.word	0x200008c8
  2023dc:	080048cc 	.word	0x080048cc

002023e0 <__dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  2023e0:	b500      	push	{lr}
  2023e2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  2023e4:	4b10      	ldr	r3, [pc, #64]	; (202428 <__dbg_check_lock_from_isr+0x48>)
  2023e6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
  2023e8:	9b01      	ldr	r3, [sp, #4]
  2023ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2023ee:	2b00      	cmp	r3, #0
  2023f0:	bfd4      	ite	le
  2023f2:	2301      	movle	r3, #1
  2023f4:	2300      	movgt	r3, #0
  2023f6:	b2db      	uxtb	r3, r3
  2023f8:	2b00      	cmp	r3, #0
  2023fa:	d109      	bne.n	202410 <__dbg_check_lock_from_isr+0x30>
  2023fc:	9b01      	ldr	r3, [sp, #4]
  2023fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  202402:	2b00      	cmp	r3, #0
  202404:	bf14      	ite	ne
  202406:	2301      	movne	r3, #1
  202408:	2300      	moveq	r3, #0
  20240a:	b2db      	uxtb	r3, r3
  20240c:	2b00      	cmp	r3, #0
  20240e:	d002      	beq.n	202416 <__dbg_check_lock_from_isr+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  202410:	4806      	ldr	r0, [pc, #24]	; (20242c <__dbg_check_lock_from_isr+0x4c>)
  202412:	f7ff ff45 	bl	2022a0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
  202416:	9b01      	ldr	r3, [sp, #4]
  202418:	2201      	movs	r2, #1
  20241a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  20241e:	bf00      	nop
  202420:	b003      	add	sp, #12
  202422:	f85d fb04 	ldr.w	pc, [sp], #4
  202426:	bf00      	nop
  202428:	200008c8 	.word	0x200008c8
  20242c:	080048d4 	.word	0x080048d4

00202430 <__dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void __dbg_check_unlock_from_isr(void) {
  202430:	b500      	push	{lr}
  202432:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  202434:	4b10      	ldr	r3, [pc, #64]	; (202478 <__dbg_check_unlock_from_isr+0x48>)
  202436:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
  202438:	9b01      	ldr	r3, [sp, #4]
  20243a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20243e:	2b00      	cmp	r3, #0
  202440:	bfd4      	ite	le
  202442:	2301      	movle	r3, #1
  202444:	2300      	movgt	r3, #0
  202446:	b2db      	uxtb	r3, r3
  202448:	2b00      	cmp	r3, #0
  20244a:	d109      	bne.n	202460 <__dbg_check_unlock_from_isr+0x30>
  20244c:	9b01      	ldr	r3, [sp, #4]
  20244e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  202452:	2b00      	cmp	r3, #0
  202454:	bfd4      	ite	le
  202456:	2301      	movle	r3, #1
  202458:	2300      	movgt	r3, #0
  20245a:	b2db      	uxtb	r3, r3
  20245c:	2b00      	cmp	r3, #0
  20245e:	d002      	beq.n	202466 <__dbg_check_unlock_from_isr+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  202460:	4806      	ldr	r0, [pc, #24]	; (20247c <__dbg_check_unlock_from_isr+0x4c>)
  202462:	f7ff ff1d 	bl	2022a0 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
  202466:	9b01      	ldr	r3, [sp, #4]
  202468:	2200      	movs	r2, #0
  20246a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  20246e:	bf00      	nop
  202470:	b003      	add	sp, #12
  202472:	f85d fb04 	ldr.w	pc, [sp], #4
  202476:	bf00      	nop
  202478:	200008c8 	.word	0x200008c8
  20247c:	080048dc 	.word	0x080048dc

00202480 <__dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void __dbg_check_enter_isr(void) {
  202480:	b500      	push	{lr}
  202482:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
  202484:	4b1a      	ldr	r3, [pc, #104]	; (2024f0 <__dbg_check_enter_isr+0x70>)
  202486:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  202488:	b672      	cpsid	i
}
  20248a:	bf00      	nop
  20248c:	2330      	movs	r3, #48	; 0x30
  20248e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202490:	9b02      	ldr	r3, [sp, #8]
  202492:	f383 8811 	msr	BASEPRI, r3
}
  202496:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  202498:	b662      	cpsie	i
}
  20249a:	bf00      	nop
}
  20249c:	bf00      	nop
}
  20249e:	bf00      	nop

  port_lock_from_isr();
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
  2024a0:	9b03      	ldr	r3, [sp, #12]
  2024a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2024a6:	0fdb      	lsrs	r3, r3, #31
  2024a8:	b2db      	uxtb	r3, r3
  2024aa:	2b00      	cmp	r3, #0
  2024ac:	d109      	bne.n	2024c2 <__dbg_check_enter_isr+0x42>
  2024ae:	9b03      	ldr	r3, [sp, #12]
  2024b0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  2024b4:	2b00      	cmp	r3, #0
  2024b6:	bf14      	ite	ne
  2024b8:	2301      	movne	r3, #1
  2024ba:	2300      	moveq	r3, #0
  2024bc:	b2db      	uxtb	r3, r3
  2024be:	2b00      	cmp	r3, #0
  2024c0:	d002      	beq.n	2024c8 <__dbg_check_enter_isr+0x48>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#8");
  2024c2:	480c      	ldr	r0, [pc, #48]	; (2024f4 <__dbg_check_enter_isr+0x74>)
  2024c4:	f7ff feec 	bl	2022a0 <chSysHalt>
  }
  oip->dbg.isr_cnt++;
  2024c8:	9b03      	ldr	r3, [sp, #12]
  2024ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2024ce:	1c5a      	adds	r2, r3, #1
  2024d0:	9b03      	ldr	r3, [sp, #12]
  2024d2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  2024d6:	2300      	movs	r3, #0
  2024d8:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2024da:	9b01      	ldr	r3, [sp, #4]
  2024dc:	f383 8811 	msr	BASEPRI, r3
}
  2024e0:	bf00      	nop
}
  2024e2:	bf00      	nop
}
  2024e4:	bf00      	nop
  port_unlock_from_isr();
}
  2024e6:	bf00      	nop
  2024e8:	b005      	add	sp, #20
  2024ea:	f85d fb04 	ldr.w	pc, [sp], #4
  2024ee:	bf00      	nop
  2024f0:	200008c8 	.word	0x200008c8
  2024f4:	080048e4 	.word	0x080048e4
	...

00202500 <__dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void __dbg_check_leave_isr(void) {
  202500:	b500      	push	{lr}
  202502:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
  202504:	4b1b      	ldr	r3, [pc, #108]	; (202574 <__dbg_check_leave_isr+0x74>)
  202506:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  202508:	b672      	cpsid	i
}
  20250a:	bf00      	nop
  20250c:	2330      	movs	r3, #48	; 0x30
  20250e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202510:	9b02      	ldr	r3, [sp, #8]
  202512:	f383 8811 	msr	BASEPRI, r3
}
  202516:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  202518:	b662      	cpsie	i
}
  20251a:	bf00      	nop
}
  20251c:	bf00      	nop
}
  20251e:	bf00      	nop

  port_lock_from_isr();
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
  202520:	9b03      	ldr	r3, [sp, #12]
  202522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  202526:	2b00      	cmp	r3, #0
  202528:	bfd4      	ite	le
  20252a:	2301      	movle	r3, #1
  20252c:	2300      	movgt	r3, #0
  20252e:	b2db      	uxtb	r3, r3
  202530:	2b00      	cmp	r3, #0
  202532:	d109      	bne.n	202548 <__dbg_check_leave_isr+0x48>
  202534:	9b03      	ldr	r3, [sp, #12]
  202536:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  20253a:	2b00      	cmp	r3, #0
  20253c:	bf14      	ite	ne
  20253e:	2301      	movne	r3, #1
  202540:	2300      	moveq	r3, #0
  202542:	b2db      	uxtb	r3, r3
  202544:	2b00      	cmp	r3, #0
  202546:	d002      	beq.n	20254e <__dbg_check_leave_isr+0x4e>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#9");
  202548:	480b      	ldr	r0, [pc, #44]	; (202578 <__dbg_check_leave_isr+0x78>)
  20254a:	f7ff fea9 	bl	2022a0 <chSysHalt>
  }
  oip->dbg.isr_cnt--;
  20254e:	9b03      	ldr	r3, [sp, #12]
  202550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  202554:	1e5a      	subs	r2, r3, #1
  202556:	9b03      	ldr	r3, [sp, #12]
  202558:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  20255c:	2300      	movs	r3, #0
  20255e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202560:	9b01      	ldr	r3, [sp, #4]
  202562:	f383 8811 	msr	BASEPRI, r3
}
  202566:	bf00      	nop
}
  202568:	bf00      	nop
}
  20256a:	bf00      	nop
  port_unlock_from_isr();
}
  20256c:	bf00      	nop
  20256e:	b005      	add	sp, #20
  202570:	f85d fb04 	ldr.w	pc, [sp], #4
  202574:	200008c8 	.word	0x200008c8
  202578:	080048ec 	.word	0x080048ec
  20257c:	00000000 	.word	0x00000000

00202580 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
  202580:	b500      	push	{lr}
  202582:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  202584:	4b0c      	ldr	r3, [pc, #48]	; (2025b8 <chDbgCheckClassI+0x38>)
  202586:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
  202588:	9b01      	ldr	r3, [sp, #4]
  20258a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20258e:	0fdb      	lsrs	r3, r3, #31
  202590:	b2db      	uxtb	r3, r3
  202592:	2b00      	cmp	r3, #0
  202594:	d109      	bne.n	2025aa <chDbgCheckClassI+0x2a>
  202596:	9b01      	ldr	r3, [sp, #4]
  202598:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  20259c:	2b00      	cmp	r3, #0
  20259e:	bfd4      	ite	le
  2025a0:	2301      	movle	r3, #1
  2025a2:	2300      	movgt	r3, #0
  2025a4:	b2db      	uxtb	r3, r3
  2025a6:	2b00      	cmp	r3, #0
  2025a8:	d002      	beq.n	2025b0 <chDbgCheckClassI+0x30>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
  2025aa:	4804      	ldr	r0, [pc, #16]	; (2025bc <chDbgCheckClassI+0x3c>)
  2025ac:	f7ff fe78 	bl	2022a0 <chSysHalt>
  }
}
  2025b0:	bf00      	nop
  2025b2:	b003      	add	sp, #12
  2025b4:	f85d fb04 	ldr.w	pc, [sp], #4
  2025b8:	200008c8 	.word	0x200008c8
  2025bc:	080048f4 	.word	0x080048f4

002025c0 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
  2025c0:	b500      	push	{lr}
  2025c2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  2025c4:	4b0e      	ldr	r3, [pc, #56]	; (202600 <chDbgCheckClassS+0x40>)
  2025c6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
  2025c8:	9b01      	ldr	r3, [sp, #4]
  2025ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2025ce:	2b00      	cmp	r3, #0
  2025d0:	bf14      	ite	ne
  2025d2:	2301      	movne	r3, #1
  2025d4:	2300      	moveq	r3, #0
  2025d6:	b2db      	uxtb	r3, r3
  2025d8:	2b00      	cmp	r3, #0
  2025da:	d109      	bne.n	2025f0 <chDbgCheckClassS+0x30>
  2025dc:	9b01      	ldr	r3, [sp, #4]
  2025de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  2025e2:	2b00      	cmp	r3, #0
  2025e4:	bfd4      	ite	le
  2025e6:	2301      	movle	r3, #1
  2025e8:	2300      	movgt	r3, #0
  2025ea:	b2db      	uxtb	r3, r3
  2025ec:	2b00      	cmp	r3, #0
  2025ee:	d002      	beq.n	2025f6 <chDbgCheckClassS+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
  2025f0:	4804      	ldr	r0, [pc, #16]	; (202604 <chDbgCheckClassS+0x44>)
  2025f2:	f7ff fe55 	bl	2022a0 <chSysHalt>
  }
}
  2025f6:	bf00      	nop
  2025f8:	b003      	add	sp, #12
  2025fa:	f85d fb04 	ldr.w	pc, [sp], #4
  2025fe:	bf00      	nop
  202600:	200008c8 	.word	0x200008c8
  202604:	080048fc 	.word	0x080048fc
	...

00202610 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
  202610:	b508      	push	{r3, lr}

  return stGetCounter();
  202612:	f7fe f88d 	bl	200730 <stGetCounter>
  202616:	4603      	mov	r3, r0
}
  202618:	4618      	mov	r0, r3
  20261a:	bd08      	pop	{r3, pc}
  20261c:	0000      	movs	r0, r0
	...

00202620 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
  202620:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
  202622:	f7ff fff5 	bl	202610 <port_timer_get_time.lto_priv.0>
  202626:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  202628:	4618      	mov	r0, r3
  20262a:	bd08      	pop	{r3, pc}
  20262c:	0000      	movs	r0, r0
	...

00202630 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(os_instance_t *oip) {
  202630:	b510      	push	{r4, lr}
  202632:	b082      	sub	sp, #8
  202634:	9001      	str	r0, [sp, #4]

  oip->trace_buffer.ptr->time    = chVTGetSystemTimeX();
  202636:	9b01      	ldr	r3, [sp, #4]
  202638:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
  20263c:	f7ff fff0 	bl	202620 <chVTGetSystemTimeX.lto_priv.0>
  202640:	4603      	mov	r3, r0
  202642:	6063      	str	r3, [r4, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  202644:	4b11      	ldr	r3, [pc, #68]	; (20268c <trace_next+0x5c>)
  202646:	685b      	ldr	r3, [r3, #4]
#if PORT_SUPPORTS_RT == TRUE
  oip->trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
  202648:	9a01      	ldr	r2, [sp, #4]
  20264a:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
  20264e:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
  202652:	6813      	ldr	r3, [r2, #0]
  202654:	f361 231f 	bfi	r3, r1, #8, #24
  202658:	6013      	str	r3, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(oip->trace_buffer.ptr);

  if (++oip->trace_buffer.ptr >= &oip->trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
  20265a:	9b01      	ldr	r3, [sp, #4]
  20265c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  202660:	f103 0210 	add.w	r2, r3, #16
  202664:	9b01      	ldr	r3, [sp, #4]
  202666:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  20266a:	9b01      	ldr	r3, [sp, #4]
  20266c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202670:	9b01      	ldr	r3, [sp, #4]
  202672:	f603 03f8 	addw	r3, r3, #2296	; 0x8f8
  202676:	429a      	cmp	r2, r3
  202678:	d305      	bcc.n	202686 <trace_next+0x56>
    oip->trace_buffer.ptr = &oip->trace_buffer.buffer[0];
  20267a:	9b01      	ldr	r3, [sp, #4]
  20267c:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
  202680:	9b01      	ldr	r3, [sp, #4]
  202682:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  }
}
  202686:	bf00      	nop
  202688:	b002      	add	sp, #8
  20268a:	bd10      	pop	{r4, pc}
  20268c:	e0001000 	.word	0xe0001000

00202690 <__trace_object_init>:
 *
 * @param[out] tbp      pointer to the @p trace_buffer_t structure
 *
 * @notapi
 */
void __trace_object_init(trace_buffer_t *tbp) {
  202690:	b084      	sub	sp, #16
  202692:	9001      	str	r0, [sp, #4]
  unsigned i;

  tbp->suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  202694:	9b01      	ldr	r3, [sp, #4]
  202696:	f64f 72e0 	movw	r2, #65504	; 0xffe0
  20269a:	801a      	strh	r2, [r3, #0]
  tbp->size      = CH_DBG_TRACE_BUFFER_SIZE;
  20269c:	9b01      	ldr	r3, [sp, #4]
  20269e:	2280      	movs	r2, #128	; 0x80
  2026a0:	805a      	strh	r2, [r3, #2]
  tbp->ptr       = &tbp->buffer[0];
  2026a2:	9b01      	ldr	r3, [sp, #4]
  2026a4:	f103 0208 	add.w	r2, r3, #8
  2026a8:	9b01      	ldr	r3, [sp, #4]
  2026aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
  2026ac:	2300      	movs	r3, #0
  2026ae:	9303      	str	r3, [sp, #12]
  2026b0:	e00c      	b.n	2026cc <__trace_object_init+0x3c>
    tbp->buffer[i].type = CH_TRACE_TYPE_UNUSED;
  2026b2:	9a01      	ldr	r2, [sp, #4]
  2026b4:	9b03      	ldr	r3, [sp, #12]
  2026b6:	011b      	lsls	r3, r3, #4
  2026b8:	4413      	add	r3, r2
  2026ba:	f103 0208 	add.w	r2, r3, #8
  2026be:	7813      	ldrb	r3, [r2, #0]
  2026c0:	f36f 0302 	bfc	r3, #0, #3
  2026c4:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
  2026c6:	9b03      	ldr	r3, [sp, #12]
  2026c8:	3301      	adds	r3, #1
  2026ca:	9303      	str	r3, [sp, #12]
  2026cc:	9b03      	ldr	r3, [sp, #12]
  2026ce:	2b7f      	cmp	r3, #127	; 0x7f
  2026d0:	d9ef      	bls.n	2026b2 <__trace_object_init+0x22>
  }
}
  2026d2:	bf00      	nop
  2026d4:	bf00      	nop
  2026d6:	b004      	add	sp, #16
  2026d8:	4770      	bx	lr
  2026da:	bf00      	nop
  2026dc:	0000      	movs	r0, r0
	...

002026e0 <__trace_ready>:
 * @param[in] tp        the thread that just become ready
 * @param[in] msg       the thread ready message
 *
 * @notapi
 */
void __trace_ready(thread_t *tp, msg_t msg) {
  2026e0:	b500      	push	{lr}
  2026e2:	b085      	sub	sp, #20
  2026e4:	9001      	str	r0, [sp, #4]
  2026e6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
  2026e8:	4b17      	ldr	r3, [pc, #92]	; (202748 <__trace_ready+0x68>)
  2026ea:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_READY) == 0U) {
  2026ec:	9b03      	ldr	r3, [sp, #12]
  2026ee:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  2026f2:	f003 0301 	and.w	r3, r3, #1
  2026f6:	2b00      	cmp	r3, #0
  2026f8:	d121      	bne.n	20273e <__trace_ready+0x5e>
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_READY;
  2026fa:	9b03      	ldr	r3, [sp, #12]
  2026fc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202700:	7813      	ldrb	r3, [r2, #0]
  202702:	2101      	movs	r1, #1
  202704:	f361 0302 	bfi	r3, r1, #0, #3
  202708:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = (uint8_t)tp->state;
  20270a:	9b01      	ldr	r3, [sp, #4]
  20270c:	7f19      	ldrb	r1, [r3, #28]
  20270e:	9b03      	ldr	r3, [sp, #12]
  202710:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202714:	460b      	mov	r3, r1
  202716:	f003 031f 	and.w	r3, r3, #31
  20271a:	b2d9      	uxtb	r1, r3
  20271c:	7813      	ldrb	r3, [r2, #0]
  20271e:	f361 03c7 	bfi	r3, r1, #3, #5
  202722:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.rdy.tp    = tp;
  202724:	9b03      	ldr	r3, [sp, #12]
  202726:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  20272a:	9a01      	ldr	r2, [sp, #4]
  20272c:	609a      	str	r2, [r3, #8]
    oip->trace_buffer.ptr->u.rdy.msg   = msg;
  20272e:	9b03      	ldr	r3, [sp, #12]
  202730:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  202734:	9a00      	ldr	r2, [sp, #0]
  202736:	60da      	str	r2, [r3, #12]
    trace_next(oip);
  202738:	9803      	ldr	r0, [sp, #12]
  20273a:	f7ff ff79 	bl	202630 <trace_next>
  }
}
  20273e:	bf00      	nop
  202740:	b005      	add	sp, #20
  202742:	f85d fb04 	ldr.w	pc, [sp], #4
  202746:	bf00      	nop
  202748:	200008c8 	.word	0x200008c8
  20274c:	00000000 	.word	0x00000000

00202750 <__trace_switch>:
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void __trace_switch(thread_t *ntp, thread_t *otp) {
  202750:	b500      	push	{lr}
  202752:	b085      	sub	sp, #20
  202754:	9001      	str	r0, [sp, #4]
  202756:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
  202758:	4b17      	ldr	r3, [pc, #92]	; (2027b8 <__trace_switch+0x68>)
  20275a:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
  20275c:	9b03      	ldr	r3, [sp, #12]
  20275e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  202762:	f003 0302 	and.w	r3, r3, #2
  202766:	2b00      	cmp	r3, #0
  202768:	d122      	bne.n	2027b0 <__trace_switch+0x60>
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
  20276a:	9b03      	ldr	r3, [sp, #12]
  20276c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202770:	7813      	ldrb	r3, [r2, #0]
  202772:	2102      	movs	r1, #2
  202774:	f361 0302 	bfi	r3, r1, #0, #3
  202778:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = (uint8_t)otp->state;
  20277a:	9b00      	ldr	r3, [sp, #0]
  20277c:	7f19      	ldrb	r1, [r3, #28]
  20277e:	9b03      	ldr	r3, [sp, #12]
  202780:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202784:	460b      	mov	r3, r1
  202786:	f003 031f 	and.w	r3, r3, #31
  20278a:	b2d9      	uxtb	r1, r3
  20278c:	7813      	ldrb	r3, [r2, #0]
  20278e:	f361 03c7 	bfi	r3, r1, #3, #5
  202792:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.sw.ntp    = ntp;
  202794:	9b03      	ldr	r3, [sp, #12]
  202796:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  20279a:	9a01      	ldr	r2, [sp, #4]
  20279c:	609a      	str	r2, [r3, #8]
    oip->trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
  20279e:	9b03      	ldr	r3, [sp, #12]
  2027a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  2027a4:	9a00      	ldr	r2, [sp, #0]
  2027a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
  2027a8:	60da      	str	r2, [r3, #12]
    trace_next(oip);
  2027aa:	9803      	ldr	r0, [sp, #12]
  2027ac:	f7ff ff40 	bl	202630 <trace_next>
  }
}
  2027b0:	bf00      	nop
  2027b2:	b005      	add	sp, #20
  2027b4:	f85d fb04 	ldr.w	pc, [sp], #4
  2027b8:	200008c8 	.word	0x200008c8
  2027bc:	00000000 	.word	0x00000000

002027c0 <__trace_isr_enter>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void __trace_isr_enter(const char *isr) {
  2027c0:	b500      	push	{lr}
  2027c2:	b087      	sub	sp, #28
  2027c4:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
  2027c6:	4b1c      	ldr	r3, [pc, #112]	; (202838 <__trace_isr_enter+0x78>)
  2027c8:	9305      	str	r3, [sp, #20]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
  2027ca:	9b05      	ldr	r3, [sp, #20]
  2027cc:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  2027d0:	f003 0304 	and.w	r3, r3, #4
  2027d4:	2b00      	cmp	r3, #0
  2027d6:	d12a      	bne.n	20282e <__trace_isr_enter+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
  2027d8:	b672      	cpsid	i
}
  2027da:	bf00      	nop
  2027dc:	2330      	movs	r3, #48	; 0x30
  2027de:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2027e0:	9b03      	ldr	r3, [sp, #12]
  2027e2:	f383 8811 	msr	BASEPRI, r3
}
  2027e6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  2027e8:	b662      	cpsie	i
}
  2027ea:	bf00      	nop
}
  2027ec:	bf00      	nop
}
  2027ee:	bf00      	nop
    port_lock_from_isr();
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
  2027f0:	9b05      	ldr	r3, [sp, #20]
  2027f2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  2027f6:	7813      	ldrb	r3, [r2, #0]
  2027f8:	2103      	movs	r1, #3
  2027fa:	f361 0302 	bfi	r3, r1, #0, #3
  2027fe:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = 0U;
  202800:	9b05      	ldr	r3, [sp, #20]
  202802:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202806:	7813      	ldrb	r3, [r2, #0]
  202808:	f36f 03c7 	bfc	r3, #3, #5
  20280c:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.isr.name  = isr;
  20280e:	9b05      	ldr	r3, [sp, #20]
  202810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  202814:	9a01      	ldr	r2, [sp, #4]
  202816:	609a      	str	r2, [r3, #8]
    trace_next(oip);
  202818:	9805      	ldr	r0, [sp, #20]
  20281a:	f7ff ff09 	bl	202630 <trace_next>
  20281e:	2300      	movs	r3, #0
  202820:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202822:	9b04      	ldr	r3, [sp, #16]
  202824:	f383 8811 	msr	BASEPRI, r3
}
  202828:	bf00      	nop
}
  20282a:	bf00      	nop
}
  20282c:	bf00      	nop
    port_unlock_from_isr();
  }
}
  20282e:	bf00      	nop
  202830:	b007      	add	sp, #28
  202832:	f85d fb04 	ldr.w	pc, [sp], #4
  202836:	bf00      	nop
  202838:	200008c8 	.word	0x200008c8
  20283c:	00000000 	.word	0x00000000

00202840 <__trace_isr_leave>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void __trace_isr_leave(const char *isr) {
  202840:	b500      	push	{lr}
  202842:	b087      	sub	sp, #28
  202844:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
  202846:	4b1c      	ldr	r3, [pc, #112]	; (2028b8 <__trace_isr_leave+0x78>)
  202848:	9305      	str	r3, [sp, #20]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
  20284a:	9b05      	ldr	r3, [sp, #20]
  20284c:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  202850:	f003 0304 	and.w	r3, r3, #4
  202854:	2b00      	cmp	r3, #0
  202856:	d12a      	bne.n	2028ae <__trace_isr_leave+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
  202858:	b672      	cpsid	i
}
  20285a:	bf00      	nop
  20285c:	2330      	movs	r3, #48	; 0x30
  20285e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202860:	9b03      	ldr	r3, [sp, #12]
  202862:	f383 8811 	msr	BASEPRI, r3
}
  202866:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  202868:	b662      	cpsie	i
}
  20286a:	bf00      	nop
}
  20286c:	bf00      	nop
}
  20286e:	bf00      	nop
    port_lock_from_isr();
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
  202870:	9b05      	ldr	r3, [sp, #20]
  202872:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202876:	7813      	ldrb	r3, [r2, #0]
  202878:	2104      	movs	r1, #4
  20287a:	f361 0302 	bfi	r3, r1, #0, #3
  20287e:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = 0U;
  202880:	9b05      	ldr	r3, [sp, #20]
  202882:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  202886:	7813      	ldrb	r3, [r2, #0]
  202888:	f36f 03c7 	bfc	r3, #3, #5
  20288c:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.isr.name  = isr;
  20288e:	9b05      	ldr	r3, [sp, #20]
  202890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  202894:	9a01      	ldr	r2, [sp, #4]
  202896:	609a      	str	r2, [r3, #8]
    trace_next(oip);
  202898:	9805      	ldr	r0, [sp, #20]
  20289a:	f7ff fec9 	bl	202630 <trace_next>
  20289e:	2300      	movs	r3, #0
  2028a0:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2028a2:	9b04      	ldr	r3, [sp, #16]
  2028a4:	f383 8811 	msr	BASEPRI, r3
}
  2028a8:	bf00      	nop
}
  2028aa:	bf00      	nop
}
  2028ac:	bf00      	nop
    port_unlock_from_isr();
  }
}
  2028ae:	bf00      	nop
  2028b0:	b007      	add	sp, #28
  2028b2:	f85d fb04 	ldr.w	pc, [sp], #4
  2028b6:	bf00      	nop
  2028b8:	200008c8 	.word	0x200008c8
  2028bc:	00000000 	.word	0x00000000

002028c0 <__trace_halt>:
 *
 * @param[in] reason    the halt error string
 *
 * @notapi
 */
void __trace_halt(const char *reason) {
  2028c0:	b500      	push	{lr}
  2028c2:	b085      	sub	sp, #20
  2028c4:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
  2028c6:	4b12      	ldr	r3, [pc, #72]	; (202910 <__trace_halt+0x50>)
  2028c8:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
  2028ca:	9b03      	ldr	r3, [sp, #12]
  2028cc:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  2028d0:	f003 0308 	and.w	r3, r3, #8
  2028d4:	2b00      	cmp	r3, #0
  2028d6:	d116      	bne.n	202906 <__trace_halt+0x46>
    oip->trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
  2028d8:	9b03      	ldr	r3, [sp, #12]
  2028da:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  2028de:	7813      	ldrb	r3, [r2, #0]
  2028e0:	2105      	movs	r1, #5
  2028e2:	f361 0302 	bfi	r3, r1, #0, #3
  2028e6:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state         = 0;
  2028e8:	9b03      	ldr	r3, [sp, #12]
  2028ea:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  2028ee:	7813      	ldrb	r3, [r2, #0]
  2028f0:	f36f 03c7 	bfc	r3, #3, #5
  2028f4:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.halt.reason = reason;
  2028f6:	9b03      	ldr	r3, [sp, #12]
  2028f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  2028fc:	9a01      	ldr	r2, [sp, #4]
  2028fe:	609a      	str	r2, [r3, #8]
    trace_next(oip);
  202900:	9803      	ldr	r0, [sp, #12]
  202902:	f7ff fe95 	bl	202630 <trace_next>
  }
}
  202906:	bf00      	nop
  202908:	b005      	add	sp, #20
  20290a:	f85d fb04 	ldr.w	pc, [sp], #4
  20290e:	bf00      	nop
  202910:	200008c8 	.word	0x200008c8
	...

00202920 <chTimeAddX>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
  202920:	b082      	sub	sp, #8
  202922:	9001      	str	r0, [sp, #4]
  202924:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
  202926:	9a01      	ldr	r2, [sp, #4]
  202928:	9b00      	ldr	r3, [sp, #0]
  20292a:	4413      	add	r3, r2
}
  20292c:	4618      	mov	r0, r3
  20292e:	b002      	add	sp, #8
  202930:	4770      	bx	lr
  202932:	bf00      	nop
	...

00202940 <chTimeDiffX.lto_priv.0>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
  202940:	b082      	sub	sp, #8
  202942:	9001      	str	r0, [sp, #4]
  202944:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
  202946:	9a00      	ldr	r2, [sp, #0]
  202948:	9b01      	ldr	r3, [sp, #4]
  20294a:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
  20294c:	4618      	mov	r0, r3
  20294e:	b002      	add	sp, #8
  202950:	4770      	bx	lr
  202952:	bf00      	nop
	...

00202960 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
  202960:	b082      	sub	sp, #8
  202962:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
  202964:	9b01      	ldr	r3, [sp, #4]
  202966:	681b      	ldr	r3, [r3, #0]
  202968:	9a01      	ldr	r2, [sp, #4]
  20296a:	429a      	cmp	r2, r3
  20296c:	bf0c      	ite	eq
  20296e:	2301      	moveq	r3, #1
  202970:	2300      	movne	r3, #0
  202972:	b2db      	uxtb	r3, r3
}
  202974:	4618      	mov	r0, r3
  202976:	b002      	add	sp, #8
  202978:	4770      	bx	lr
  20297a:	bf00      	nop
  20297c:	0000      	movs	r0, r0
	...

00202980 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
  202980:	b082      	sub	sp, #8
  202982:	9001      	str	r0, [sp, #4]
  202984:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
  202986:	9b01      	ldr	r3, [sp, #4]
  202988:	681b      	ldr	r3, [r3, #0]
  20298a:	9a00      	ldr	r2, [sp, #0]
  20298c:	429a      	cmp	r2, r3
  20298e:	bf0c      	ite	eq
  202990:	2301      	moveq	r3, #1
  202992:	2300      	movne	r3, #0
  202994:	b2db      	uxtb	r3, r3
}
  202996:	4618      	mov	r0, r3
  202998:	b002      	add	sp, #8
  20299a:	4770      	bx	lr
  20299c:	0000      	movs	r0, r0
	...

002029a0 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
  2029a0:	b084      	sub	sp, #16
  2029a2:	9003      	str	r0, [sp, #12]
  2029a4:	9102      	str	r1, [sp, #8]
  2029a6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
  2029a8:	9b02      	ldr	r3, [sp, #8]
  2029aa:	9a01      	ldr	r2, [sp, #4]
  2029ac:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
  2029ae:	9b02      	ldr	r3, [sp, #8]
  2029b0:	9a03      	ldr	r2, [sp, #12]
  2029b2:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
  2029b4:	9b02      	ldr	r3, [sp, #8]
  2029b6:	685b      	ldr	r3, [r3, #4]
  2029b8:	681a      	ldr	r2, [r3, #0]
  2029ba:	9b02      	ldr	r3, [sp, #8]
  2029bc:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
  2029be:	9b02      	ldr	r3, [sp, #8]
  2029c0:	681b      	ldr	r3, [r3, #0]
  2029c2:	9a02      	ldr	r2, [sp, #8]
  2029c4:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
  2029c6:	9b03      	ldr	r3, [sp, #12]
  2029c8:	9a02      	ldr	r2, [sp, #8]
  2029ca:	601a      	str	r2, [r3, #0]
}
  2029cc:	bf00      	nop
  2029ce:	b004      	add	sp, #16
  2029d0:	4770      	bx	lr
  2029d2:	bf00      	nop
	...

002029e0 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
  2029e0:	b084      	sub	sp, #16
  2029e2:	9003      	str	r0, [sp, #12]
  2029e4:	9102      	str	r1, [sp, #8]
  2029e6:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
  2029e8:	9b02      	ldr	r3, [sp, #8]
  2029ea:	9a01      	ldr	r2, [sp, #4]
  2029ec:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
  2029ee:	9b02      	ldr	r3, [sp, #8]
  2029f0:	9a03      	ldr	r2, [sp, #12]
  2029f2:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
  2029f4:	9b02      	ldr	r3, [sp, #8]
  2029f6:	681b      	ldr	r3, [r3, #0]
  2029f8:	685a      	ldr	r2, [r3, #4]
  2029fa:	9b02      	ldr	r3, [sp, #8]
  2029fc:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
  2029fe:	9b02      	ldr	r3, [sp, #8]
  202a00:	685b      	ldr	r3, [r3, #4]
  202a02:	9a02      	ldr	r2, [sp, #8]
  202a04:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
  202a06:	9b03      	ldr	r3, [sp, #12]
  202a08:	9a02      	ldr	r2, [sp, #8]
  202a0a:	605a      	str	r2, [r3, #4]
}
  202a0c:	bf00      	nop
  202a0e:	b004      	add	sp, #16
  202a10:	4770      	bx	lr
  202a12:	bf00      	nop
	...

00202a20 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
  202a20:	b500      	push	{lr}
  202a22:	b087      	sub	sp, #28
  202a24:	9003      	str	r0, [sp, #12]
  202a26:	9102      	str	r1, [sp, #8]
  202a28:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  202a2a:	9b03      	ldr	r3, [sp, #12]
  202a2c:	681b      	ldr	r3, [r3, #0]
  202a2e:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
  202a30:	e013      	b.n	202a5a <ch_dlist_insert+0x3a>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");
  202a32:	9a05      	ldr	r2, [sp, #20]
  202a34:	9b02      	ldr	r3, [sp, #8]
  202a36:	429a      	cmp	r2, r3
  202a38:	bf0c      	ite	eq
  202a3a:	2301      	moveq	r3, #1
  202a3c:	2300      	movne	r3, #0
  202a3e:	b2db      	uxtb	r3, r3
  202a40:	2b00      	cmp	r3, #0
  202a42:	d002      	beq.n	202a4a <ch_dlist_insert+0x2a>
  202a44:	4813      	ldr	r0, [pc, #76]	; (202a94 <ch_dlist_insert+0x74>)
  202a46:	f7ff fc2b 	bl	2022a0 <chSysHalt>

    delta -= dlp->delta;
  202a4a:	9b05      	ldr	r3, [sp, #20]
  202a4c:	689b      	ldr	r3, [r3, #8]
  202a4e:	9a01      	ldr	r2, [sp, #4]
  202a50:	1ad3      	subs	r3, r2, r3
  202a52:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
  202a54:	9b05      	ldr	r3, [sp, #20]
  202a56:	681b      	ldr	r3, [r3, #0]
  202a58:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
  202a5a:	9b05      	ldr	r3, [sp, #20]
  202a5c:	689b      	ldr	r3, [r3, #8]
  202a5e:	9a01      	ldr	r2, [sp, #4]
  202a60:	429a      	cmp	r2, r3
  202a62:	bf8c      	ite	hi
  202a64:	2301      	movhi	r3, #1
  202a66:	2300      	movls	r3, #0
  202a68:	b2db      	uxtb	r3, r3
  202a6a:	2b00      	cmp	r3, #0
  202a6c:	d1e1      	bne.n	202a32 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
  202a6e:	9a01      	ldr	r2, [sp, #4]
  202a70:	9902      	ldr	r1, [sp, #8]
  202a72:	9805      	ldr	r0, [sp, #20]
  202a74:	f7ff ffb4 	bl	2029e0 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
  202a78:	9b05      	ldr	r3, [sp, #20]
  202a7a:	689a      	ldr	r2, [r3, #8]
  202a7c:	9b01      	ldr	r3, [sp, #4]
  202a7e:	1ad2      	subs	r2, r2, r3
  202a80:	9b05      	ldr	r3, [sp, #20]
  202a82:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
  202a84:	9b03      	ldr	r3, [sp, #12]
  202a86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202a8a:	609a      	str	r2, [r3, #8]
}
  202a8c:	bf00      	nop
  202a8e:	b007      	add	sp, #28
  202a90:	f85d fb04 	ldr.w	pc, [sp], #4
  202a94:	08004904 	.word	0x08004904
	...

00202aa0 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
  202aa0:	b084      	sub	sp, #16
  202aa2:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
  202aa4:	9b01      	ldr	r3, [sp, #4]
  202aa6:	681b      	ldr	r3, [r3, #0]
  202aa8:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
  202aaa:	9b03      	ldr	r3, [sp, #12]
  202aac:	681a      	ldr	r2, [r3, #0]
  202aae:	9b01      	ldr	r3, [sp, #4]
  202ab0:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
  202ab2:	9b01      	ldr	r3, [sp, #4]
  202ab4:	681b      	ldr	r3, [r3, #0]
  202ab6:	9a01      	ldr	r2, [sp, #4]
  202ab8:	605a      	str	r2, [r3, #4]

  return dlp;
  202aba:	9b03      	ldr	r3, [sp, #12]
}
  202abc:	4618      	mov	r0, r3
  202abe:	b004      	add	sp, #16
  202ac0:	4770      	bx	lr
  202ac2:	bf00      	nop
	...

00202ad0 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
  202ad0:	b082      	sub	sp, #8
  202ad2:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
  202ad4:	9b01      	ldr	r3, [sp, #4]
  202ad6:	685b      	ldr	r3, [r3, #4]
  202ad8:	9a01      	ldr	r2, [sp, #4]
  202ada:	6812      	ldr	r2, [r2, #0]
  202adc:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
  202ade:	9b01      	ldr	r3, [sp, #4]
  202ae0:	681b      	ldr	r3, [r3, #0]
  202ae2:	9a01      	ldr	r2, [sp, #4]
  202ae4:	6852      	ldr	r2, [r2, #4]
  202ae6:	605a      	str	r2, [r3, #4]

  return dlp;
  202ae8:	9b01      	ldr	r3, [sp, #4]
}
  202aea:	4618      	mov	r0, r3
  202aec:	b002      	add	sp, #8
  202aee:	4770      	bx	lr

00202af0 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
  202af0:	b500      	push	{lr}
  202af2:	b083      	sub	sp, #12
  202af4:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
  202af6:	9801      	ldr	r0, [sp, #4]
  202af8:	f7fd fe22 	bl	200740 <stStartAlarm>
}
  202afc:	bf00      	nop
  202afe:	b003      	add	sp, #12
  202b00:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202b10 <port_timer_stop_alarm>:
static inline void port_timer_stop_alarm(void) {
  202b10:	b508      	push	{r3, lr}
  stStopAlarm();
  202b12:	f7fd fe2d 	bl	200770 <stStopAlarm>
}
  202b16:	bf00      	nop
  202b18:	bd08      	pop	{r3, pc}
  202b1a:	bf00      	nop
  202b1c:	0000      	movs	r0, r0
	...

00202b20 <port_timer_set_alarm>:
static inline void port_timer_set_alarm(systime_t time) {
  202b20:	b500      	push	{lr}
  202b22:	b083      	sub	sp, #12
  202b24:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
  202b26:	9801      	ldr	r0, [sp, #4]
  202b28:	f7fd fe2a 	bl	200780 <stSetAlarm>
}
  202b2c:	bf00      	nop
  202b2e:	b003      	add	sp, #12
  202b30:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202b40 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
  202b40:	b508      	push	{r3, lr}
  return stGetCounter();
  202b42:	f7fd fdf5 	bl	200730 <stGetCounter>
  202b46:	4603      	mov	r3, r0
}
  202b48:	4618      	mov	r0, r3
  202b4a:	bd08      	pop	{r3, pc}
  202b4c:	0000      	movs	r0, r0
	...

00202b50 <chSysLockFromISR.lto_priv.3>:
static inline void chSysLockFromISR(void) {
  202b50:	b500      	push	{lr}
  202b52:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  202b54:	b672      	cpsid	i
}
  202b56:	bf00      	nop
  202b58:	2330      	movs	r3, #48	; 0x30
  202b5a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202b5c:	9b01      	ldr	r3, [sp, #4]
  202b5e:	f383 8811 	msr	BASEPRI, r3
}
  202b62:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  202b64:	b662      	cpsie	i
}
  202b66:	bf00      	nop
}
  202b68:	bf00      	nop
}
  202b6a:	bf00      	nop
  __dbg_check_lock_from_isr();
  202b6c:	f7ff fc38 	bl	2023e0 <__dbg_check_lock_from_isr>
}
  202b70:	bf00      	nop
  202b72:	b003      	add	sp, #12
  202b74:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202b80 <chSysUnlockFromISR.lto_priv.3>:
static inline void chSysUnlockFromISR(void) {
  202b80:	b500      	push	{lr}
  202b82:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  202b84:	f7ff fc54 	bl	202430 <__dbg_check_unlock_from_isr>
  202b88:	2300      	movs	r3, #0
  202b8a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202b8c:	9b01      	ldr	r3, [sp, #4]
  202b8e:	f383 8811 	msr	BASEPRI, r3
}
  202b92:	bf00      	nop
}
  202b94:	bf00      	nop
}
  202b96:	bf00      	nop
}
  202b98:	bf00      	nop
  202b9a:	b003      	add	sp, #12
  202b9c:	f85d fb04 	ldr.w	pc, [sp], #4

00202ba0 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
  202ba0:	b508      	push	{r3, lr}
  return port_timer_get_time();
  202ba2:	f7ff ffcd 	bl	202b40 <port_timer_get_time.lto_priv.1>
  202ba6:	4603      	mov	r3, r0
}
  202ba8:	4618      	mov	r0, r3
  202baa:	bd08      	pop	{r3, pc}
  202bac:	0000      	movs	r0, r0
	...

00202bb0 <chVTIsArmedI.lto_priv.0>:
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
  202bb0:	b500      	push	{lr}
  202bb2:	b083      	sub	sp, #12
  202bb4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  202bb6:	f7ff fce3 	bl	202580 <chDbgCheckClassI>

  return (bool)(vtp->dlist.next != NULL);
  202bba:	9b01      	ldr	r3, [sp, #4]
  202bbc:	681b      	ldr	r3, [r3, #0]
  202bbe:	2b00      	cmp	r3, #0
  202bc0:	bf14      	ite	ne
  202bc2:	2301      	movne	r3, #1
  202bc4:	2300      	moveq	r3, #0
  202bc6:	b2db      	uxtb	r3, r3
}
  202bc8:	4618      	mov	r0, r3
  202bca:	b003      	add	sp, #12
  202bcc:	f85d fb04 	ldr.w	pc, [sp], #4

00202bd0 <vt_set_alarm>:
 * @param[in] now       last known system time
 * @param[in] delay     delay over @p now
 */
static void vt_set_alarm(virtual_timers_list_t *vtlp,
                         systime_t now,
                         sysinterval_t delay) {
  202bd0:	b500      	push	{lr}
  202bd2:	b089      	sub	sp, #36	; 0x24
  202bd4:	9003      	str	r0, [sp, #12]
  202bd6:	9102      	str	r1, [sp, #8]
  202bd8:	9201      	str	r2, [sp, #4]
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = vtlp->lastdelta;
  202bda:	9b03      	ldr	r3, [sp, #12]
  202bdc:	691b      	ldr	r3, [r3, #16]
  202bde:	9307      	str	r3, [sp, #28]

  if (delay < currdelta) {
  202be0:	9a01      	ldr	r2, [sp, #4]
  202be2:	9b07      	ldr	r3, [sp, #28]
  202be4:	429a      	cmp	r2, r3
  202be6:	d201      	bcs.n	202bec <vt_set_alarm+0x1c>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
  202be8:	9b07      	ldr	r3, [sp, #28]
  202bea:	9301      	str	r3, [sp, #4]
  while (true) {
    sysinterval_t nowdelta;
    systime_t newnow;

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, delay));
  202bec:	9901      	ldr	r1, [sp, #4]
  202bee:	9802      	ldr	r0, [sp, #8]
  202bf0:	f7ff fe96 	bl	202920 <chTimeAddX>
  202bf4:	4603      	mov	r3, r0
  202bf6:	4618      	mov	r0, r3
  202bf8:	f7ff ff92 	bl	202b20 <port_timer_set_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
  202bfc:	f7ff ffd0 	bl	202ba0 <chVTGetSystemTimeX.lto_priv.1>
  202c00:	9006      	str	r0, [sp, #24]
    nowdelta = chTimeDiffX(now, newnow);
  202c02:	9906      	ldr	r1, [sp, #24]
  202c04:	9802      	ldr	r0, [sp, #8]
  202c06:	f7ff fe9b 	bl	202940 <chTimeDiffX.lto_priv.0>
  202c0a:	9005      	str	r0, [sp, #20]
    if (likely(nowdelta < delay)) {
  202c0c:	9a05      	ldr	r2, [sp, #20]
  202c0e:	9b01      	ldr	r3, [sp, #4]
  202c10:	429a      	cmp	r2, r3
  202c12:	bf34      	ite	cc
  202c14:	2301      	movcc	r3, #1
  202c16:	2300      	movcs	r3, #0
  202c18:	b2db      	uxtb	r3, r3
  202c1a:	2b00      	cmp	r3, #0
  202c1c:	d107      	bne.n	202c2e <vt_set_alarm+0x5e>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
  202c1e:	9b07      	ldr	r3, [sp, #28]
  202c20:	3301      	adds	r3, #1
  202c22:	9307      	str	r3, [sp, #28]

    /* Current time becomes the new "base" time.*/
    now = newnow;
  202c24:	9b06      	ldr	r3, [sp, #24]
  202c26:	9302      	str	r3, [sp, #8]
    delay = currdelta;
  202c28:	9b07      	ldr	r3, [sp, #28]
  202c2a:	9301      	str	r3, [sp, #4]
  while (true) {
  202c2c:	e7de      	b.n	202bec <vt_set_alarm+0x1c>
      break;
  202c2e:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > vtlp->lastdelta) {
  202c30:	9b03      	ldr	r3, [sp, #12]
  202c32:	691b      	ldr	r3, [r3, #16]
  202c34:	9a07      	ldr	r2, [sp, #28]
  202c36:	429a      	cmp	r2, r3
  202c38:	d905      	bls.n	202c46 <vt_set_alarm+0x76>
    vtlp->lastdelta = currdelta;
  202c3a:	9b03      	ldr	r3, [sp, #12]
  202c3c:	9a07      	ldr	r2, [sp, #28]
  202c3e:	611a      	str	r2, [r3, #16]
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
  202c40:	2001      	movs	r0, #1
  202c42:	f7ff fb6d 	bl	202320 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
  202c46:	bf00      	nop
  202c48:	b009      	add	sp, #36	; 0x24
  202c4a:	f85d fb04 	ldr.w	pc, [sp], #4
  202c4e:	bf00      	nop

00202c50 <vt_insert_first>:
 * @param[in] delay     delay over @p now
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
  202c50:	b500      	push	{lr}
  202c52:	b087      	sub	sp, #28
  202c54:	9003      	str	r0, [sp, #12]
  202c56:	9102      	str	r1, [sp, #8]
  202c58:	9201      	str	r2, [sp, #4]
  202c5a:	9300      	str	r3, [sp, #0]
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
  202c5c:	9b03      	ldr	r3, [sp, #12]
  202c5e:	9a01      	ldr	r2, [sp, #4]
  202c60:	60da      	str	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
  202c62:	9b03      	ldr	r3, [sp, #12]
  202c64:	9902      	ldr	r1, [sp, #8]
  202c66:	9a00      	ldr	r2, [sp, #0]
  202c68:	4618      	mov	r0, r3
  202c6a:	f7ff fe99 	bl	2029a0 <ch_dlist_insert_after>

  /* Initial delta is what is configured statically.*/
  currdelta = vtlp->lastdelta;
  202c6e:	9b03      	ldr	r3, [sp, #12]
  202c70:	691b      	ldr	r3, [r3, #16]
  202c72:	9305      	str	r3, [sp, #20]

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
  202c74:	9a00      	ldr	r2, [sp, #0]
  202c76:	9b05      	ldr	r3, [sp, #20]
  202c78:	429a      	cmp	r2, r3
  202c7a:	d201      	bcs.n	202c80 <vt_insert_first+0x30>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
  202c7c:	9b05      	ldr	r3, [sp, #20]
  202c7e:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
  202c80:	9b03      	ldr	r3, [sp, #12]
  202c82:	68db      	ldr	r3, [r3, #12]
  202c84:	9900      	ldr	r1, [sp, #0]
  202c86:	4618      	mov	r0, r3
  202c88:	f7ff fe4a 	bl	202920 <chTimeAddX>
  202c8c:	4603      	mov	r3, r0
  202c8e:	4618      	mov	r0, r3
  202c90:	f7ff ff2e 	bl	202af0 <port_timer_start_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
  202c94:	f7ff ff84 	bl	202ba0 <chVTGetSystemTimeX.lto_priv.1>
  202c98:	9004      	str	r0, [sp, #16]
    if (likely(chTimeDiffX(now, newnow) < delay)) {
  202c9a:	9904      	ldr	r1, [sp, #16]
  202c9c:	9801      	ldr	r0, [sp, #4]
  202c9e:	f7ff fe4f 	bl	202940 <chTimeDiffX.lto_priv.0>
  202ca2:	4602      	mov	r2, r0
  202ca4:	9b00      	ldr	r3, [sp, #0]
  202ca6:	4293      	cmp	r3, r2
  202ca8:	bf8c      	ite	hi
  202caa:	2301      	movhi	r3, #1
  202cac:	2300      	movls	r3, #0
  202cae:	b2db      	uxtb	r3, r3
  202cb0:	2b00      	cmp	r3, #0
  202cb2:	d10f      	bne.n	202cd4 <vt_insert_first+0x84>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
  202cb4:	9b05      	ldr	r3, [sp, #20]
  202cb6:	3301      	adds	r3, #1
  202cb8:	9305      	str	r3, [sp, #20]

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, currdelta));
  202cba:	9905      	ldr	r1, [sp, #20]
  202cbc:	9801      	ldr	r0, [sp, #4]
  202cbe:	f7ff fe2f 	bl	202920 <chTimeAddX>
  202cc2:	4603      	mov	r3, r0
  202cc4:	4618      	mov	r0, r3
  202cc6:	f7ff ff2b 	bl	202b20 <port_timer_set_alarm>

    /* Current time becomes the new "base" time.*/
    now = newnow;
  202cca:	9b04      	ldr	r3, [sp, #16]
  202ccc:	9301      	str	r3, [sp, #4]
    delay = currdelta;
  202cce:	9b05      	ldr	r3, [sp, #20]
  202cd0:	9300      	str	r3, [sp, #0]
  while (true) {
  202cd2:	e7df      	b.n	202c94 <vt_insert_first+0x44>
      break;
  202cd4:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > vtlp->lastdelta) {
  202cd6:	9b03      	ldr	r3, [sp, #12]
  202cd8:	691b      	ldr	r3, [r3, #16]
  202cda:	9a05      	ldr	r2, [sp, #20]
  202cdc:	429a      	cmp	r2, r3
  202cde:	d905      	bls.n	202cec <vt_insert_first+0x9c>
    vtlp->lastdelta = currdelta;
  202ce0:	9b03      	ldr	r3, [sp, #12]
  202ce2:	9a05      	ldr	r2, [sp, #20]
  202ce4:	611a      	str	r2, [r3, #16]
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
  202ce6:	2001      	movs	r0, #1
  202ce8:	f7ff fb1a 	bl	202320 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
  202cec:	bf00      	nop
  202cee:	b007      	add	sp, #28
  202cf0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202d00 <vt_enqueue>:
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 * @param[in] delay     delay over current system time
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
  202d00:	b500      	push	{lr}
  202d02:	b089      	sub	sp, #36	; 0x24
  202d04:	9003      	str	r0, [sp, #12]
  202d06:	9102      	str	r1, [sp, #8]
  202d08:	9201      	str	r2, [sp, #4]
  sysinterval_t delta;

#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;
    systime_t now = chVTGetSystemTimeX();
  202d0a:	f7ff ff49 	bl	202ba0 <chVTGetSystemTimeX.lto_priv.1>
  202d0e:	9006      	str	r0, [sp, #24]

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
  202d10:	9b03      	ldr	r3, [sp, #12]
  202d12:	4618      	mov	r0, r3
  202d14:	f7ff fe24 	bl	202960 <ch_dlist_isempty>
  202d18:	4603      	mov	r3, r0
  202d1a:	2b00      	cmp	r3, #0
  202d1c:	d006      	beq.n	202d2c <vt_enqueue+0x2c>

      vt_insert_first(vtlp, vtp, now, delay);
  202d1e:	9b01      	ldr	r3, [sp, #4]
  202d20:	9a06      	ldr	r2, [sp, #24]
  202d22:	9902      	ldr	r1, [sp, #8]
  202d24:	9803      	ldr	r0, [sp, #12]
  202d26:	f7ff ff93 	bl	202c50 <vt_insert_first>

      return;
  202d2a:	e021      	b.n	202d70 <vt_enqueue+0x70>
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
  202d2c:	9b03      	ldr	r3, [sp, #12]
  202d2e:	68db      	ldr	r3, [r3, #12]
  202d30:	9906      	ldr	r1, [sp, #24]
  202d32:	4618      	mov	r0, r3
  202d34:	f7ff fe04 	bl	202940 <chTimeDiffX.lto_priv.0>
  202d38:	9005      	str	r0, [sp, #20]
    delta    = nowdelta + delay;
  202d3a:	9a05      	ldr	r2, [sp, #20]
  202d3c:	9b01      	ldr	r3, [sp, #4]
  202d3e:	4413      	add	r3, r2
  202d40:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
  202d42:	9a07      	ldr	r2, [sp, #28]
  202d44:	9b05      	ldr	r3, [sp, #20]
  202d46:	429a      	cmp	r2, r3
  202d48:	d201      	bcs.n	202d4e <vt_enqueue+0x4e>
      delta = delay;
  202d4a:	9b01      	ldr	r3, [sp, #4]
  202d4c:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
  202d4e:	9b03      	ldr	r3, [sp, #12]
  202d50:	681b      	ldr	r3, [r3, #0]
  202d52:	689b      	ldr	r3, [r3, #8]
  202d54:	9a07      	ldr	r2, [sp, #28]
  202d56:	429a      	cmp	r2, r3
  202d58:	d204      	bcs.n	202d64 <vt_enqueue+0x64>

      vt_set_alarm(vtlp, now, delay);
  202d5a:	9a01      	ldr	r2, [sp, #4]
  202d5c:	9906      	ldr	r1, [sp, #24]
  202d5e:	9803      	ldr	r0, [sp, #12]
  202d60:	f7ff ff36 	bl	202bd0 <vt_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
  202d64:	9b03      	ldr	r3, [sp, #12]
  202d66:	9902      	ldr	r1, [sp, #8]
  202d68:	9a07      	ldr	r2, [sp, #28]
  202d6a:	4618      	mov	r0, r3
  202d6c:	f7ff fe58 	bl	202a20 <ch_dlist_insert>
}
  202d70:	b009      	add	sp, #36	; 0x24
  202d72:	f85d fb04 	ldr.w	pc, [sp], #4
  202d76:	bf00      	nop
	...

00202d80 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  202d80:	b500      	push	{lr}
  202d82:	b087      	sub	sp, #28
  202d84:	9003      	str	r0, [sp, #12]
  202d86:	9102      	str	r1, [sp, #8]
  202d88:	9201      	str	r2, [sp, #4]
  202d8a:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
  202d8c:	4b1a      	ldr	r3, [pc, #104]	; (202df8 <chVTDoSetI+0x78>)
  202d8e:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  202d90:	f7ff fbf6 	bl	202580 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
  202d94:	9b03      	ldr	r3, [sp, #12]
  202d96:	2b00      	cmp	r3, #0
  202d98:	bf0c      	ite	eq
  202d9a:	2301      	moveq	r3, #1
  202d9c:	2300      	movne	r3, #0
  202d9e:	b2db      	uxtb	r3, r3
  202da0:	2b00      	cmp	r3, #0
  202da2:	d107      	bne.n	202db4 <chVTDoSetI+0x34>
  202da4:	9b01      	ldr	r3, [sp, #4]
  202da6:	2b00      	cmp	r3, #0
  202da8:	bf0c      	ite	eq
  202daa:	2301      	moveq	r3, #1
  202dac:	2300      	movne	r3, #0
  202dae:	b2db      	uxtb	r3, r3
  202db0:	2b00      	cmp	r3, #0
  202db2:	d001      	beq.n	202db8 <chVTDoSetI+0x38>
  202db4:	2301      	movs	r3, #1
  202db6:	e000      	b.n	202dba <chVTDoSetI+0x3a>
  202db8:	2300      	movs	r3, #0
  202dba:	2b00      	cmp	r3, #0
  202dbc:	d107      	bne.n	202dce <chVTDoSetI+0x4e>
  202dbe:	9b02      	ldr	r3, [sp, #8]
  202dc0:	2b00      	cmp	r3, #0
  202dc2:	bf0c      	ite	eq
  202dc4:	2301      	moveq	r3, #1
  202dc6:	2300      	movne	r3, #0
  202dc8:	b2db      	uxtb	r3, r3
  202dca:	2b00      	cmp	r3, #0
  202dcc:	d002      	beq.n	202dd4 <chVTDoSetI+0x54>
  202dce:	480b      	ldr	r0, [pc, #44]	; (202dfc <chVTDoSetI+0x7c>)
  202dd0:	f7ff fa66 	bl	2022a0 <chSysHalt>

  /* Timer initialization.*/
  vtp->par     = par;
  202dd4:	9b03      	ldr	r3, [sp, #12]
  202dd6:	9a00      	ldr	r2, [sp, #0]
  202dd8:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
  202dda:	9b03      	ldr	r3, [sp, #12]
  202ddc:	9a01      	ldr	r2, [sp, #4]
  202dde:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
  202de0:	9b03      	ldr	r3, [sp, #12]
  202de2:	2200      	movs	r2, #0
  202de4:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
  202de6:	9a02      	ldr	r2, [sp, #8]
  202de8:	9903      	ldr	r1, [sp, #12]
  202dea:	9805      	ldr	r0, [sp, #20]
  202dec:	f7ff ff88 	bl	202d00 <vt_enqueue>
}
  202df0:	bf00      	nop
  202df2:	b007      	add	sp, #28
  202df4:	f85d fb04 	ldr.w	pc, [sp], #4
  202df8:	200008d8 	.word	0x200008d8
  202dfc:	08004914 	.word	0x08004914

00202e00 <chVTDoResetI>:
 *
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
  202e00:	b500      	push	{lr}
  202e02:	b087      	sub	sp, #28
  202e04:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
  202e06:	4b3b      	ldr	r3, [pc, #236]	; (202ef4 <chVTDoResetI+0xf4>)
  202e08:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  202e0a:	f7ff fbb9 	bl	202580 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
  202e0e:	9b01      	ldr	r3, [sp, #4]
  202e10:	2b00      	cmp	r3, #0
  202e12:	bf0c      	ite	eq
  202e14:	2301      	moveq	r3, #1
  202e16:	2300      	movne	r3, #0
  202e18:	b2db      	uxtb	r3, r3
  202e1a:	2b00      	cmp	r3, #0
  202e1c:	d002      	beq.n	202e24 <chVTDoResetI+0x24>
  202e1e:	4836      	ldr	r0, [pc, #216]	; (202ef8 <chVTDoResetI+0xf8>)
  202e20:	f7ff fa3e 	bl	2022a0 <chSysHalt>
  chDbgAssert(chVTIsArmedI(vtp), "timer not armed");
  202e24:	9801      	ldr	r0, [sp, #4]
  202e26:	f7ff fec3 	bl	202bb0 <chVTIsArmedI.lto_priv.0>
  202e2a:	4603      	mov	r3, r0
  202e2c:	f083 0301 	eor.w	r3, r3, #1
  202e30:	b2db      	uxtb	r3, r3
  202e32:	2b00      	cmp	r3, #0
  202e34:	d002      	beq.n	202e3c <chVTDoResetI+0x3c>
  202e36:	4830      	ldr	r0, [pc, #192]	; (202ef8 <chVTDoResetI+0xf8>)
  202e38:	f7ff fa32 	bl	2022a0 <chSysHalt>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
  202e3c:	9b05      	ldr	r3, [sp, #20]
  202e3e:	9a01      	ldr	r2, [sp, #4]
  202e40:	4611      	mov	r1, r2
  202e42:	4618      	mov	r0, r3
  202e44:	f7ff fd9c 	bl	202980 <ch_dlist_isfirst>
  202e48:	4603      	mov	r3, r0
  202e4a:	f083 0301 	eor.w	r3, r3, #1
  202e4e:	b2db      	uxtb	r3, r3
  202e50:	2b00      	cmp	r3, #0
  202e52:	d014      	beq.n	202e7e <chVTDoResetI+0x7e>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
  202e54:	9b01      	ldr	r3, [sp, #4]
  202e56:	4618      	mov	r0, r3
  202e58:	f7ff fe3a 	bl	202ad0 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
  202e5c:	9b01      	ldr	r3, [sp, #4]
  202e5e:	681b      	ldr	r3, [r3, #0]
  202e60:	6899      	ldr	r1, [r3, #8]
  202e62:	9b01      	ldr	r3, [sp, #4]
  202e64:	689a      	ldr	r2, [r3, #8]
  202e66:	9b01      	ldr	r3, [sp, #4]
  202e68:	681b      	ldr	r3, [r3, #0]
  202e6a:	440a      	add	r2, r1
  202e6c:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
  202e6e:	9b01      	ldr	r3, [sp, #4]
  202e70:	2200      	movs	r2, #0
  202e72:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
  202e74:	9b05      	ldr	r3, [sp, #20]
  202e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202e7a:	609a      	str	r2, [r3, #8]

    return;
  202e7c:	e036      	b.n	202eec <chVTDoResetI+0xec>
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  202e7e:	9b05      	ldr	r3, [sp, #20]
  202e80:	4618      	mov	r0, r3
  202e82:	f7ff fe0d 	bl	202aa0 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
  202e86:	9b01      	ldr	r3, [sp, #4]
  202e88:	2200      	movs	r2, #0
  202e8a:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
  202e8c:	9b05      	ldr	r3, [sp, #20]
  202e8e:	4618      	mov	r0, r3
  202e90:	f7ff fd66 	bl	202960 <ch_dlist_isempty>
  202e94:	4603      	mov	r3, r0
  202e96:	2b00      	cmp	r3, #0
  202e98:	d002      	beq.n	202ea0 <chVTDoResetI+0xa0>

    port_timer_stop_alarm();
  202e9a:	f7ff fe39 	bl	202b10 <port_timer_stop_alarm>

    return;
  202e9e:	e025      	b.n	202eec <chVTDoResetI+0xec>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
  202ea0:	9b05      	ldr	r3, [sp, #20]
  202ea2:	681b      	ldr	r3, [r3, #0]
  202ea4:	6899      	ldr	r1, [r3, #8]
  202ea6:	9b01      	ldr	r3, [sp, #4]
  202ea8:	689a      	ldr	r2, [r3, #8]
  202eaa:	9b05      	ldr	r3, [sp, #20]
  202eac:	681b      	ldr	r3, [r3, #0]
  202eae:	440a      	add	r2, r1
  202eb0:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
  202eb2:	f7ff fe75 	bl	202ba0 <chVTGetSystemTimeX.lto_priv.1>
  202eb6:	9004      	str	r0, [sp, #16]
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
  202eb8:	9b05      	ldr	r3, [sp, #20]
  202eba:	68db      	ldr	r3, [r3, #12]
  202ebc:	9904      	ldr	r1, [sp, #16]
  202ebe:	4618      	mov	r0, r3
  202ec0:	f7ff fd3e 	bl	202940 <chTimeDiffX.lto_priv.0>
  202ec4:	9003      	str	r0, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
  202ec6:	9b05      	ldr	r3, [sp, #20]
  202ec8:	681b      	ldr	r3, [r3, #0]
  202eca:	689b      	ldr	r3, [r3, #8]
  202ecc:	9a03      	ldr	r2, [sp, #12]
  202ece:	429a      	cmp	r2, r3
  202ed0:	d20b      	bcs.n	202eea <chVTDoResetI+0xea>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
  202ed2:	9b05      	ldr	r3, [sp, #20]
  202ed4:	681b      	ldr	r3, [r3, #0]
  202ed6:	689a      	ldr	r2, [r3, #8]
  202ed8:	9b03      	ldr	r3, [sp, #12]
  202eda:	1ad3      	subs	r3, r2, r3
  202edc:	9302      	str	r3, [sp, #8]

  /* Setting up the alarm.*/
  vt_set_alarm(vtlp, now, delta);
  202ede:	9a02      	ldr	r2, [sp, #8]
  202ee0:	9904      	ldr	r1, [sp, #16]
  202ee2:	9805      	ldr	r0, [sp, #20]
  202ee4:	f7ff fe74 	bl	202bd0 <vt_set_alarm>
  202ee8:	e000      	b.n	202eec <chVTDoResetI+0xec>
    return;
  202eea:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  202eec:	b007      	add	sp, #28
  202eee:	f85d fb04 	ldr.w	pc, [sp], #4
  202ef2:	bf00      	nop
  202ef4:	200008d8 	.word	0x200008d8
  202ef8:	08004920 	.word	0x08004920
  202efc:	00000000 	.word	0x00000000

00202f00 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
  202f00:	b500      	push	{lr}
  202f02:	b089      	sub	sp, #36	; 0x24
  virtual_timers_list_t *vtlp = &currcore->vtlist;
  202f04:	4b4f      	ldr	r3, [pc, #316]	; (203044 <chVTDoTickI+0x144>)
  202f06:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  202f08:	f7ff fb3a 	bl	202580 <chDbgCheckClassI>
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
  202f0c:	9b05      	ldr	r3, [sp, #20]
  202f0e:	681b      	ldr	r3, [r3, #0]
  202f10:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
  202f12:	f7ff fe45 	bl	202ba0 <chVTGetSystemTimeX.lto_priv.1>
  202f16:	9003      	str	r0, [sp, #12]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
  202f18:	9b05      	ldr	r3, [sp, #20]
  202f1a:	68db      	ldr	r3, [r3, #12]
  202f1c:	9903      	ldr	r1, [sp, #12]
  202f1e:	4618      	mov	r0, r3
  202f20:	f7ff fd0e 	bl	202940 <chTimeDiffX.lto_priv.0>
  202f24:	9002      	str	r0, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
  202f26:	9b04      	ldr	r3, [sp, #16]
  202f28:	689b      	ldr	r3, [r3, #8]
  202f2a:	9a02      	ldr	r2, [sp, #8]
  202f2c:	429a      	cmp	r2, r3
  202f2e:	d369      	bcc.n	203004 <chVTDoTickI+0x104>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
  202f30:	9b05      	ldr	r3, [sp, #20]
  202f32:	68da      	ldr	r2, [r3, #12]
  202f34:	9b04      	ldr	r3, [sp, #16]
  202f36:	689b      	ldr	r3, [r3, #8]
  202f38:	4619      	mov	r1, r3
  202f3a:	4610      	mov	r0, r2
  202f3c:	f7ff fcf0 	bl	202920 <chTimeAddX>
  202f40:	9001      	str	r0, [sp, #4]
    vtlp->lasttime = lasttime;
  202f42:	9b05      	ldr	r3, [sp, #20]
  202f44:	9a01      	ldr	r2, [sp, #4]
  202f46:	60da      	str	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
  202f48:	9b04      	ldr	r3, [sp, #16]
  202f4a:	4618      	mov	r0, r3
  202f4c:	f7ff fdc0 	bl	202ad0 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
  202f50:	9b04      	ldr	r3, [sp, #16]
  202f52:	2200      	movs	r2, #0
  202f54:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
  202f56:	9b05      	ldr	r3, [sp, #20]
  202f58:	4618      	mov	r0, r3
  202f5a:	f7ff fd01 	bl	202960 <ch_dlist_isempty>
  202f5e:	4603      	mov	r3, r0
  202f60:	2b00      	cmp	r3, #0
  202f62:	d001      	beq.n	202f68 <chVTDoTickI+0x68>
      port_timer_stop_alarm();
  202f64:	f7ff fdd4 	bl	202b10 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
  202f68:	f7ff fe0a 	bl	202b80 <chSysUnlockFromISR.lto_priv.3>

    vtp->func(vtp, vtp->par);
  202f6c:	9b04      	ldr	r3, [sp, #16]
  202f6e:	68db      	ldr	r3, [r3, #12]
  202f70:	9a04      	ldr	r2, [sp, #16]
  202f72:	6912      	ldr	r2, [r2, #16]
  202f74:	4611      	mov	r1, r2
  202f76:	9804      	ldr	r0, [sp, #16]
  202f78:	4798      	blx	r3

    chSysLockFromISR();
  202f7a:	f7ff fde9 	bl	202b50 <chSysLockFromISR.lto_priv.3>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
  202f7e:	9b04      	ldr	r3, [sp, #16]
  202f80:	695b      	ldr	r3, [r3, #20]
  202f82:	2b00      	cmp	r3, #0
  202f84:	bf14      	ite	ne
  202f86:	2301      	movne	r3, #1
  202f88:	2300      	moveq	r3, #0
  202f8a:	b2db      	uxtb	r3, r3
  202f8c:	2b00      	cmp	r3, #0
  202f8e:	d0bd      	beq.n	202f0c <chVTDoTickI+0xc>
      sysinterval_t delta, delay;

      /* Refreshing the now delta after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
  202f90:	f7ff fe06 	bl	202ba0 <chVTGetSystemTimeX.lto_priv.1>
  202f94:	9003      	str	r0, [sp, #12]
      nowdelta = chTimeDiffX(lasttime, now);
  202f96:	9903      	ldr	r1, [sp, #12]
  202f98:	9801      	ldr	r0, [sp, #4]
  202f9a:	f7ff fcd1 	bl	202940 <chTimeDiffX.lto_priv.0>
  202f9e:	9002      	str	r0, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
  202fa0:	9b04      	ldr	r3, [sp, #16]
  202fa2:	695b      	ldr	r3, [r3, #20]
  202fa4:	9a02      	ldr	r2, [sp, #8]
  202fa6:	429a      	cmp	r2, r3
  202fa8:	d908      	bls.n	202fbc <chVTDoTickI+0xbc>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
  202faa:	4827      	ldr	r0, [pc, #156]	; (203048 <chVTDoTickI+0x148>)
  202fac:	f7ff f978 	bl	2022a0 <chSysHalt>
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
  202fb0:	2002      	movs	r0, #2
  202fb2:	f7ff f9b5 	bl	202320 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
  202fb6:	2300      	movs	r3, #0
  202fb8:	9306      	str	r3, [sp, #24]
  202fba:	e004      	b.n	202fc6 <chVTDoTickI+0xc6>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
  202fbc:	9b04      	ldr	r3, [sp, #16]
  202fbe:	695a      	ldr	r2, [r3, #20]
  202fc0:	9b02      	ldr	r3, [sp, #8]
  202fc2:	1ad3      	subs	r3, r2, r3
  202fc4:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
  202fc6:	9b05      	ldr	r3, [sp, #20]
  202fc8:	4618      	mov	r0, r3
  202fca:	f7ff fcc9 	bl	202960 <ch_dlist_isempty>
  202fce:	4603      	mov	r3, r0
  202fd0:	2b00      	cmp	r3, #0
  202fd2:	d006      	beq.n	202fe2 <chVTDoTickI+0xe2>

        vt_insert_first(vtlp, vtp, now, delay);
  202fd4:	9b06      	ldr	r3, [sp, #24]
  202fd6:	9a03      	ldr	r2, [sp, #12]
  202fd8:	9904      	ldr	r1, [sp, #16]
  202fda:	9805      	ldr	r0, [sp, #20]
  202fdc:	f7ff fe38 	bl	202c50 <vt_insert_first>

        return;
  202fe0:	e02d      	b.n	20303e <chVTDoTickI+0x13e>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
  202fe2:	9a02      	ldr	r2, [sp, #8]
  202fe4:	9b06      	ldr	r3, [sp, #24]
  202fe6:	4413      	add	r3, r2
  202fe8:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
  202fea:	9a07      	ldr	r2, [sp, #28]
  202fec:	9b02      	ldr	r3, [sp, #8]
  202fee:	429a      	cmp	r2, r3
  202ff0:	d201      	bcs.n	202ff6 <chVTDoTickI+0xf6>
        delta = delay;
  202ff2:	9b06      	ldr	r3, [sp, #24]
  202ff4:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
  202ff6:	9b05      	ldr	r3, [sp, #20]
  202ff8:	9904      	ldr	r1, [sp, #16]
  202ffa:	9a07      	ldr	r2, [sp, #28]
  202ffc:	4618      	mov	r0, r3
  202ffe:	f7ff fd0f 	bl	202a20 <ch_dlist_insert>
  while (true) {
  203002:	e783      	b.n	202f0c <chVTDoTickI+0xc>
      break;
  203004:	bf00      	nop
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
  203006:	9b05      	ldr	r3, [sp, #20]
  203008:	4618      	mov	r0, r3
  20300a:	f7ff fca9 	bl	202960 <ch_dlist_isempty>
  20300e:	4603      	mov	r3, r0
  203010:	2b00      	cmp	r3, #0
  203012:	d113      	bne.n	20303c <chVTDoTickI+0x13c>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  203014:	9b05      	ldr	r3, [sp, #20]
  203016:	68da      	ldr	r2, [r3, #12]
  203018:	9b02      	ldr	r3, [sp, #8]
  20301a:	441a      	add	r2, r3
  20301c:	9b05      	ldr	r3, [sp, #20]
  20301e:	60da      	str	r2, [r3, #12]
  vtp->dlist.delta -= nowdelta;
  203020:	9b04      	ldr	r3, [sp, #16]
  203022:	689a      	ldr	r2, [r3, #8]
  203024:	9b02      	ldr	r3, [sp, #8]
  203026:	1ad2      	subs	r2, r2, r3
  203028:	9b04      	ldr	r3, [sp, #16]
  20302a:	609a      	str	r2, [r3, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
  20302c:	9b04      	ldr	r3, [sp, #16]
  20302e:	689b      	ldr	r3, [r3, #8]
  203030:	461a      	mov	r2, r3
  203032:	9903      	ldr	r1, [sp, #12]
  203034:	9805      	ldr	r0, [sp, #20]
  203036:	f7ff fdcb 	bl	202bd0 <vt_set_alarm>
  20303a:	e000      	b.n	20303e <chVTDoTickI+0x13e>
    return;
  20303c:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  20303e:	b009      	add	sp, #36	; 0x24
  203040:	f85d fb04 	ldr.w	pc, [sp], #4
  203044:	200008d8 	.word	0x200008d8
  203048:	08004930 	.word	0x08004930
  20304c:	00000000 	.word	0x00000000

00203050 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
  203050:	b082      	sub	sp, #8
  203052:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
  203054:	9b01      	ldr	r3, [sp, #4]
  203056:	685b      	ldr	r3, [r3, #4]
  203058:	9a01      	ldr	r2, [sp, #4]
  20305a:	6812      	ldr	r2, [r2, #0]
  20305c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
  20305e:	9b01      	ldr	r3, [sp, #4]
  203060:	681b      	ldr	r3, [r3, #0]
  203062:	9a01      	ldr	r2, [sp, #4]
  203064:	6852      	ldr	r2, [r2, #4]
  203066:	605a      	str	r2, [r3, #4]
  return p;
  203068:	9b01      	ldr	r3, [sp, #4]
}
  20306a:	4618      	mov	r0, r3
  20306c:	b002      	add	sp, #8
  20306e:	4770      	bx	lr

00203070 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  203070:	b084      	sub	sp, #16
  203072:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
  203074:	9b01      	ldr	r3, [sp, #4]
  203076:	681b      	ldr	r3, [r3, #0]
  203078:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
  20307a:	9b03      	ldr	r3, [sp, #12]
  20307c:	681a      	ldr	r2, [r3, #0]
  20307e:	9b01      	ldr	r3, [sp, #4]
  203080:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
  203082:	9b01      	ldr	r3, [sp, #4]
  203084:	681b      	ldr	r3, [r3, #0]
  203086:	9a01      	ldr	r2, [sp, #4]
  203088:	605a      	str	r2, [r3, #4]
  return p;
  20308a:	9b03      	ldr	r3, [sp, #12]
}
  20308c:	4618      	mov	r0, r3
  20308e:	b004      	add	sp, #16
  203090:	4770      	bx	lr
  203092:	bf00      	nop
	...

002030a0 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
  2030a0:	b082      	sub	sp, #8
  2030a2:	9001      	str	r0, [sp, #4]
  2030a4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
  2030a6:	9b01      	ldr	r3, [sp, #4]
  2030a8:	681b      	ldr	r3, [r3, #0]
  2030aa:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
  2030ac:	9b01      	ldr	r3, [sp, #4]
  2030ae:	689a      	ldr	r2, [r3, #8]
  2030b0:	9b00      	ldr	r3, [sp, #0]
  2030b2:	689b      	ldr	r3, [r3, #8]
  2030b4:	429a      	cmp	r2, r3
  2030b6:	bf2c      	ite	cs
  2030b8:	2301      	movcs	r3, #1
  2030ba:	2300      	movcc	r3, #0
  2030bc:	b2db      	uxtb	r3, r3
  2030be:	2b00      	cmp	r3, #0
  2030c0:	d1f1      	bne.n	2030a6 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
  2030c2:	9b00      	ldr	r3, [sp, #0]
  2030c4:	9a01      	ldr	r2, [sp, #4]
  2030c6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
  2030c8:	9b01      	ldr	r3, [sp, #4]
  2030ca:	685a      	ldr	r2, [r3, #4]
  2030cc:	9b00      	ldr	r3, [sp, #0]
  2030ce:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  2030d0:	9b00      	ldr	r3, [sp, #0]
  2030d2:	685b      	ldr	r3, [r3, #4]
  2030d4:	9a00      	ldr	r2, [sp, #0]
  2030d6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
  2030d8:	9b01      	ldr	r3, [sp, #4]
  2030da:	9a00      	ldr	r2, [sp, #0]
  2030dc:	605a      	str	r2, [r3, #4]
  return p;
  2030de:	9b00      	ldr	r3, [sp, #0]
}
  2030e0:	4618      	mov	r0, r3
  2030e2:	b002      	add	sp, #8
  2030e4:	4770      	bx	lr
  2030e6:	bf00      	nop
	...

002030f0 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
  2030f0:	b082      	sub	sp, #8
  2030f2:	9001      	str	r0, [sp, #4]
  2030f4:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
  2030f6:	9b01      	ldr	r3, [sp, #4]
  2030f8:	681b      	ldr	r3, [r3, #0]
  2030fa:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
  2030fc:	9b01      	ldr	r3, [sp, #4]
  2030fe:	689a      	ldr	r2, [r3, #8]
  203100:	9b00      	ldr	r3, [sp, #0]
  203102:	689b      	ldr	r3, [r3, #8]
  203104:	429a      	cmp	r2, r3
  203106:	bf8c      	ite	hi
  203108:	2301      	movhi	r3, #1
  20310a:	2300      	movls	r3, #0
  20310c:	b2db      	uxtb	r3, r3
  20310e:	2b00      	cmp	r3, #0
  203110:	d1f1      	bne.n	2030f6 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
  203112:	9b00      	ldr	r3, [sp, #0]
  203114:	9a01      	ldr	r2, [sp, #4]
  203116:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
  203118:	9b01      	ldr	r3, [sp, #4]
  20311a:	685a      	ldr	r2, [r3, #4]
  20311c:	9b00      	ldr	r3, [sp, #0]
  20311e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  203120:	9b00      	ldr	r3, [sp, #0]
  203122:	685b      	ldr	r3, [r3, #4]
  203124:	9a00      	ldr	r2, [sp, #0]
  203126:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
  203128:	9b01      	ldr	r3, [sp, #4]
  20312a:	9a00      	ldr	r2, [sp, #0]
  20312c:	605a      	str	r2, [r3, #4]
  return p;
  20312e:	9b00      	ldr	r3, [sp, #0]
}
  203130:	4618      	mov	r0, r3
  203132:	b002      	add	sp, #8
  203134:	4770      	bx	lr
  203136:	bf00      	nop
	...

00203140 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
  203140:	b500      	push	{lr}
  203142:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  203144:	b672      	cpsid	i
}
  203146:	bf00      	nop
  203148:	2330      	movs	r3, #48	; 0x30
  20314a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20314c:	9b01      	ldr	r3, [sp, #4]
  20314e:	f383 8811 	msr	BASEPRI, r3
}
  203152:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  203154:	b662      	cpsie	i
}
  203156:	bf00      	nop
}
  203158:	bf00      	nop
}
  20315a:	bf00      	nop
  __dbg_check_lock_from_isr();
  20315c:	f7ff f940 	bl	2023e0 <__dbg_check_lock_from_isr>
}
  203160:	bf00      	nop
  203162:	b003      	add	sp, #12
  203164:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203170 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
  203170:	b500      	push	{lr}
  203172:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  203174:	f7ff f95c 	bl	202430 <__dbg_check_unlock_from_isr>
  203178:	2300      	movs	r3, #0
  20317a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20317c:	9b01      	ldr	r3, [sp, #4]
  20317e:	f383 8811 	msr	BASEPRI, r3
}
  203182:	bf00      	nop
}
  203184:	bf00      	nop
}
  203186:	bf00      	nop
}
  203188:	bf00      	nop
  20318a:	b003      	add	sp, #12
  20318c:	f85d fb04 	ldr.w	pc, [sp], #4

00203190 <chVTIsArmedI.lto_priv.1>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
  203190:	b500      	push	{lr}
  203192:	b083      	sub	sp, #12
  203194:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
  203196:	f7ff f9f3 	bl	202580 <chDbgCheckClassI>
  return (bool)(vtp->dlist.next != NULL);
  20319a:	9b01      	ldr	r3, [sp, #4]
  20319c:	681b      	ldr	r3, [r3, #0]
  20319e:	2b00      	cmp	r3, #0
  2031a0:	bf14      	ite	ne
  2031a2:	2301      	movne	r3, #1
  2031a4:	2300      	moveq	r3, #0
  2031a6:	b2db      	uxtb	r3, r3
}
  2031a8:	4618      	mov	r0, r3
  2031aa:	b003      	add	sp, #12
  2031ac:	f85d fb04 	ldr.w	pc, [sp], #4

002031b0 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t object
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
  2031b0:	b500      	push	{lr}
  2031b2:	b083      	sub	sp, #12
  2031b4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  2031b6:	f7ff f9e3 	bl	202580 <chDbgCheckClassI>

  sp->cnt++;
  2031ba:	9b01      	ldr	r3, [sp, #4]
  2031bc:	689b      	ldr	r3, [r3, #8]
  2031be:	1c5a      	adds	r2, r3, #1
  2031c0:	9b01      	ldr	r3, [sp, #4]
  2031c2:	609a      	str	r2, [r3, #8]
}
  2031c4:	bf00      	nop
  2031c6:	b003      	add	sp, #12
  2031c8:	f85d fb04 	ldr.w	pc, [sp], #4
  2031cc:	0000      	movs	r0, r0
	...

002031d0 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
  2031d0:	b500      	push	{lr}
  2031d2:	b083      	sub	sp, #12
  2031d4:	9001      	str	r0, [sp, #4]

  chDbgAssert((tp->state != CH_STATE_READY) &&
  2031d6:	9b01      	ldr	r3, [sp, #4]
  2031d8:	7f1b      	ldrb	r3, [r3, #28]
  2031da:	2b00      	cmp	r3, #0
  2031dc:	bf0c      	ite	eq
  2031de:	2301      	moveq	r3, #1
  2031e0:	2300      	movne	r3, #0
  2031e2:	b2db      	uxtb	r3, r3
  2031e4:	2b00      	cmp	r3, #0
  2031e6:	d108      	bne.n	2031fa <__sch_ready_behind+0x2a>
  2031e8:	9b01      	ldr	r3, [sp, #4]
  2031ea:	7f1b      	ldrb	r3, [r3, #28]
  2031ec:	2b0f      	cmp	r3, #15
  2031ee:	bf0c      	ite	eq
  2031f0:	2301      	moveq	r3, #1
  2031f2:	2300      	movne	r3, #0
  2031f4:	b2db      	uxtb	r3, r3
  2031f6:	2b00      	cmp	r3, #0
  2031f8:	d002      	beq.n	203200 <__sch_ready_behind+0x30>
  2031fa:	480d      	ldr	r0, [pc, #52]	; (203230 <__sch_ready_behind+0x60>)
  2031fc:	f7ff f850 	bl	2022a0 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);
  203200:	9b01      	ldr	r3, [sp, #4]
  203202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  203204:	4619      	mov	r1, r3
  203206:	9801      	ldr	r0, [sp, #4]
  203208:	f7ff fa6a 	bl	2026e0 <__trace_ready>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
  20320c:	9b01      	ldr	r3, [sp, #4]
  20320e:	2200      	movs	r2, #0
  203210:	771a      	strb	r2, [r3, #28]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
  203212:	9b01      	ldr	r3, [sp, #4]
  203214:	691b      	ldr	r3, [r3, #16]
  203216:	461a      	mov	r2, r3
  203218:	9b01      	ldr	r3, [sp, #4]
  20321a:	4619      	mov	r1, r3
  20321c:	4610      	mov	r0, r2
  20321e:	f7ff ff3f 	bl	2030a0 <ch_pqueue_insert_behind>
  203222:	4603      	mov	r3, r0
  203224:	bf00      	nop
  203226:	bf00      	nop
                                           &tp->hdr.pqueue));
}
  203228:	4618      	mov	r0, r3
  20322a:	b003      	add	sp, #12
  20322c:	f85d fb04 	ldr.w	pc, [sp], #4
  203230:	0800494c 	.word	0x0800494c
	...

00203240 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
  203240:	b500      	push	{lr}
  203242:	b083      	sub	sp, #12
  203244:	9001      	str	r0, [sp, #4]

  chDbgAssert((tp->state != CH_STATE_READY) &&
  203246:	9b01      	ldr	r3, [sp, #4]
  203248:	7f1b      	ldrb	r3, [r3, #28]
  20324a:	2b00      	cmp	r3, #0
  20324c:	bf0c      	ite	eq
  20324e:	2301      	moveq	r3, #1
  203250:	2300      	movne	r3, #0
  203252:	b2db      	uxtb	r3, r3
  203254:	2b00      	cmp	r3, #0
  203256:	d108      	bne.n	20326a <__sch_ready_ahead+0x2a>
  203258:	9b01      	ldr	r3, [sp, #4]
  20325a:	7f1b      	ldrb	r3, [r3, #28]
  20325c:	2b0f      	cmp	r3, #15
  20325e:	bf0c      	ite	eq
  203260:	2301      	moveq	r3, #1
  203262:	2300      	movne	r3, #0
  203264:	b2db      	uxtb	r3, r3
  203266:	2b00      	cmp	r3, #0
  203268:	d002      	beq.n	203270 <__sch_ready_ahead+0x30>
  20326a:	480d      	ldr	r0, [pc, #52]	; (2032a0 <__sch_ready_ahead+0x60>)
  20326c:	f7ff f818 	bl	2022a0 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);
  203270:	9b01      	ldr	r3, [sp, #4]
  203272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  203274:	4619      	mov	r1, r3
  203276:	9801      	ldr	r0, [sp, #4]
  203278:	f7ff fa32 	bl	2026e0 <__trace_ready>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
  20327c:	9b01      	ldr	r3, [sp, #4]
  20327e:	2200      	movs	r2, #0
  203280:	771a      	strb	r2, [r3, #28]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
  203282:	9b01      	ldr	r3, [sp, #4]
  203284:	691b      	ldr	r3, [r3, #16]
  203286:	461a      	mov	r2, r3
  203288:	9b01      	ldr	r3, [sp, #4]
  20328a:	4619      	mov	r1, r3
  20328c:	4610      	mov	r0, r2
  20328e:	f7ff ff2f 	bl	2030f0 <ch_pqueue_insert_ahead>
  203292:	4603      	mov	r3, r0
  203294:	bf00      	nop
  203296:	bf00      	nop
                                          &tp->hdr.pqueue));
}
  203298:	4618      	mov	r0, r3
  20329a:	b003      	add	sp, #12
  20329c:	f85d fb04 	ldr.w	pc, [sp], #4
  2032a0:	08004960 	.word	0x08004960
	...

002032b0 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
  2032b0:	b500      	push	{lr}
  2032b2:	b085      	sub	sp, #20
  2032b4:	9001      	str	r0, [sp, #4]
  2032b6:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
  2032b8:	9b00      	ldr	r3, [sp, #0]
  2032ba:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
  2032bc:	f7ff ff40 	bl	203140 <chSysLockFromISR.lto_priv.4>
  switch (tp->state) {
  2032c0:	9b03      	ldr	r3, [sp, #12]
  2032c2:	7f1b      	ldrb	r3, [r3, #28]
  2032c4:	2b0c      	cmp	r3, #12
  2032c6:	d82f      	bhi.n	203328 <__sch_wakeup+0x78>
  2032c8:	a201      	add	r2, pc, #4	; (adr r2, 2032d0 <__sch_wakeup+0x20>)
  2032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  2032ce:	bf00      	nop
  2032d0:	00203305 	.word	0x00203305
  2032d4:	00203329 	.word	0x00203329
  2032d8:	00203329 	.word	0x00203329
  2032dc:	0020330b 	.word	0x0020330b
  2032e0:	0020331f 	.word	0x0020331f
  2032e4:	00203315 	.word	0x00203315
  2032e8:	00203329 	.word	0x00203329
  2032ec:	0020331f 	.word	0x0020331f
  2032f0:	00203329 	.word	0x00203329
  2032f4:	00203329 	.word	0x00203329
  2032f8:	00203329 	.word	0x00203329
  2032fc:	00203329 	.word	0x00203329
  203300:	0020331f 	.word	0x0020331f
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
  203304:	f7ff ff34 	bl	203170 <chSysUnlockFromISR.lto_priv.4>
    return;
  203308:	e019      	b.n	20333e <__sch_wakeup+0x8e>
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
  20330a:	9b03      	ldr	r3, [sp, #12]
  20330c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20330e:	2200      	movs	r2, #0
  203310:	601a      	str	r2, [r3, #0]
    break;
  203312:	e00a      	b.n	20332a <__sch_wakeup+0x7a>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  203314:	9b03      	ldr	r3, [sp, #12]
  203316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  203318:	4618      	mov	r0, r3
  20331a:	f7ff ff49 	bl	2031b0 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
  20331e:	9b03      	ldr	r3, [sp, #12]
  203320:	4618      	mov	r0, r3
  203322:	f7ff fe95 	bl	203050 <ch_queue_dequeue.lto_priv.0>
    break;
  203326:	e000      	b.n	20332a <__sch_wakeup+0x7a>
  default:
    /* Any other state, nothing to do.*/
    break;
  203328:	bf00      	nop
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
  20332a:	9b03      	ldr	r3, [sp, #12]
  20332c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  203330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  203332:	9803      	ldr	r0, [sp, #12]
  203334:	f7ff ff4c 	bl	2031d0 <__sch_ready_behind>
  chSysUnlockFromISR();
  203338:	f7ff ff1a 	bl	203170 <chSysUnlockFromISR.lto_priv.4>

  return;
  20333c:	bf00      	nop
}
  20333e:	b005      	add	sp, #20
  203340:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203350 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
  203350:	b500      	push	{lr}
  203352:	b083      	sub	sp, #12
  203354:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  203356:	f7ff f913 	bl	202580 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  20335a:	9b01      	ldr	r3, [sp, #4]
  20335c:	2b00      	cmp	r3, #0
  20335e:	bf0c      	ite	eq
  203360:	2301      	moveq	r3, #1
  203362:	2300      	movne	r3, #0
  203364:	b2db      	uxtb	r3, r3
  203366:	2b00      	cmp	r3, #0
  203368:	d002      	beq.n	203370 <chSchReadyI+0x20>
  20336a:	4806      	ldr	r0, [pc, #24]	; (203384 <chSchReadyI+0x34>)
  20336c:	f7fe ff98 	bl	2022a0 <chSysHalt>
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
  203370:	9801      	ldr	r0, [sp, #4]
  203372:	f7ff ff2d 	bl	2031d0 <__sch_ready_behind>
  203376:	4603      	mov	r3, r0
  203378:	bf00      	nop
  20337a:	bf00      	nop
}
  20337c:	4618      	mov	r0, r3
  20337e:	b003      	add	sp, #12
  203380:	f85d fb04 	ldr.w	pc, [sp], #4
  203384:	08004974 	.word	0x08004974
	...

00203390 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  203390:	b500      	push	{lr}
  203392:	b089      	sub	sp, #36	; 0x24
  203394:	4603      	mov	r3, r0
  203396:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
  20339a:	4b26      	ldr	r3, [pc, #152]	; (203434 <chSchGoSleepS+0xa4>)
  20339c:	9307      	str	r3, [sp, #28]
  thread_t *otp = __instance_get_currthread(oip);
  20339e:	9b07      	ldr	r3, [sp, #28]
  2033a0:	68db      	ldr	r3, [r3, #12]
  2033a2:	9306      	str	r3, [sp, #24]
  thread_t *ntp;

  chDbgCheckClassS();
  2033a4:	f7ff f90c 	bl	2025c0 <chDbgCheckClassS>

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  2033a8:	f7fe ff92 	bl	2022d0 <chSysGetIdleThreadX>
  2033ac:	4602      	mov	r2, r0
  2033ae:	9b06      	ldr	r3, [sp, #24]
  2033b0:	4293      	cmp	r3, r2
  2033b2:	bf0c      	ite	eq
  2033b4:	2301      	moveq	r3, #1
  2033b6:	2300      	movne	r3, #0
  2033b8:	b2db      	uxtb	r3, r3
  2033ba:	2b00      	cmp	r3, #0
  2033bc:	d002      	beq.n	2033c4 <chSchGoSleepS+0x34>
  2033be:	481e      	ldr	r0, [pc, #120]	; (203438 <chSchGoSleepS+0xa8>)
  2033c0:	f7fe ff6e 	bl	2022a0 <chSysHalt>
  chDbgAssert(otp->owner == oip, "invalid core");
  2033c4:	9b06      	ldr	r3, [sp, #24]
  2033c6:	691b      	ldr	r3, [r3, #16]
  2033c8:	9a07      	ldr	r2, [sp, #28]
  2033ca:	429a      	cmp	r2, r3
  2033cc:	bf14      	ite	ne
  2033ce:	2301      	movne	r3, #1
  2033d0:	2300      	moveq	r3, #0
  2033d2:	b2db      	uxtb	r3, r3
  2033d4:	2b00      	cmp	r3, #0
  2033d6:	d002      	beq.n	2033de <chSchGoSleepS+0x4e>
  2033d8:	4817      	ldr	r0, [pc, #92]	; (203438 <chSchGoSleepS+0xa8>)
  2033da:	f7fe ff61 	bl	2022a0 <chSysHalt>

  /* New state.*/
  otp->state = newstate;
  2033de:	9b06      	ldr	r3, [sp, #24]
  2033e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
  2033e4:	771a      	strb	r2, [r3, #28]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  2033e6:	9b07      	ldr	r3, [sp, #28]
  2033e8:	4618      	mov	r0, r3
  2033ea:	f7ff fe41 	bl	203070 <ch_pqueue_remove_highest>
  2033ee:	9005      	str	r0, [sp, #20]
  ntp->state = CH_STATE_CURRENT;
  2033f0:	9b05      	ldr	r3, [sp, #20]
  2033f2:	2201      	movs	r2, #1
  2033f4:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
  2033f6:	9b07      	ldr	r3, [sp, #28]
  2033f8:	9a05      	ldr	r2, [sp, #20]
  2033fa:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
  2033fc:	9906      	ldr	r1, [sp, #24]
  2033fe:	9805      	ldr	r0, [sp, #20]
  203400:	f7ff f9a6 	bl	202750 <__trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  203404:	f3ef 8309 	mrs	r3, PSP
  203408:	9303      	str	r3, [sp, #12]
  return(result);
  20340a:	9b03      	ldr	r3, [sp, #12]
  20340c:	bf00      	nop
  20340e:	9304      	str	r3, [sp, #16]
  203410:	9b04      	ldr	r3, [sp, #16]
  203412:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  203416:	9b06      	ldr	r3, [sp, #24]
  203418:	695b      	ldr	r3, [r3, #20]
  20341a:	429a      	cmp	r2, r3
  20341c:	d202      	bcs.n	203424 <chSchGoSleepS+0x94>
  20341e:	4807      	ldr	r0, [pc, #28]	; (20343c <chSchGoSleepS+0xac>)
  203420:	f7fe ff3e 	bl	2022a0 <chSysHalt>
  203424:	9906      	ldr	r1, [sp, #24]
  203426:	9805      	ldr	r0, [sp, #20]
  203428:	f7fc ff5a 	bl	2002e0 <__port_switch>
}
  20342c:	bf00      	nop
  20342e:	b009      	add	sp, #36	; 0x24
  203430:	f85d fb04 	ldr.w	pc, [sp], #4
  203434:	200008c8 	.word	0x200008c8
  203438:	08004980 	.word	0x08004980
  20343c:	0800493c 	.word	0x0800493c

00203440 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
  203440:	b500      	push	{lr}
  203442:	b08b      	sub	sp, #44	; 0x2c
  203444:	4603      	mov	r3, r0
  203446:	9100      	str	r1, [sp, #0]
  203448:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
  20344c:	4b16      	ldr	r3, [pc, #88]	; (2034a8 <chSchGoSleepTimeoutS+0x68>)
  20344e:	68db      	ldr	r3, [r3, #12]
  203450:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();
  203452:	f7ff f8b5 	bl	2025c0 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
  203456:	9b00      	ldr	r3, [sp, #0]
  203458:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  20345c:	d016      	beq.n	20348c <chSchGoSleepTimeoutS+0x4c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
  20345e:	a803      	add	r0, sp, #12
  203460:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203462:	4a12      	ldr	r2, [pc, #72]	; (2034ac <chSchGoSleepTimeoutS+0x6c>)
  203464:	9900      	ldr	r1, [sp, #0]
  203466:	f7ff fc8b 	bl	202d80 <chVTDoSetI>
    chSchGoSleepS(newstate);
  20346a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  20346e:	4618      	mov	r0, r3
  203470:	f7ff ff8e 	bl	203390 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  203474:	ab03      	add	r3, sp, #12
  203476:	4618      	mov	r0, r3
  203478:	f7ff fe8a 	bl	203190 <chVTIsArmedI.lto_priv.1>
  20347c:	4603      	mov	r3, r0
  20347e:	2b00      	cmp	r3, #0
  203480:	d009      	beq.n	203496 <chSchGoSleepTimeoutS+0x56>
      chVTDoResetI(&vt);
  203482:	ab03      	add	r3, sp, #12
  203484:	4618      	mov	r0, r3
  203486:	f7ff fcbb 	bl	202e00 <chVTDoResetI>
  20348a:	e004      	b.n	203496 <chSchGoSleepTimeoutS+0x56>
    }
  }
  else {
    chSchGoSleepS(newstate);
  20348c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  203490:	4618      	mov	r0, r3
  203492:	f7ff ff7d 	bl	203390 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
  203496:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20349a:	bf00      	nop
  20349c:	bf00      	nop
}
  20349e:	4618      	mov	r0, r3
  2034a0:	b00b      	add	sp, #44	; 0x2c
  2034a2:	f85d fb04 	ldr.w	pc, [sp], #4
  2034a6:	bf00      	nop
  2034a8:	200008c8 	.word	0x200008c8
  2034ac:	002032b1 	.word	0x002032b1

002034b0 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  2034b0:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
  2034b2:	4b0b      	ldr	r3, [pc, #44]	; (2034e0 <chSchIsPreemptionRequired+0x30>)
  2034b4:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
  2034b6:	9b03      	ldr	r3, [sp, #12]
  2034b8:	68db      	ldr	r3, [r3, #12]
  2034ba:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
  2034bc:	9b03      	ldr	r3, [sp, #12]
  2034be:	681b      	ldr	r3, [r3, #0]
  2034c0:	689b      	ldr	r3, [r3, #8]
  2034c2:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
  2034c4:	9b02      	ldr	r3, [sp, #8]
  2034c6:	689b      	ldr	r3, [r3, #8]
  2034c8:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
  2034ca:	9a01      	ldr	r2, [sp, #4]
  2034cc:	9b00      	ldr	r3, [sp, #0]
  2034ce:	429a      	cmp	r2, r3
  2034d0:	bf8c      	ite	hi
  2034d2:	2301      	movhi	r3, #1
  2034d4:	2300      	movls	r3, #0
  2034d6:	b2db      	uxtb	r3, r3
#endif
}
  2034d8:	4618      	mov	r0, r3
  2034da:	b004      	add	sp, #16
  2034dc:	4770      	bx	lr
  2034de:	bf00      	nop
  2034e0:	200008c8 	.word	0x200008c8
	...

002034f0 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
  2034f0:	b500      	push	{lr}
  2034f2:	b087      	sub	sp, #28
  os_instance_t *oip = currcore;
  2034f4:	4b17      	ldr	r3, [pc, #92]	; (203554 <chSchDoPreemption+0x64>)
  2034f6:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
  2034f8:	9b05      	ldr	r3, [sp, #20]
  2034fa:	68db      	ldr	r3, [r3, #12]
  2034fc:	9304      	str	r3, [sp, #16]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  2034fe:	9b05      	ldr	r3, [sp, #20]
  203500:	4618      	mov	r0, r3
  203502:	f7ff fdb5 	bl	203070 <ch_pqueue_remove_highest>
  203506:	9003      	str	r0, [sp, #12]
  ntp->state = CH_STATE_CURRENT;
  203508:	9b03      	ldr	r3, [sp, #12]
  20350a:	2201      	movs	r2, #1
  20350c:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
  20350e:	9b05      	ldr	r3, [sp, #20]
  203510:	9a03      	ldr	r2, [sp, #12]
  203512:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
  203514:	9804      	ldr	r0, [sp, #16]
  203516:	f7ff fe93 	bl	203240 <__sch_ready_ahead>
  20351a:	9004      	str	r0, [sp, #16]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
  20351c:	9904      	ldr	r1, [sp, #16]
  20351e:	9803      	ldr	r0, [sp, #12]
  203520:	f7ff f916 	bl	202750 <__trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  203524:	f3ef 8309 	mrs	r3, PSP
  203528:	9301      	str	r3, [sp, #4]
  return(result);
  20352a:	9b01      	ldr	r3, [sp, #4]
  20352c:	9302      	str	r3, [sp, #8]
  20352e:	9b02      	ldr	r3, [sp, #8]
  203530:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  203534:	9b04      	ldr	r3, [sp, #16]
  203536:	695b      	ldr	r3, [r3, #20]
  203538:	429a      	cmp	r2, r3
  20353a:	d202      	bcs.n	203542 <chSchDoPreemption+0x52>
  20353c:	4806      	ldr	r0, [pc, #24]	; (203558 <chSchDoPreemption+0x68>)
  20353e:	f7fe feaf 	bl	2022a0 <chSysHalt>
  203542:	9904      	ldr	r1, [sp, #16]
  203544:	9803      	ldr	r0, [sp, #12]
  203546:	f7fc fecb 	bl	2002e0 <__port_switch>
}
  20354a:	bf00      	nop
  20354c:	b007      	add	sp, #28
  20354e:	f85d fb04 	ldr.w	pc, [sp], #4
  203552:	bf00      	nop
  203554:	200008c8 	.word	0x200008c8
  203558:	0800493c 	.word	0x0800493c
  20355c:	00000000 	.word	0x00000000

00203560 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to a @p rfcu_t object
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
  203560:	b082      	sub	sp, #8
  203562:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
  203564:	9b01      	ldr	r3, [sp, #4]
  203566:	2200      	movs	r2, #0
  203568:	601a      	str	r2, [r3, #0]
}
  20356a:	bf00      	nop
  20356c:	b002      	add	sp, #8
  20356e:	4770      	bx	lr

00203570 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to a @p system_debug_t object
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
  203570:	b082      	sub	sp, #8
  203572:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
  203574:	9b01      	ldr	r3, [sp, #4]
  203576:	2200      	movs	r2, #0
  203578:	601a      	str	r2, [r3, #0]

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
  20357a:	9b01      	ldr	r3, [sp, #4]
  20357c:	2200      	movs	r2, #0
  20357e:	605a      	str	r2, [r3, #4]
  sdp->lock_cnt = (cnt_t)1;
  203580:	9b01      	ldr	r3, [sp, #4]
  203582:	2201      	movs	r2, #1
  203584:	609a      	str	r2, [r3, #8]
#endif
}
  203586:	bf00      	nop
  203588:	b002      	add	sp, #8
  20358a:	4770      	bx	lr
  20358c:	0000      	movs	r0, r0
	...

00203590 <ch_queue_init.lto_priv.0>:
static inline void ch_queue_init(ch_queue_t *qp) {
  203590:	b082      	sub	sp, #8
  203592:	9001      	str	r0, [sp, #4]
  qp->next = qp;
  203594:	9b01      	ldr	r3, [sp, #4]
  203596:	9a01      	ldr	r2, [sp, #4]
  203598:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
  20359a:	9b01      	ldr	r3, [sp, #4]
  20359c:	9a01      	ldr	r2, [sp, #4]
  20359e:	605a      	str	r2, [r3, #4]
}
  2035a0:	bf00      	nop
  2035a2:	b002      	add	sp, #8
  2035a4:	4770      	bx	lr
  2035a6:	bf00      	nop
	...

002035b0 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
  2035b0:	b082      	sub	sp, #8
  2035b2:	9001      	str	r0, [sp, #4]
  2035b4:	9100      	str	r1, [sp, #0]
  p->next       = qp;
  2035b6:	9b00      	ldr	r3, [sp, #0]
  2035b8:	9a01      	ldr	r2, [sp, #4]
  2035ba:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
  2035bc:	9b01      	ldr	r3, [sp, #4]
  2035be:	685a      	ldr	r2, [r3, #4]
  2035c0:	9b00      	ldr	r3, [sp, #0]
  2035c2:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  2035c4:	9b00      	ldr	r3, [sp, #0]
  2035c6:	685b      	ldr	r3, [r3, #4]
  2035c8:	9a00      	ldr	r2, [sp, #0]
  2035ca:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
  2035cc:	9b01      	ldr	r3, [sp, #4]
  2035ce:	9a00      	ldr	r2, [sp, #0]
  2035d0:	605a      	str	r2, [r3, #4]
}
  2035d2:	bf00      	nop
  2035d4:	b002      	add	sp, #8
  2035d6:	4770      	bx	lr
	...

002035e0 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
  2035e0:	b082      	sub	sp, #8
  2035e2:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
  2035e4:	9b01      	ldr	r3, [sp, #4]
  2035e6:	9a01      	ldr	r2, [sp, #4]
  2035e8:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
  2035ea:	9b01      	ldr	r3, [sp, #4]
  2035ec:	9a01      	ldr	r2, [sp, #4]
  2035ee:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
  2035f0:	9b01      	ldr	r3, [sp, #4]
  2035f2:	2200      	movs	r2, #0
  2035f4:	609a      	str	r2, [r3, #8]
}
  2035f6:	bf00      	nop
  2035f8:	b002      	add	sp, #8
  2035fa:	4770      	bx	lr
  2035fc:	0000      	movs	r0, r0
	...

00203600 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
  203600:	b082      	sub	sp, #8
  203602:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
  203604:	9b01      	ldr	r3, [sp, #4]
  203606:	9a01      	ldr	r2, [sp, #4]
  203608:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
  20360a:	9b01      	ldr	r3, [sp, #4]
  20360c:	9a01      	ldr	r2, [sp, #4]
  20360e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
  203610:	9b01      	ldr	r3, [sp, #4]
  203612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  203616:	609a      	str	r2, [r3, #8]
}
  203618:	bf00      	nop
  20361a:	b002      	add	sp, #8
  20361c:	4770      	bx	lr
  20361e:	bf00      	nop

00203620 <port_timer_get_time.lto_priv.2>:
static inline systime_t port_timer_get_time(void) {
  203620:	b508      	push	{r3, lr}
  return stGetCounter();
  203622:	f7fd f885 	bl	200730 <stGetCounter>
  203626:	4603      	mov	r3, r0
}
  203628:	4618      	mov	r0, r3
  20362a:	bd08      	pop	{r3, pc}
  20362c:	0000      	movs	r0, r0
	...

00203630 <chVTGetSystemTimeX.lto_priv.2>:
static inline systime_t chVTGetSystemTimeX(void) {
  203630:	b508      	push	{r3, lr}
  return port_timer_get_time();
  203632:	f7ff fff5 	bl	203620 <port_timer_get_time.lto_priv.2>
  203636:	4603      	mov	r3, r0
}
  203638:	4618      	mov	r0, r3
  20363a:	bd08      	pop	{r3, pc}
  20363c:	0000      	movs	r0, r0
	...

00203640 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
  203640:	b530      	push	{r4, r5, lr}
  203642:	b083      	sub	sp, #12
  203644:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
  203646:	9b01      	ldr	r3, [sp, #4]
  203648:	4618      	mov	r0, r3
  20364a:	f7ff ffd9 	bl	203600 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  20364e:	9b01      	ldr	r3, [sp, #4]
  203650:	2200      	movs	r2, #0
  203652:	60da      	str	r2, [r3, #12]
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  203654:	9b01      	ldr	r3, [sp, #4]
  203656:	2202      	movs	r2, #2
  203658:	611a      	str	r2, [r3, #16]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
  20365a:	f7ff ffe9 	bl	203630 <chVTGetSystemTimeX.lto_priv.2>
  20365e:	4603      	mov	r3, r0
  203660:	2200      	movs	r2, #0
  203662:	461c      	mov	r4, r3
  203664:	4615      	mov	r5, r2
  203666:	9b01      	ldr	r3, [sp, #4]
  203668:	e9c3 4506 	strd	r4, r5, [r3, #24]
#endif
}
  20366c:	bf00      	nop
  20366e:	b003      	add	sp, #12
  203670:	bd30      	pop	{r4, r5, pc}
  203672:	bf00      	nop
	...

00203680 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
  203680:	b500      	push	{lr}
  203682:	b083      	sub	sp, #12
  203684:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
  203686:	9b01      	ldr	r3, [sp, #4]
  203688:	4618      	mov	r0, r3
  20368a:	f7ff ff81 	bl	203590 <ch_queue_init.lto_priv.0>
}
  20368e:	bf00      	nop
  203690:	b003      	add	sp, #12
  203692:	f85d fb04 	ldr.w	pc, [sp], #4
  203696:	bf00      	nop
	...

002036a0 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
  2036a0:	b082      	sub	sp, #8
  2036a2:	9001      	str	r0, [sp, #4]
}
  2036a4:	bf00      	nop
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
  2036a6:	e7fd      	b.n	2036a4 <__idle_thread+0x4>
	...

002036b0 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
  2036b0:	b500      	push	{lr}
  2036b2:	b093      	sub	sp, #76	; 0x4c
  2036b4:	9001      	str	r0, [sp, #4]
  2036b6:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
  2036b8:	2300      	movs	r3, #0
  2036ba:	9311      	str	r3, [sp, #68]	; 0x44
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  2036bc:	4a41      	ldr	r2, [pc, #260]	; (2037c4 <chInstanceObjectInit+0x114>)
  2036be:	9b11      	ldr	r3, [sp, #68]	; 0x44
  2036c0:	009b      	lsls	r3, r3, #2
  2036c2:	4413      	add	r3, r2
  2036c4:	685b      	ldr	r3, [r3, #4]
  2036c6:	2b00      	cmp	r3, #0
  2036c8:	bf14      	ite	ne
  2036ca:	2301      	movne	r3, #1
  2036cc:	2300      	moveq	r3, #0
  2036ce:	b2db      	uxtb	r3, r3
  2036d0:	2b00      	cmp	r3, #0
  2036d2:	d002      	beq.n	2036da <chInstanceObjectInit+0x2a>
  2036d4:	483c      	ldr	r0, [pc, #240]	; (2037c8 <chInstanceObjectInit+0x118>)
  2036d6:	f7fe fde3 	bl	2022a0 <chSysHalt>
  ch_system.instances[core_id] = oip;
  2036da:	4a3a      	ldr	r2, [pc, #232]	; (2037c4 <chInstanceObjectInit+0x114>)
  2036dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  2036de:	009b      	lsls	r3, r3, #2
  2036e0:	4413      	add	r3, r2
  2036e2:	9a01      	ldr	r2, [sp, #4]
  2036e4:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
  2036e6:	9b01      	ldr	r3, [sp, #4]
  2036e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
  2036ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
  2036ec:	9b01      	ldr	r3, [sp, #4]
  2036ee:	9a00      	ldr	r2, [sp, #0]
  2036f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Port initialization for the current instance.*/
  port_init(oip);
  2036f2:	9801      	ldr	r0, [sp, #4]
  2036f4:	f000 fec4 	bl	204480 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
  2036f8:	9b01      	ldr	r3, [sp, #4]
  2036fa:	4618      	mov	r0, r3
  2036fc:	f7ff ff70 	bl	2035e0 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
  203700:	9b01      	ldr	r3, [sp, #4]
  203702:	3330      	adds	r3, #48	; 0x30
  203704:	4618      	mov	r0, r3
  203706:	f7ff ffbb 	bl	203680 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
  20370a:	9b01      	ldr	r3, [sp, #4]
  20370c:	333c      	adds	r3, #60	; 0x3c
  20370e:	4618      	mov	r0, r3
  203710:	f7ff ff26 	bl	203560 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
  203714:	9b01      	ldr	r3, [sp, #4]
  203716:	3310      	adds	r3, #16
  203718:	4618      	mov	r0, r3
  20371a:	f7ff ff91 	bl	203640 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
  20371e:	9b01      	ldr	r3, [sp, #4]
  203720:	33e4      	adds	r3, #228	; 0xe4
  203722:	4618      	mov	r0, r3
  203724:	f7ff ff24 	bl	203570 <__dbg_object_init>

#if CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED
  /* Trace buffer initialization.*/
  __trace_object_init(&oip->trace_buffer);
  203728:	9b01      	ldr	r3, [sp, #4]
  20372a:	33f0      	adds	r3, #240	; 0xf0
  20372c:	4618      	mov	r0, r3
  20372e:	f7fe ffaf 	bl	202690 <__trace_object_init>

  /* Now this instructions flow becomes the main thread or the idle thread
     depending on the CH_CFG_NO_IDLE_THREAD setting.*/
  {
#if CH_CFG_NO_IDLE_THREAD == FALSE
    const THD_DECL(main_thd_desc,
  203732:	4b26      	ldr	r3, [pc, #152]	; (2037cc <chInstanceObjectInit+0x11c>)
  203734:	9303      	str	r3, [sp, #12]
  203736:	9b00      	ldr	r3, [sp, #0]
  203738:	685b      	ldr	r3, [r3, #4]
  20373a:	9304      	str	r3, [sp, #16]
  20373c:	9b00      	ldr	r3, [sp, #0]
  20373e:	689b      	ldr	r3, [r3, #8]
  203740:	9305      	str	r3, [sp, #20]
  203742:	2380      	movs	r3, #128	; 0x80
  203744:	9306      	str	r3, [sp, #24]
  203746:	2300      	movs	r3, #0
  203748:	9307      	str	r3, [sp, #28]
  20374a:	2300      	movs	r3, #0
  20374c:	9308      	str	r3, [sp, #32]
  20374e:	9b01      	ldr	r3, [sp, #4]
  203750:	9309      	str	r3, [sp, #36]	; 0x24
                   "main", oicp->cstack_base, oicp->cstack_end,
                   NORMALPRIO, NULL, NULL, oip
    );

    oip->rlist.current = chThdObjectInit(&oip->mainthread, &main_thd_desc);
  203752:	9b01      	ldr	r3, [sp, #4]
  203754:	3394      	adds	r3, #148	; 0x94
  203756:	aa03      	add	r2, sp, #12
  203758:	4611      	mov	r1, r2
  20375a:	4618      	mov	r0, r3
  20375c:	f000 f978 	bl	203a50 <chThdObjectInit>
  203760:	4602      	mov	r2, r0
  203762:	9b01      	ldr	r3, [sp, #4]
  203764:	60da      	str	r2, [r3, #12]
    oip->rlist.current = chThdObjectInit(&oip->idlethread, &idle_thd_desc);
#endif
  }

#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(oip, oip->rlist.current);
  203766:	9b01      	ldr	r3, [sp, #4]
  203768:	f103 0230 	add.w	r2, r3, #48	; 0x30
  20376c:	9b01      	ldr	r3, [sp, #4]
  20376e:	68db      	ldr	r3, [r3, #12]
  203770:	3324      	adds	r3, #36	; 0x24
  203772:	4619      	mov	r1, r3
  203774:	4610      	mov	r0, r2
  203776:	f7ff ff1b 	bl	2035b0 <ch_queue_insert.lto_priv.0>
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
  20377a:	9b01      	ldr	r3, [sp, #4]
  20377c:	68db      	ldr	r3, [r3, #12]
  20377e:	2201      	movs	r2, #1
  203780:	771a      	strb	r2, [r3, #28]
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    const THD_DECL(idle_thd_desc,
  203782:	4b13      	ldr	r3, [pc, #76]	; (2037d0 <chInstanceObjectInit+0x120>)
  203784:	930a      	str	r3, [sp, #40]	; 0x28
  203786:	9b00      	ldr	r3, [sp, #0]
  203788:	68db      	ldr	r3, [r3, #12]
  20378a:	930b      	str	r3, [sp, #44]	; 0x2c
  20378c:	9b00      	ldr	r3, [sp, #0]
  20378e:	691b      	ldr	r3, [r3, #16]
  203790:	930c      	str	r3, [sp, #48]	; 0x30
  203792:	2301      	movs	r3, #1
  203794:	930d      	str	r3, [sp, #52]	; 0x34
  203796:	4b0f      	ldr	r3, [pc, #60]	; (2037d4 <chInstanceObjectInit+0x124>)
  203798:	930e      	str	r3, [sp, #56]	; 0x38
  20379a:	2300      	movs	r3, #0
  20379c:	930f      	str	r3, [sp, #60]	; 0x3c
  20379e:	9b01      	ldr	r3, [sp, #4]
  2037a0:	9310      	str	r3, [sp, #64]	; 0x40
                   "idle", oicp->idlestack_base, oicp->idlestack_end,
                   IDLEPRIO, __idle_thread, NULL, oip
    );

#if CH_DBG_FILL_THREADS == TRUE
    __thd_stackfill((uint8_t *)idle_thd_desc.wbase,
  2037a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    (uint8_t *)idle_thd_desc.wend);
  2037a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __thd_stackfill((uint8_t *)idle_thd_desc.wbase,
  2037a6:	4611      	mov	r1, r2
  2037a8:	4618      	mov	r0, r3
  2037aa:	f000 f939 	bl	203a20 <__thd_stackfill>
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdSpawnRunningI(&oip->idlethread, &idle_thd_desc);
  2037ae:	9b01      	ldr	r3, [sp, #4]
  2037b0:	3344      	adds	r3, #68	; 0x44
  2037b2:	aa0a      	add	r2, sp, #40	; 0x28
  2037b4:	4611      	mov	r1, r2
  2037b6:	4618      	mov	r0, r3
  2037b8:	f000 fa42 	bl	203c40 <chThdSpawnRunningI>
  }
#endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
}
  2037bc:	bf00      	nop
  2037be:	b013      	add	sp, #76	; 0x4c
  2037c0:	f85d fb04 	ldr.w	pc, [sp], #4
  2037c4:	200008b8 	.word	0x200008b8
  2037c8:	080049a0 	.word	0x080049a0
  2037cc:	08004990 	.word	0x08004990
  2037d0:	08004998 	.word	0x08004998
  2037d4:	002036a1 	.word	0x002036a1
	...

002037e0 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
  2037e0:	b082      	sub	sp, #8
  2037e2:	9001      	str	r0, [sp, #4]
  lp->next = lp;
  2037e4:	9b01      	ldr	r3, [sp, #4]
  2037e6:	9a01      	ldr	r2, [sp, #4]
  2037e8:	601a      	str	r2, [r3, #0]
}
  2037ea:	bf00      	nop
  2037ec:	b002      	add	sp, #8
  2037ee:	4770      	bx	lr

002037f0 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
  2037f0:	b082      	sub	sp, #8
  2037f2:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
  2037f4:	9b01      	ldr	r3, [sp, #4]
  2037f6:	681b      	ldr	r3, [r3, #0]
  2037f8:	9a01      	ldr	r2, [sp, #4]
  2037fa:	429a      	cmp	r2, r3
  2037fc:	bf14      	ite	ne
  2037fe:	2301      	movne	r3, #1
  203800:	2300      	moveq	r3, #0
  203802:	b2db      	uxtb	r3, r3
}
  203804:	4618      	mov	r0, r3
  203806:	b002      	add	sp, #8
  203808:	4770      	bx	lr
  20380a:	bf00      	nop
  20380c:	0000      	movs	r0, r0
	...

00203810 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
  203810:	b084      	sub	sp, #16
  203812:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
  203814:	9b01      	ldr	r3, [sp, #4]
  203816:	681b      	ldr	r3, [r3, #0]
  203818:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
  20381a:	9b03      	ldr	r3, [sp, #12]
  20381c:	681a      	ldr	r2, [r3, #0]
  20381e:	9b01      	ldr	r3, [sp, #4]
  203820:	601a      	str	r2, [r3, #0]
  return p;
  203822:	9b03      	ldr	r3, [sp, #12]
}
  203824:	4618      	mov	r0, r3
  203826:	b004      	add	sp, #16
  203828:	4770      	bx	lr
  20382a:	bf00      	nop
  20382c:	0000      	movs	r0, r0
	...

00203830 <ch_queue_init.lto_priv.1>:
static inline void ch_queue_init(ch_queue_t *qp) {
  203830:	b082      	sub	sp, #8
  203832:	9001      	str	r0, [sp, #4]
  qp->next = qp;
  203834:	9b01      	ldr	r3, [sp, #4]
  203836:	9a01      	ldr	r2, [sp, #4]
  203838:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
  20383a:	9b01      	ldr	r3, [sp, #4]
  20383c:	9a01      	ldr	r2, [sp, #4]
  20383e:	605a      	str	r2, [r3, #4]
}
  203840:	bf00      	nop
  203842:	b002      	add	sp, #8
  203844:	4770      	bx	lr
  203846:	bf00      	nop
	...

00203850 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
  203850:	b082      	sub	sp, #8
  203852:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
  203854:	9b01      	ldr	r3, [sp, #4]
  203856:	681b      	ldr	r3, [r3, #0]
  203858:	9a01      	ldr	r2, [sp, #4]
  20385a:	429a      	cmp	r2, r3
  20385c:	bf14      	ite	ne
  20385e:	2301      	movne	r3, #1
  203860:	2300      	moveq	r3, #0
  203862:	b2db      	uxtb	r3, r3
}
  203864:	4618      	mov	r0, r3
  203866:	b002      	add	sp, #8
  203868:	4770      	bx	lr
  20386a:	bf00      	nop
  20386c:	0000      	movs	r0, r0
	...

00203870 <ch_queue_insert.lto_priv.1>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
  203870:	b082      	sub	sp, #8
  203872:	9001      	str	r0, [sp, #4]
  203874:	9100      	str	r1, [sp, #0]
  p->next       = qp;
  203876:	9b00      	ldr	r3, [sp, #0]
  203878:	9a01      	ldr	r2, [sp, #4]
  20387a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
  20387c:	9b01      	ldr	r3, [sp, #4]
  20387e:	685a      	ldr	r2, [r3, #4]
  203880:	9b00      	ldr	r3, [sp, #0]
  203882:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  203884:	9b00      	ldr	r3, [sp, #0]
  203886:	685b      	ldr	r3, [r3, #4]
  203888:	9a00      	ldr	r2, [sp, #0]
  20388a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
  20388c:	9b01      	ldr	r3, [sp, #4]
  20388e:	9a00      	ldr	r2, [sp, #0]
  203890:	605a      	str	r2, [r3, #4]
}
  203892:	bf00      	nop
  203894:	b002      	add	sp, #8
  203896:	4770      	bx	lr
	...

002038a0 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  2038a0:	b084      	sub	sp, #16
  2038a2:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
  2038a4:	9b01      	ldr	r3, [sp, #4]
  2038a6:	681b      	ldr	r3, [r3, #0]
  2038a8:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
  2038aa:	9b03      	ldr	r3, [sp, #12]
  2038ac:	681a      	ldr	r2, [r3, #0]
  2038ae:	9b01      	ldr	r3, [sp, #4]
  2038b0:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
  2038b2:	9b01      	ldr	r3, [sp, #4]
  2038b4:	681b      	ldr	r3, [r3, #0]
  2038b6:	9a01      	ldr	r2, [sp, #4]
  2038b8:	605a      	str	r2, [r3, #4]
  return p;
  2038ba:	9b03      	ldr	r3, [sp, #12]
}
  2038bc:	4618      	mov	r0, r3
  2038be:	b004      	add	sp, #16
  2038c0:	4770      	bx	lr
  2038c2:	bf00      	nop
	...

002038d0 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
  2038d0:	b082      	sub	sp, #8
  2038d2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
  2038d4:	9b01      	ldr	r3, [sp, #4]
  2038d6:	685b      	ldr	r3, [r3, #4]
  2038d8:	9a01      	ldr	r2, [sp, #4]
  2038da:	6812      	ldr	r2, [r2, #0]
  2038dc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
  2038de:	9b01      	ldr	r3, [sp, #4]
  2038e0:	681b      	ldr	r3, [r3, #0]
  2038e2:	9a01      	ldr	r2, [sp, #4]
  2038e4:	6852      	ldr	r2, [r2, #4]
  2038e6:	605a      	str	r2, [r3, #4]
  return p;
  2038e8:	9b01      	ldr	r3, [sp, #4]
}
  2038ea:	4618      	mov	r0, r3
  2038ec:	b002      	add	sp, #8
  2038ee:	4770      	bx	lr

002038f0 <chSysLock.lto_priv.8>:
static inline void chSysLock(void) {
  2038f0:	b500      	push	{lr}
  2038f2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  2038f4:	b672      	cpsid	i
}
  2038f6:	bf00      	nop
  2038f8:	2330      	movs	r3, #48	; 0x30
  2038fa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2038fc:	9b01      	ldr	r3, [sp, #4]
  2038fe:	f383 8811 	msr	BASEPRI, r3
}
  203902:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  203904:	b662      	cpsie	i
}
  203906:	bf00      	nop
}
  203908:	bf00      	nop
  __dbg_check_lock();
  20390a:	f7fe fd19 	bl	202340 <__dbg_check_lock>
}
  20390e:	bf00      	nop
  203910:	b003      	add	sp, #12
  203912:	f85d fb04 	ldr.w	pc, [sp], #4
  203916:	bf00      	nop
	...

00203920 <chSysUnlock.lto_priv.8>:
static inline void chSysUnlock(void) {
  203920:	b500      	push	{lr}
  203922:	b083      	sub	sp, #12
  __dbg_check_unlock();
  203924:	f7fe fd34 	bl	202390 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  203928:	4b12      	ldr	r3, [pc, #72]	; (203974 <chSysUnlock.lto_priv.8+0x54>)
  20392a:	681b      	ldr	r3, [r3, #0]
  20392c:	4a11      	ldr	r2, [pc, #68]	; (203974 <chSysUnlock.lto_priv.8+0x54>)
  20392e:	4293      	cmp	r3, r2
  203930:	bf14      	ite	ne
  203932:	2301      	movne	r3, #1
  203934:	2300      	moveq	r3, #0
  203936:	b2db      	uxtb	r3, r3
  203938:	2b00      	cmp	r3, #0
  20393a:	d00f      	beq.n	20395c <chSysUnlock.lto_priv.8+0x3c>
  20393c:	4b0d      	ldr	r3, [pc, #52]	; (203974 <chSysUnlock.lto_priv.8+0x54>)
  20393e:	68db      	ldr	r3, [r3, #12]
  203940:	689a      	ldr	r2, [r3, #8]
  203942:	4b0c      	ldr	r3, [pc, #48]	; (203974 <chSysUnlock.lto_priv.8+0x54>)
  203944:	681b      	ldr	r3, [r3, #0]
  203946:	689b      	ldr	r3, [r3, #8]
  203948:	429a      	cmp	r2, r3
  20394a:	bf34      	ite	cc
  20394c:	2301      	movcc	r3, #1
  20394e:	2300      	movcs	r3, #0
  203950:	b2db      	uxtb	r3, r3
  203952:	2b00      	cmp	r3, #0
  203954:	d002      	beq.n	20395c <chSysUnlock.lto_priv.8+0x3c>
  203956:	4808      	ldr	r0, [pc, #32]	; (203978 <chSysUnlock.lto_priv.8+0x58>)
  203958:	f7fe fca2 	bl	2022a0 <chSysHalt>
  20395c:	2300      	movs	r3, #0
  20395e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203960:	9b01      	ldr	r3, [sp, #4]
  203962:	f383 8811 	msr	BASEPRI, r3
}
  203966:	bf00      	nop
}
  203968:	bf00      	nop
}
  20396a:	bf00      	nop
  20396c:	b003      	add	sp, #12
  20396e:	f85d fb04 	ldr.w	pc, [sp], #4
  203972:	bf00      	nop
  203974:	200008c8 	.word	0x200008c8
  203978:	080049e0 	.word	0x080049e0
  20397c:	00000000 	.word	0x00000000

00203980 <chThdGetSelfX.lto_priv.0>:
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
  203980:	4b01      	ldr	r3, [pc, #4]	; (203988 <chThdGetSelfX.lto_priv.0+0x8>)
  203982:	68db      	ldr	r3, [r3, #12]
}
  203984:	4618      	mov	r0, r3
  203986:	4770      	bx	lr
  203988:	200008c8 	.word	0x200008c8
  20398c:	00000000 	.word	0x00000000

00203990 <chThdSleepS>:
 *                        state.
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
  203990:	b500      	push	{lr}
  203992:	b083      	sub	sp, #12
  203994:	9001      	str	r0, [sp, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);
  203996:	9b01      	ldr	r3, [sp, #4]
  203998:	2b00      	cmp	r3, #0
  20399a:	bf0c      	ite	eq
  20399c:	2301      	moveq	r3, #1
  20399e:	2300      	movne	r3, #0
  2039a0:	b2db      	uxtb	r3, r3
  2039a2:	2b00      	cmp	r3, #0
  2039a4:	d002      	beq.n	2039ac <chThdSleepS+0x1c>
  2039a6:	4805      	ldr	r0, [pc, #20]	; (2039bc <chThdSleepS+0x2c>)
  2039a8:	f7fe fc7a 	bl	2022a0 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
  2039ac:	9901      	ldr	r1, [sp, #4]
  2039ae:	2008      	movs	r0, #8
  2039b0:	f7ff fd46 	bl	203440 <chSchGoSleepTimeoutS>
}
  2039b4:	bf00      	nop
  2039b6:	b003      	add	sp, #12
  2039b8:	f85d fb04 	ldr.w	pc, [sp], #4
  2039bc:	080049f8 	.word	0x080049f8

002039c0 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  2039c0:	b500      	push	{lr}
  2039c2:	b085      	sub	sp, #20
  2039c4:	9001      	str	r0, [sp, #4]
  2039c6:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");
  2039c8:	9b01      	ldr	r3, [sp, #4]
  2039ca:	4618      	mov	r0, r3
  2039cc:	f7ff ff40 	bl	203850 <ch_queue_notempty.lto_priv.0>
  2039d0:	4603      	mov	r3, r0
  2039d2:	f083 0301 	eor.w	r3, r3, #1
  2039d6:	b2db      	uxtb	r3, r3
  2039d8:	2b00      	cmp	r3, #0
  2039da:	d002      	beq.n	2039e2 <chThdDoDequeueNextI+0x22>
  2039dc:	480e      	ldr	r0, [pc, #56]	; (203a18 <chThdDoDequeueNextI+0x58>)
  2039de:	f7fe fc5f 	bl	2022a0 <chSysHalt>

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
  2039e2:	9b01      	ldr	r3, [sp, #4]
  2039e4:	4618      	mov	r0, r3
  2039e6:	f7ff ff5b 	bl	2038a0 <ch_queue_fifo_remove.lto_priv.0>
  2039ea:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
  2039ec:	9b03      	ldr	r3, [sp, #12]
  2039ee:	7f1b      	ldrb	r3, [r3, #28]
  2039f0:	2b04      	cmp	r3, #4
  2039f2:	bf14      	ite	ne
  2039f4:	2301      	movne	r3, #1
  2039f6:	2300      	moveq	r3, #0
  2039f8:	b2db      	uxtb	r3, r3
  2039fa:	2b00      	cmp	r3, #0
  2039fc:	d002      	beq.n	203a04 <chThdDoDequeueNextI+0x44>
  2039fe:	4806      	ldr	r0, [pc, #24]	; (203a18 <chThdDoDequeueNextI+0x58>)
  203a00:	f7fe fc4e 	bl	2022a0 <chSysHalt>

  tp->u.rdymsg = msg;
  203a04:	9b03      	ldr	r3, [sp, #12]
  203a06:	9a00      	ldr	r2, [sp, #0]
  203a08:	635a      	str	r2, [r3, #52]	; 0x34
  (void) chSchReadyI(tp);
  203a0a:	9803      	ldr	r0, [sp, #12]
  203a0c:	f7ff fca0 	bl	203350 <chSchReadyI>
}
  203a10:	bf00      	nop
  203a12:	b005      	add	sp, #20
  203a14:	f85d fb04 	ldr.w	pc, [sp], #4
  203a18:	08004a1c 	.word	0x08004a1c
  203a1c:	00000000 	.word	0x00000000

00203a20 <__thd_stackfill>:
 * @param[in] startp    first address to fill
 * @param[in] endp      last address to fill +1
 *
 * @notapi
 */
void __thd_stackfill(uint8_t *startp, uint8_t *endp) {
  203a20:	b082      	sub	sp, #8
  203a22:	9001      	str	r0, [sp, #4]
  203a24:	9100      	str	r1, [sp, #0]

  do {
    *startp++ = CH_DBG_STACK_FILL_VALUE;
  203a26:	9b01      	ldr	r3, [sp, #4]
  203a28:	1c5a      	adds	r2, r3, #1
  203a2a:	9201      	str	r2, [sp, #4]
  203a2c:	2255      	movs	r2, #85	; 0x55
  203a2e:	701a      	strb	r2, [r3, #0]
  } while (likely(startp < endp));
  203a30:	9a01      	ldr	r2, [sp, #4]
  203a32:	9b00      	ldr	r3, [sp, #0]
  203a34:	429a      	cmp	r2, r3
  203a36:	bf34      	ite	cc
  203a38:	2301      	movcc	r3, #1
  203a3a:	2300      	movcs	r3, #0
  203a3c:	b2db      	uxtb	r3, r3
  203a3e:	2b00      	cmp	r3, #0
  203a40:	d1f1      	bne.n	203a26 <__thd_stackfill+0x6>
}
  203a42:	bf00      	nop
  203a44:	bf00      	nop
  203a46:	b002      	add	sp, #8
  203a48:	4770      	bx	lr
  203a4a:	bf00      	nop
  203a4c:	0000      	movs	r0, r0
	...

00203a50 <chThdObjectInit>:
 * @return              The same thread pointer passed as parameter.
 *
 * @init
 */
thread_t *chThdObjectInit(thread_t *tp,
                          const thread_descriptor_t *tdp) {
  203a50:	b500      	push	{lr}
  203a52:	b083      	sub	sp, #12
  203a54:	9001      	str	r0, [sp, #4]
  203a56:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);
  203a58:	9b01      	ldr	r3, [sp, #4]
  203a5a:	2b00      	cmp	r3, #0
  203a5c:	bf0c      	ite	eq
  203a5e:	2301      	moveq	r3, #1
  203a60:	2300      	movne	r3, #0
  203a62:	b2db      	uxtb	r3, r3
  203a64:	2b00      	cmp	r3, #0
  203a66:	d002      	beq.n	203a6e <chThdObjectInit+0x1e>
  203a68:	4829      	ldr	r0, [pc, #164]	; (203b10 <chThdObjectInit+0xc0>)
  203a6a:	f7fe fc19 	bl	2022a0 <chSysHalt>
  chDbgCheck(tdp != NULL);
  203a6e:	9b00      	ldr	r3, [sp, #0]
  203a70:	2b00      	cmp	r3, #0
  203a72:	bf0c      	ite	eq
  203a74:	2301      	moveq	r3, #1
  203a76:	2300      	movne	r3, #0
  203a78:	b2db      	uxtb	r3, r3
  203a7a:	2b00      	cmp	r3, #0
  203a7c:	d002      	beq.n	203a84 <chThdObjectInit+0x34>
  203a7e:	4824      	ldr	r0, [pc, #144]	; (203b10 <chThdObjectInit+0xc0>)
  203a80:	f7fe fc0e 	bl	2022a0 <chSysHalt>

  /* Stack boundaries.*/
  tp->wabase = (void *)tdp->wbase;
  203a84:	9b00      	ldr	r3, [sp, #0]
  203a86:	685a      	ldr	r2, [r3, #4]
  203a88:	9b01      	ldr	r3, [sp, #4]
  203a8a:	615a      	str	r2, [r3, #20]
  tp->waend  = (void *)tdp->wend;
  203a8c:	9b00      	ldr	r3, [sp, #0]
  203a8e:	689a      	ldr	r2, [r3, #8]
  203a90:	9b01      	ldr	r3, [sp, #4]
  203a92:	619a      	str	r2, [r3, #24]

  /* Thread-related fields.*/
  tp->hdr.pqueue.prio   = tdp->prio;
  203a94:	9b00      	ldr	r3, [sp, #0]
  203a96:	68da      	ldr	r2, [r3, #12]
  203a98:	9b01      	ldr	r3, [sp, #4]
  203a9a:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
  203a9c:	9b01      	ldr	r3, [sp, #4]
  203a9e:	2202      	movs	r2, #2
  203aa0:	771a      	strb	r2, [r3, #28]
  tp->flags             = (tmode_t)0;
  203aa2:	9b01      	ldr	r3, [sp, #4]
  203aa4:	2200      	movs	r2, #0
  203aa6:	775a      	strb	r2, [r3, #29]
  if (tdp->owner != NULL) {
  203aa8:	9b00      	ldr	r3, [sp, #0]
  203aaa:	699b      	ldr	r3, [r3, #24]
  203aac:	2b00      	cmp	r3, #0
  203aae:	d004      	beq.n	203aba <chThdObjectInit+0x6a>
    tp->owner           = tdp->owner;
  203ab0:	9b00      	ldr	r3, [sp, #0]
  203ab2:	699a      	ldr	r2, [r3, #24]
  203ab4:	9b01      	ldr	r3, [sp, #4]
  203ab6:	611a      	str	r2, [r3, #16]
  203ab8:	e002      	b.n	203ac0 <chThdObjectInit+0x70>
  }
  else {
    tp->owner           = currcore;
  203aba:	9b01      	ldr	r3, [sp, #4]
  203abc:	4a15      	ldr	r2, [pc, #84]	; (203b14 <chThdObjectInit+0xc4>)
  203abe:	611a      	str	r2, [r3, #16]
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->dispose           = NULL;
  203ac0:	9b01      	ldr	r3, [sp, #4]
  203ac2:	2200      	movs	r2, #0
  203ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  tp->object            = NULL;
  203ac6:	9b01      	ldr	r3, [sp, #4]
  203ac8:	2200      	movs	r2, #0
  203aca:	631a      	str	r2, [r3, #48]	; 0x30
#endif
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
  203acc:	9b01      	ldr	r3, [sp, #4]
  203ace:	3338      	adds	r3, #56	; 0x38
  203ad0:	4618      	mov	r0, r3
  203ad2:	f7ff fe85 	bl	2037e0 <ch_list_init>
#endif

  /* Mutex-related fields.*/
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = tdp->prio;
  203ad6:	9b00      	ldr	r3, [sp, #0]
  203ad8:	68da      	ldr	r2, [r3, #12]
  203ada:	9b01      	ldr	r3, [sp, #4]
  203adc:	64da      	str	r2, [r3, #76]	; 0x4c
  tp->mtxlist           = NULL;
  203ade:	9b01      	ldr	r3, [sp, #4]
  203ae0:	2200      	movs	r2, #0
  203ae2:	649a      	str	r2, [r3, #72]	; 0x48
#endif

  /* Events-related fields.*/
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
  203ae4:	9b01      	ldr	r3, [sp, #4]
  203ae6:	2200      	movs	r2, #0
  203ae8:	645a      	str	r2, [r3, #68]	; 0x44
  tp->time              = (systime_t)0;
#endif

  /* Registry-related fields.*/
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
  203aea:	9b01      	ldr	r3, [sp, #4]
  203aec:	2201      	movs	r2, #1
  203aee:	779a      	strb	r2, [r3, #30]
  tp->name              = tdp->name;
  203af0:	9b00      	ldr	r3, [sp, #0]
  203af2:	681a      	ldr	r2, [r3, #0]
  203af4:	9b01      	ldr	r3, [sp, #4]
  203af6:	621a      	str	r2, [r3, #32]
#endif

  /* Messages-related fields.*/
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
  203af8:	9b01      	ldr	r3, [sp, #4]
  203afa:	333c      	adds	r3, #60	; 0x3c
  203afc:	4618      	mov	r0, r3
  203afe:	f7ff fe97 	bl	203830 <ch_queue_init.lto_priv.1>
#endif

  /* Custom thread initialization code.*/
  CH_CFG_THREAD_INIT_HOOK(tp);

  return tp;
  203b02:	9b01      	ldr	r3, [sp, #4]
  203b04:	bf00      	nop
  203b06:	bf00      	nop
}
  203b08:	4618      	mov	r0, r3
  203b0a:	b003      	add	sp, #12
  203b0c:	f85d fb04 	ldr.w	pc, [sp], #4
  203b10:	080049b8 	.word	0x080049b8
  203b14:	200008c8 	.word	0x200008c8
	...

00203b20 <chThdSpawnSuspendedI>:
 * @return              Reference to the @p thread_t object.
 *
 * @api
 */
thread_t *chThdSpawnSuspendedI(thread_t *tp,
                               const thread_descriptor_t *tdp) {
  203b20:	b500      	push	{lr}
  203b22:	b083      	sub	sp, #12
  203b24:	9001      	str	r0, [sp, #4]
  203b26:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);
  203b28:	9b01      	ldr	r3, [sp, #4]
  203b2a:	2b00      	cmp	r3, #0
  203b2c:	bf0c      	ite	eq
  203b2e:	2301      	moveq	r3, #1
  203b30:	2300      	movne	r3, #0
  203b32:	b2db      	uxtb	r3, r3
  203b34:	2b00      	cmp	r3, #0
  203b36:	d002      	beq.n	203b3e <chThdSpawnSuspendedI+0x1e>
  203b38:	483f      	ldr	r0, [pc, #252]	; (203c38 <chThdSpawnSuspendedI+0x118>)
  203b3a:	f7fe fbb1 	bl	2022a0 <chSysHalt>
  chDbgCheck(tdp != NULL);
  203b3e:	9b00      	ldr	r3, [sp, #0]
  203b40:	2b00      	cmp	r3, #0
  203b42:	bf0c      	ite	eq
  203b44:	2301      	moveq	r3, #1
  203b46:	2300      	movne	r3, #0
  203b48:	b2db      	uxtb	r3, r3
  203b4a:	2b00      	cmp	r3, #0
  203b4c:	d002      	beq.n	203b54 <chThdSpawnSuspendedI+0x34>
  203b4e:	483a      	ldr	r0, [pc, #232]	; (203c38 <chThdSpawnSuspendedI+0x118>)
  203b50:	f7fe fba6 	bl	2022a0 <chSysHalt>

  /* Checks related to the working area geometry.*/
  chDbgCheck((tdp != NULL) &&
  203b54:	9b00      	ldr	r3, [sp, #0]
  203b56:	2b00      	cmp	r3, #0
  203b58:	bf0c      	ite	eq
  203b5a:	2301      	moveq	r3, #1
  203b5c:	2300      	movne	r3, #0
  203b5e:	b2db      	uxtb	r3, r3
  203b60:	2b00      	cmp	r3, #0
  203b62:	d10a      	bne.n	203b7a <chThdSpawnSuspendedI+0x5a>
  203b64:	9b00      	ldr	r3, [sp, #0]
  203b66:	685b      	ldr	r3, [r3, #4]
  203b68:	f003 031f 	and.w	r3, r3, #31
  203b6c:	2b00      	cmp	r3, #0
  203b6e:	bf14      	ite	ne
  203b70:	2301      	movne	r3, #1
  203b72:	2300      	moveq	r3, #0
  203b74:	b2db      	uxtb	r3, r3
  203b76:	2b00      	cmp	r3, #0
  203b78:	d001      	beq.n	203b7e <chThdSpawnSuspendedI+0x5e>
  203b7a:	2301      	movs	r3, #1
  203b7c:	e000      	b.n	203b80 <chThdSpawnSuspendedI+0x60>
  203b7e:	2300      	movs	r3, #0
  203b80:	2b00      	cmp	r3, #0
  203b82:	d10a      	bne.n	203b9a <chThdSpawnSuspendedI+0x7a>
  203b84:	9b00      	ldr	r3, [sp, #0]
  203b86:	689b      	ldr	r3, [r3, #8]
  203b88:	f003 031f 	and.w	r3, r3, #31
  203b8c:	2b00      	cmp	r3, #0
  203b8e:	bf14      	ite	ne
  203b90:	2301      	movne	r3, #1
  203b92:	2300      	moveq	r3, #0
  203b94:	b2db      	uxtb	r3, r3
  203b96:	2b00      	cmp	r3, #0
  203b98:	d001      	beq.n	203b9e <chThdSpawnSuspendedI+0x7e>
  203b9a:	2301      	movs	r3, #1
  203b9c:	e000      	b.n	203ba0 <chThdSpawnSuspendedI+0x80>
  203b9e:	2300      	movs	r3, #0
  203ba0:	2b00      	cmp	r3, #0
  203ba2:	d10a      	bne.n	203bba <chThdSpawnSuspendedI+0x9a>
  203ba4:	9b00      	ldr	r3, [sp, #0]
  203ba6:	689a      	ldr	r2, [r3, #8]
  203ba8:	9b00      	ldr	r3, [sp, #0]
  203baa:	685b      	ldr	r3, [r3, #4]
  203bac:	429a      	cmp	r2, r3
  203bae:	bf94      	ite	ls
  203bb0:	2301      	movls	r3, #1
  203bb2:	2300      	movhi	r3, #0
  203bb4:	b2db      	uxtb	r3, r3
  203bb6:	2b00      	cmp	r3, #0
  203bb8:	d001      	beq.n	203bbe <chThdSpawnSuspendedI+0x9e>
  203bba:	2301      	movs	r3, #1
  203bbc:	e000      	b.n	203bc0 <chThdSpawnSuspendedI+0xa0>
  203bbe:	2300      	movs	r3, #0
  203bc0:	2b00      	cmp	r3, #0
  203bc2:	d10c      	bne.n	203bde <chThdSpawnSuspendedI+0xbe>
  203bc4:	9b00      	ldr	r3, [sp, #0]
  203bc6:	689b      	ldr	r3, [r3, #8]
  203bc8:	461a      	mov	r2, r3
  203bca:	9b00      	ldr	r3, [sp, #0]
  203bcc:	685b      	ldr	r3, [r3, #4]
  203bce:	1ad3      	subs	r3, r2, r3
  203bd0:	2bbf      	cmp	r3, #191	; 0xbf
  203bd2:	bf94      	ite	ls
  203bd4:	2301      	movls	r3, #1
  203bd6:	2300      	movhi	r3, #0
  203bd8:	b2db      	uxtb	r3, r3
  203bda:	2b00      	cmp	r3, #0
  203bdc:	d002      	beq.n	203be4 <chThdSpawnSuspendedI+0xc4>
  203bde:	4816      	ldr	r0, [pc, #88]	; (203c38 <chThdSpawnSuspendedI+0x118>)
  203be0:	f7fe fb5e 	bl	2022a0 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_STACK_SIZE(0)));

  /* Thread object initialization.*/
  tp = chThdObjectInit(tp, tdp);
  203be4:	9900      	ldr	r1, [sp, #0]
  203be6:	9801      	ldr	r0, [sp, #4]
  203be8:	f7ff ff32 	bl	203a50 <chThdObjectInit>
  203bec:	9001      	str	r0, [sp, #4]

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
  203bee:	9b01      	ldr	r3, [sp, #4]
  203bf0:	699b      	ldr	r3, [r3, #24]
  203bf2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  203bf6:	9b01      	ldr	r3, [sp, #4]
  203bf8:	60da      	str	r2, [r3, #12]
  203bfa:	9b00      	ldr	r3, [sp, #0]
  203bfc:	691a      	ldr	r2, [r3, #16]
  203bfe:	9b01      	ldr	r3, [sp, #4]
  203c00:	68db      	ldr	r3, [r3, #12]
  203c02:	601a      	str	r2, [r3, #0]
  203c04:	9b00      	ldr	r3, [sp, #0]
  203c06:	695a      	ldr	r2, [r3, #20]
  203c08:	9b01      	ldr	r3, [sp, #4]
  203c0a:	68db      	ldr	r3, [r3, #12]
  203c0c:	605a      	str	r2, [r3, #4]
  203c0e:	9b01      	ldr	r3, [sp, #4]
  203c10:	68db      	ldr	r3, [r3, #12]
  203c12:	4a0a      	ldr	r2, [pc, #40]	; (203c3c <chThdSpawnSuspendedI+0x11c>)
  203c14:	621a      	str	r2, [r3, #32]

  /* Registry-related fields.*/
#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(tp->owner, tp);
  203c16:	9b01      	ldr	r3, [sp, #4]
  203c18:	691b      	ldr	r3, [r3, #16]
  203c1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
  203c1e:	9b01      	ldr	r3, [sp, #4]
  203c20:	3324      	adds	r3, #36	; 0x24
  203c22:	4619      	mov	r1, r3
  203c24:	4610      	mov	r0, r2
  203c26:	f7ff fe23 	bl	203870 <ch_queue_insert.lto_priv.1>
#endif

  return tp;
  203c2a:	9b01      	ldr	r3, [sp, #4]
  203c2c:	bf00      	nop
  203c2e:	bf00      	nop
}
  203c30:	4618      	mov	r0, r3
  203c32:	b003      	add	sp, #12
  203c34:	f85d fb04 	ldr.w	pc, [sp], #4
  203c38:	080049c8 	.word	0x080049c8
  203c3c:	002002f1 	.word	0x002002f1

00203c40 <chThdSpawnRunningI>:
 * @param[in] tdp       pointer to a @p thread_descriptor_t object
 * @return              Reference to the @p thread_t object.
 *
 * @iclass
 */
thread_t *chThdSpawnRunningI(thread_t *tp, const thread_descriptor_t *tdp) {
  203c40:	b500      	push	{lr}
  203c42:	b083      	sub	sp, #12
  203c44:	9001      	str	r0, [sp, #4]
  203c46:	9100      	str	r1, [sp, #0]

  return chSchReadyI(chThdSpawnSuspendedI(tp, tdp));
  203c48:	9900      	ldr	r1, [sp, #0]
  203c4a:	9801      	ldr	r0, [sp, #4]
  203c4c:	f7ff ff68 	bl	203b20 <chThdSpawnSuspendedI>
  203c50:	4603      	mov	r3, r0
  203c52:	4618      	mov	r0, r3
  203c54:	f7ff fb7c 	bl	203350 <chSchReadyI>
  203c58:	4603      	mov	r3, r0
}
  203c5a:	4618      	mov	r0, r3
  203c5c:	b003      	add	sp, #12
  203c5e:	f85d fb04 	ldr.w	pc, [sp], #4
  203c62:	bf00      	nop
	...

00203c70 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
  203c70:	b500      	push	{lr}
  203c72:	b083      	sub	sp, #12
  203c74:	9001      	str	r0, [sp, #4]

  chSysLock();
  203c76:	f7ff fe3b 	bl	2038f0 <chSysLock.lto_priv.8>
  chThdExitS(msg);
  203c7a:	9801      	ldr	r0, [sp, #4]
  203c7c:	f000 f808 	bl	203c90 <chThdExitS>
  /* The thread never returns here.*/
}
  203c80:	bf00      	nop
  203c82:	b003      	add	sp, #12
  203c84:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203c90 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  203c90:	b500      	push	{lr}
  203c92:	b085      	sub	sp, #20
  203c94:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
  203c96:	f7ff fe73 	bl	203980 <chThdGetSelfX.lto_priv.0>
  203c9a:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
  203c9c:	9b03      	ldr	r3, [sp, #12]
  203c9e:	9a01      	ldr	r2, [sp, #4]
  203ca0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(currtp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
  203ca2:	e008      	b.n	203cb6 <chThdExitS+0x26>
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
  203ca4:	9b03      	ldr	r3, [sp, #12]
  203ca6:	3338      	adds	r3, #56	; 0x38
  203ca8:	4618      	mov	r0, r3
  203caa:	f7ff fdb1 	bl	203810 <ch_list_unlink>
  203cae:	4603      	mov	r3, r0
  203cb0:	4618      	mov	r0, r3
  203cb2:	f7ff fb4d 	bl	203350 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
  203cb6:	9b03      	ldr	r3, [sp, #12]
  203cb8:	3338      	adds	r3, #56	; 0x38
  203cba:	4618      	mov	r0, r3
  203cbc:	f7ff fd98 	bl	2037f0 <ch_list_notempty>
  203cc0:	4603      	mov	r3, r0
  203cc2:	2b00      	cmp	r3, #0
  203cc4:	d1ee      	bne.n	203ca4 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
  203cc6:	9b03      	ldr	r3, [sp, #12]
  203cc8:	7f9b      	ldrb	r3, [r3, #30]
  203cca:	2b00      	cmp	r3, #0
  203ccc:	bf0c      	ite	eq
  203cce:	2301      	moveq	r3, #1
  203cd0:	2300      	movne	r3, #0
  203cd2:	b2db      	uxtb	r3, r3
  203cd4:	2b00      	cmp	r3, #0
  203cd6:	d008      	beq.n	203cea <chThdExitS+0x5a>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Threads without a dispose callback are immediately removed from the
       registry because there is no memory to be recovered.*/
    if (currtp->dispose == NULL) {
  203cd8:	9b03      	ldr	r3, [sp, #12]
  203cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  203cdc:	2b00      	cmp	r3, #0
  203cde:	d104      	bne.n	203cea <chThdExitS+0x5a>
      REG_REMOVE(currtp);
  203ce0:	9b03      	ldr	r3, [sp, #12]
  203ce2:	3324      	adds	r3, #36	; 0x24
  203ce4:	4618      	mov	r0, r3
  203ce6:	f7ff fdf3 	bl	2038d0 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
  203cea:	200f      	movs	r0, #15
  203cec:	f7ff fb50 	bl	203390 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
  203cf0:	4803      	ldr	r0, [pc, #12]	; (203d00 <chThdExitS+0x70>)
  203cf2:	f7fe fad5 	bl	2022a0 <chSysHalt>
}
  203cf6:	bf00      	nop
  203cf8:	b005      	add	sp, #20
  203cfa:	f85d fb04 	ldr.w	pc, [sp], #4
  203cfe:	bf00      	nop
  203d00:	080049ec 	.word	0x080049ec
	...

00203d10 <chThdSleep>:
 *                        state.
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
  203d10:	b500      	push	{lr}
  203d12:	b083      	sub	sp, #12
  203d14:	9001      	str	r0, [sp, #4]

  chSysLock();
  203d16:	f7ff fdeb 	bl	2038f0 <chSysLock.lto_priv.8>
  chThdSleepS(time);
  203d1a:	9801      	ldr	r0, [sp, #4]
  203d1c:	f7ff fe38 	bl	203990 <chThdSleepS>
  chSysUnlock();
  203d20:	f7ff fdfe 	bl	203920 <chSysUnlock.lto_priv.8>
}
  203d24:	bf00      	nop
  203d26:	b003      	add	sp, #12
  203d28:	f85d fb04 	ldr.w	pc, [sp], #4
  203d2c:	0000      	movs	r0, r0
	...

00203d30 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to a @p threads_queue_t object
 *
 * @init
 */
void chThdQueueObjectInit(threads_queue_t *tqp) {
  203d30:	b500      	push	{lr}
  203d32:	b083      	sub	sp, #12
  203d34:	9001      	str	r0, [sp, #4]

  chDbgCheck(tqp);
  203d36:	9b01      	ldr	r3, [sp, #4]
  203d38:	2b00      	cmp	r3, #0
  203d3a:	bf0c      	ite	eq
  203d3c:	2301      	moveq	r3, #1
  203d3e:	2300      	movne	r3, #0
  203d40:	b2db      	uxtb	r3, r3
  203d42:	2b00      	cmp	r3, #0
  203d44:	d002      	beq.n	203d4c <chThdQueueObjectInit+0x1c>
  203d46:	4805      	ldr	r0, [pc, #20]	; (203d5c <chThdQueueObjectInit+0x2c>)
  203d48:	f7fe faaa 	bl	2022a0 <chSysHalt>

  ch_queue_init(&tqp->queue);
  203d4c:	9b01      	ldr	r3, [sp, #4]
  203d4e:	4618      	mov	r0, r3
  203d50:	f7ff fd6e 	bl	203830 <ch_queue_init.lto_priv.1>
}
  203d54:	bf00      	nop
  203d56:	b003      	add	sp, #12
  203d58:	f85d fb04 	ldr.w	pc, [sp], #4
  203d5c:	08004a04 	.word	0x08004a04

00203d60 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
  203d60:	b500      	push	{lr}
  203d62:	b085      	sub	sp, #20
  203d64:	9001      	str	r0, [sp, #4]
  203d66:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
  203d68:	f7ff fe0a 	bl	203980 <chThdGetSelfX.lto_priv.0>
  203d6c:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
  203d6e:	9b00      	ldr	r3, [sp, #0]
  203d70:	2b00      	cmp	r3, #0
  203d72:	bf0c      	ite	eq
  203d74:	2301      	moveq	r3, #1
  203d76:	2300      	movne	r3, #0
  203d78:	b2db      	uxtb	r3, r3
  203d7a:	2b00      	cmp	r3, #0
  203d7c:	d002      	beq.n	203d84 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
  203d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  203d82:	e009      	b.n	203d98 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
  203d84:	9b01      	ldr	r3, [sp, #4]
  203d86:	9903      	ldr	r1, [sp, #12]
  203d88:	4618      	mov	r0, r3
  203d8a:	f7ff fd71 	bl	203870 <ch_queue_insert.lto_priv.1>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  203d8e:	9900      	ldr	r1, [sp, #0]
  203d90:	2004      	movs	r0, #4
  203d92:	f7ff fb55 	bl	203440 <chSchGoSleepTimeoutS>
  203d96:	4603      	mov	r3, r0
}
  203d98:	4618      	mov	r0, r3
  203d9a:	b005      	add	sp, #20
  203d9c:	f85d fb04 	ldr.w	pc, [sp], #4

00203da0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  203da0:	b500      	push	{lr}
  203da2:	b083      	sub	sp, #12
  203da4:	9001      	str	r0, [sp, #4]
  203da6:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
  203da8:	9b01      	ldr	r3, [sp, #4]
  203daa:	4618      	mov	r0, r3
  203dac:	f7ff fd50 	bl	203850 <ch_queue_notempty.lto_priv.0>
  203db0:	4603      	mov	r3, r0
  203db2:	2b00      	cmp	r3, #0
  203db4:	d003      	beq.n	203dbe <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
  203db6:	9900      	ldr	r1, [sp, #0]
  203db8:	9801      	ldr	r0, [sp, #4]
  203dba:	f7ff fe01 	bl	2039c0 <chThdDoDequeueNextI>
  }
}
  203dbe:	bf00      	nop
  203dc0:	b003      	add	sp, #12
  203dc2:	f85d fb04 	ldr.w	pc, [sp], #4
  203dc6:	bf00      	nop
	...

00203dd0 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
  203dd0:	b4f0      	push	{r4, r5, r6, r7}
  203dd2:	b084      	sub	sp, #16
  203dd4:	9003      	str	r0, [sp, #12]
  203dd6:	9102      	str	r1, [sp, #8]
  203dd8:	9201      	str	r2, [sp, #4]

  tmp->n++;
  203dda:	9b03      	ldr	r3, [sp, #12]
  203ddc:	68db      	ldr	r3, [r3, #12]
  203dde:	1c5a      	adds	r2, r3, #1
  203de0:	9b03      	ldr	r3, [sp, #12]
  203de2:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
  203de4:	9b03      	ldr	r3, [sp, #12]
  203de6:	689b      	ldr	r3, [r3, #8]
  203de8:	9a02      	ldr	r2, [sp, #8]
  203dea:	1ad2      	subs	r2, r2, r3
  203dec:	9b01      	ldr	r3, [sp, #4]
  203dee:	1ad2      	subs	r2, r2, r3
  203df0:	9b03      	ldr	r3, [sp, #12]
  203df2:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  203df4:	9b03      	ldr	r3, [sp, #12]
  203df6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  203dfa:	9903      	ldr	r1, [sp, #12]
  203dfc:	6889      	ldr	r1, [r1, #8]
  203dfe:	2000      	movs	r0, #0
  203e00:	460c      	mov	r4, r1
  203e02:	4605      	mov	r5, r0
  203e04:	1916      	adds	r6, r2, r4
  203e06:	eb43 0705 	adc.w	r7, r3, r5
  203e0a:	9b03      	ldr	r3, [sp, #12]
  203e0c:	e9c3 6704 	strd	r6, r7, [r3, #16]
  if (tmp->last > tmp->worst) {
  203e10:	9b03      	ldr	r3, [sp, #12]
  203e12:	689a      	ldr	r2, [r3, #8]
  203e14:	9b03      	ldr	r3, [sp, #12]
  203e16:	685b      	ldr	r3, [r3, #4]
  203e18:	429a      	cmp	r2, r3
  203e1a:	d903      	bls.n	203e24 <tm_stop+0x54>
    tmp->worst = tmp->last;
  203e1c:	9b03      	ldr	r3, [sp, #12]
  203e1e:	689a      	ldr	r2, [r3, #8]
  203e20:	9b03      	ldr	r3, [sp, #12]
  203e22:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
  203e24:	9b03      	ldr	r3, [sp, #12]
  203e26:	689a      	ldr	r2, [r3, #8]
  203e28:	9b03      	ldr	r3, [sp, #12]
  203e2a:	681b      	ldr	r3, [r3, #0]
  203e2c:	429a      	cmp	r2, r3
  203e2e:	d203      	bcs.n	203e38 <tm_stop+0x68>
    tmp->best = tmp->last;
  203e30:	9b03      	ldr	r3, [sp, #12]
  203e32:	689a      	ldr	r2, [r3, #8]
  203e34:	9b03      	ldr	r3, [sp, #12]
  203e36:	601a      	str	r2, [r3, #0]
  }
}
  203e38:	bf00      	nop
  203e3a:	b004      	add	sp, #16
  203e3c:	bcf0      	pop	{r4, r5, r6, r7}
  203e3e:	4770      	bx	lr

00203e40 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p time_measurement_t object
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
  203e40:	b082      	sub	sp, #8
  203e42:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
  203e44:	9b01      	ldr	r3, [sp, #4]
  203e46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  203e4a:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
  203e4c:	9b01      	ldr	r3, [sp, #4]
  203e4e:	2200      	movs	r2, #0
  203e50:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
  203e52:	9b01      	ldr	r3, [sp, #4]
  203e54:	2200      	movs	r2, #0
  203e56:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
  203e58:	9b01      	ldr	r3, [sp, #4]
  203e5a:	2200      	movs	r2, #0
  203e5c:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
  203e5e:	9901      	ldr	r1, [sp, #4]
  203e60:	f04f 0200 	mov.w	r2, #0
  203e64:	f04f 0300 	mov.w	r3, #0
  203e68:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
  203e6c:	bf00      	nop
  203e6e:	b002      	add	sp, #8
  203e70:	4770      	bx	lr
  203e72:	bf00      	nop
	...

00203e80 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t object
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
  203e80:	b082      	sub	sp, #8
  203e82:	9001      	str	r0, [sp, #4]
  return DWT->CYCCNT;
  203e84:	4b03      	ldr	r3, [pc, #12]	; (203e94 <chTMStartMeasurementX+0x14>)
  203e86:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
  203e88:	9b01      	ldr	r3, [sp, #4]
  203e8a:	609a      	str	r2, [r3, #8]
}
  203e8c:	bf00      	nop
  203e8e:	b002      	add	sp, #8
  203e90:	4770      	bx	lr
  203e92:	bf00      	nop
  203e94:	e0001000 	.word	0xe0001000
	...

00203ea0 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t object
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  203ea0:	b500      	push	{lr}
  203ea2:	b083      	sub	sp, #12
  203ea4:	9001      	str	r0, [sp, #4]
  203ea6:	4b06      	ldr	r3, [pc, #24]	; (203ec0 <chTMStopMeasurementX+0x20>)
  203ea8:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
  203eaa:	4a06      	ldr	r2, [pc, #24]	; (203ec4 <chTMStopMeasurementX+0x24>)
  203eac:	6892      	ldr	r2, [r2, #8]
  203eae:	4619      	mov	r1, r3
  203eb0:	9801      	ldr	r0, [sp, #4]
  203eb2:	f7ff ff8d 	bl	203dd0 <tm_stop>
}
  203eb6:	bf00      	nop
  203eb8:	b003      	add	sp, #12
  203eba:	f85d fb04 	ldr.w	pc, [sp], #4
  203ebe:	bf00      	nop
  203ec0:	e0001000 	.word	0xe0001000
  203ec4:	200008b8 	.word	0x200008b8
	...

00203ed0 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
  203ed0:	b082      	sub	sp, #8
  203ed2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
  203ed4:	9b01      	ldr	r3, [sp, #4]
  203ed6:	9a01      	ldr	r2, [sp, #4]
  203ed8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
  203eda:	9b01      	ldr	r3, [sp, #4]
  203edc:	9a01      	ldr	r2, [sp, #4]
  203ede:	605a      	str	r2, [r3, #4]
}
  203ee0:	bf00      	nop
  203ee2:	b002      	add	sp, #8
  203ee4:	4770      	bx	lr
  203ee6:	bf00      	nop
	...

00203ef0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
  203ef0:	b500      	push	{lr}
  203ef2:	b083      	sub	sp, #12
  203ef4:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
  203ef6:	9b01      	ldr	r3, [sp, #4]
  203ef8:	2b00      	cmp	r3, #0
  203efa:	bf0c      	ite	eq
  203efc:	2301      	moveq	r3, #1
  203efe:	2300      	movne	r3, #0
  203f00:	b2db      	uxtb	r3, r3
  203f02:	2b00      	cmp	r3, #0
  203f04:	d002      	beq.n	203f0c <chMtxObjectInit+0x1c>
  203f06:	4807      	ldr	r0, [pc, #28]	; (203f24 <chMtxObjectInit+0x34>)
  203f08:	f7fe f9ca 	bl	2022a0 <chSysHalt>

  ch_queue_init(&mp->queue);
  203f0c:	9b01      	ldr	r3, [sp, #4]
  203f0e:	4618      	mov	r0, r3
  203f10:	f7ff ffde 	bl	203ed0 <ch_queue_init.lto_priv.3>
  mp->owner = NULL;
  203f14:	9b01      	ldr	r3, [sp, #4]
  203f16:	2200      	movs	r2, #0
  203f18:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
  203f1a:	bf00      	nop
  203f1c:	b003      	add	sp, #12
  203f1e:	f85d fb04 	ldr.w	pc, [sp], #4
  203f22:	bf00      	nop
  203f24:	08004a30 	.word	0x08004a30
	...

00203f30 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to an @p event_source_t object
 *
 * @init
 */
void chEvtObjectInit(event_source_t *esp) {
  203f30:	b500      	push	{lr}
  203f32:	b083      	sub	sp, #12
  203f34:	9001      	str	r0, [sp, #4]

  chDbgCheck(esp != NULL);
  203f36:	9b01      	ldr	r3, [sp, #4]
  203f38:	2b00      	cmp	r3, #0
  203f3a:	bf0c      	ite	eq
  203f3c:	2301      	moveq	r3, #1
  203f3e:	2300      	movne	r3, #0
  203f40:	b2db      	uxtb	r3, r3
  203f42:	2b00      	cmp	r3, #0
  203f44:	d002      	beq.n	203f4c <chEvtObjectInit+0x1c>
  203f46:	4805      	ldr	r0, [pc, #20]	; (203f5c <chEvtObjectInit+0x2c>)
  203f48:	f7fe f9aa 	bl	2022a0 <chSysHalt>

  esp->next = (event_listener_t *)esp;
  203f4c:	9b01      	ldr	r3, [sp, #4]
  203f4e:	9a01      	ldr	r2, [sp, #4]
  203f50:	601a      	str	r2, [r3, #0]
}
  203f52:	bf00      	nop
  203f54:	b003      	add	sp, #12
  203f56:	f85d fb04 	ldr.w	pc, [sp], #4
  203f5a:	bf00      	nop
  203f5c:	08004a40 	.word	0x08004a40

00203f60 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
  203f60:	b500      	push	{lr}
  203f62:	b083      	sub	sp, #12
  203f64:	9001      	str	r0, [sp, #4]
  203f66:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  203f68:	f7fe fb0a 	bl	202580 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  203f6c:	9b01      	ldr	r3, [sp, #4]
  203f6e:	2b00      	cmp	r3, #0
  203f70:	bf0c      	ite	eq
  203f72:	2301      	moveq	r3, #1
  203f74:	2300      	movne	r3, #0
  203f76:	b2db      	uxtb	r3, r3
  203f78:	2b00      	cmp	r3, #0
  203f7a:	d002      	beq.n	203f82 <chEvtSignalI+0x22>
  203f7c:	4815      	ldr	r0, [pc, #84]	; (203fd4 <chEvtSignalI+0x74>)
  203f7e:	f7fe f98f 	bl	2022a0 <chSysHalt>

  tp->epending |= events;
  203f82:	9b01      	ldr	r3, [sp, #4]
  203f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  203f86:	9b00      	ldr	r3, [sp, #0]
  203f88:	431a      	orrs	r2, r3
  203f8a:	9b01      	ldr	r3, [sp, #4]
  203f8c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
  203f8e:	9b01      	ldr	r3, [sp, #4]
  203f90:	7f1b      	ldrb	r3, [r3, #28]
  203f92:	2b0a      	cmp	r3, #10
  203f94:	d106      	bne.n	203fa4 <chEvtSignalI+0x44>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  203f96:	9b01      	ldr	r3, [sp, #4]
  203f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  203f9a:	9b01      	ldr	r3, [sp, #4]
  203f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  203f9e:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
  203fa0:	2b00      	cmp	r3, #0
  203fa2:	d10c      	bne.n	203fbe <chEvtSignalI+0x5e>
      ((tp->state == CH_STATE_WTANDEVT) &&
  203fa4:	9b01      	ldr	r3, [sp, #4]
  203fa6:	7f1b      	ldrb	r3, [r3, #28]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  203fa8:	2b0b      	cmp	r3, #11
  203faa:	d10e      	bne.n	203fca <chEvtSignalI+0x6a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  203fac:	9b01      	ldr	r3, [sp, #4]
  203fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  203fb0:	9b01      	ldr	r3, [sp, #4]
  203fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  203fb4:	401a      	ands	r2, r3
  203fb6:	9b01      	ldr	r3, [sp, #4]
  203fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      ((tp->state == CH_STATE_WTANDEVT) &&
  203fba:	429a      	cmp	r2, r3
  203fbc:	d105      	bne.n	203fca <chEvtSignalI+0x6a>
    tp->u.rdymsg = MSG_OK;
  203fbe:	9b01      	ldr	r3, [sp, #4]
  203fc0:	2200      	movs	r2, #0
  203fc2:	635a      	str	r2, [r3, #52]	; 0x34
    (void) chSchReadyI(tp);
  203fc4:	9801      	ldr	r0, [sp, #4]
  203fc6:	f7ff f9c3 	bl	203350 <chSchReadyI>
  }
}
  203fca:	bf00      	nop
  203fcc:	b003      	add	sp, #12
  203fce:	f85d fb04 	ldr.w	pc, [sp], #4
  203fd2:	bf00      	nop
  203fd4:	08004a50 	.word	0x08004a50
	...

00203fe0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to an @p event_source_t object
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  203fe0:	b500      	push	{lr}
  203fe2:	b085      	sub	sp, #20
  203fe4:	9001      	str	r0, [sp, #4]
  203fe6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  203fe8:	f7fe faca 	bl	202580 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
  203fec:	9b01      	ldr	r3, [sp, #4]
  203fee:	2b00      	cmp	r3, #0
  203ff0:	bf0c      	ite	eq
  203ff2:	2301      	moveq	r3, #1
  203ff4:	2300      	movne	r3, #0
  203ff6:	b2db      	uxtb	r3, r3
  203ff8:	2b00      	cmp	r3, #0
  203ffa:	d002      	beq.n	204002 <chEvtBroadcastFlagsI+0x22>
  203ffc:	4814      	ldr	r0, [pc, #80]	; (204050 <chEvtBroadcastFlagsI+0x70>)
  203ffe:	f7fe f94f 	bl	2022a0 <chSysHalt>

  elp = esp->next;
  204002:	9b01      	ldr	r3, [sp, #4]
  204004:	681b      	ldr	r3, [r3, #0]
  204006:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  204008:	e019      	b.n	20403e <chEvtBroadcastFlagsI+0x5e>
  /*lint -restore*/
    elp->flags |= flags;
  20400a:	9b03      	ldr	r3, [sp, #12]
  20400c:	68da      	ldr	r2, [r3, #12]
  20400e:	9b00      	ldr	r3, [sp, #0]
  204010:	431a      	orrs	r2, r3
  204012:	9b03      	ldr	r3, [sp, #12]
  204014:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
  204016:	9b00      	ldr	r3, [sp, #0]
  204018:	2b00      	cmp	r3, #0
  20401a:	d005      	beq.n	204028 <chEvtBroadcastFlagsI+0x48>
        ((flags & elp->wflags) != (eventflags_t)0)) {
  20401c:	9b03      	ldr	r3, [sp, #12]
  20401e:	691a      	ldr	r2, [r3, #16]
  204020:	9b00      	ldr	r3, [sp, #0]
  204022:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
  204024:	2b00      	cmp	r3, #0
  204026:	d007      	beq.n	204038 <chEvtBroadcastFlagsI+0x58>
      chEvtSignalI(elp->listener, elp->events);
  204028:	9b03      	ldr	r3, [sp, #12]
  20402a:	685a      	ldr	r2, [r3, #4]
  20402c:	9b03      	ldr	r3, [sp, #12]
  20402e:	689b      	ldr	r3, [r3, #8]
  204030:	4619      	mov	r1, r3
  204032:	4610      	mov	r0, r2
  204034:	f7ff ff94 	bl	203f60 <chEvtSignalI>
    }
    elp = elp->next;
  204038:	9b03      	ldr	r3, [sp, #12]
  20403a:	681b      	ldr	r3, [r3, #0]
  20403c:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
  20403e:	9a03      	ldr	r2, [sp, #12]
  204040:	9b01      	ldr	r3, [sp, #4]
  204042:	429a      	cmp	r2, r3
  204044:	d1e1      	bne.n	20400a <chEvtBroadcastFlagsI+0x2a>
  }
}
  204046:	bf00      	nop
  204048:	bf00      	nop
  20404a:	b005      	add	sp, #20
  20404c:	f85d fb04 	ldr.w	pc, [sp], #4
  204050:	08004a60 	.word	0x08004a60
	...

00204060 <chSysLock.lto_priv.17>:
static inline void chSysLock(void) {
  204060:	b500      	push	{lr}
  204062:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  204064:	b672      	cpsid	i
}
  204066:	bf00      	nop
  204068:	2330      	movs	r3, #48	; 0x30
  20406a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20406c:	9b01      	ldr	r3, [sp, #4]
  20406e:	f383 8811 	msr	BASEPRI, r3
}
  204072:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  204074:	b662      	cpsie	i
}
  204076:	bf00      	nop
}
  204078:	bf00      	nop
  __dbg_check_lock();
  20407a:	f7fe f961 	bl	202340 <__dbg_check_lock>
}
  20407e:	bf00      	nop
  204080:	b003      	add	sp, #12
  204082:	f85d fb04 	ldr.w	pc, [sp], #4
  204086:	bf00      	nop
	...

00204090 <chSysUnlock.lto_priv.17>:
static inline void chSysUnlock(void) {
  204090:	b500      	push	{lr}
  204092:	b083      	sub	sp, #12
  __dbg_check_unlock();
  204094:	f7fe f97c 	bl	202390 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  204098:	4b12      	ldr	r3, [pc, #72]	; (2040e4 <chSysUnlock.lto_priv.17+0x54>)
  20409a:	681b      	ldr	r3, [r3, #0]
  20409c:	4a11      	ldr	r2, [pc, #68]	; (2040e4 <chSysUnlock.lto_priv.17+0x54>)
  20409e:	4293      	cmp	r3, r2
  2040a0:	bf14      	ite	ne
  2040a2:	2301      	movne	r3, #1
  2040a4:	2300      	moveq	r3, #0
  2040a6:	b2db      	uxtb	r3, r3
  2040a8:	2b00      	cmp	r3, #0
  2040aa:	d00f      	beq.n	2040cc <chSysUnlock.lto_priv.17+0x3c>
  2040ac:	4b0d      	ldr	r3, [pc, #52]	; (2040e4 <chSysUnlock.lto_priv.17+0x54>)
  2040ae:	68db      	ldr	r3, [r3, #12]
  2040b0:	689a      	ldr	r2, [r3, #8]
  2040b2:	4b0c      	ldr	r3, [pc, #48]	; (2040e4 <chSysUnlock.lto_priv.17+0x54>)
  2040b4:	681b      	ldr	r3, [r3, #0]
  2040b6:	689b      	ldr	r3, [r3, #8]
  2040b8:	429a      	cmp	r2, r3
  2040ba:	bf34      	ite	cc
  2040bc:	2301      	movcc	r3, #1
  2040be:	2300      	movcs	r3, #0
  2040c0:	b2db      	uxtb	r3, r3
  2040c2:	2b00      	cmp	r3, #0
  2040c4:	d002      	beq.n	2040cc <chSysUnlock.lto_priv.17+0x3c>
  2040c6:	4808      	ldr	r0, [pc, #32]	; (2040e8 <chSysUnlock.lto_priv.17+0x58>)
  2040c8:	f7fe f8ea 	bl	2022a0 <chSysHalt>
  2040cc:	2300      	movs	r3, #0
  2040ce:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2040d0:	9b01      	ldr	r3, [sp, #4]
  2040d2:	f383 8811 	msr	BASEPRI, r3
}
  2040d6:	bf00      	nop
}
  2040d8:	bf00      	nop
}
  2040da:	bf00      	nop
  2040dc:	b003      	add	sp, #12
  2040de:	f85d fb04 	ldr.w	pc, [sp], #4
  2040e2:	bf00      	nop
  2040e4:	200008c8 	.word	0x200008c8
  2040e8:	08004a8c 	.word	0x08004a8c
  2040ec:	00000000 	.word	0x00000000

002040f0 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
  2040f0:	4b03      	ldr	r3, [pc, #12]	; (204100 <__core_init+0x10>)
  2040f2:	4a04      	ldr	r2, [pc, #16]	; (204104 <__core_init+0x14>)
  2040f4:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
  2040f6:	4b02      	ldr	r3, [pc, #8]	; (204100 <__core_init+0x10>)
  2040f8:	4a03      	ldr	r2, [pc, #12]	; (204108 <__core_init+0x18>)
  2040fa:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
  2040fc:	bf00      	nop
  2040fe:	4770      	bx	lr
  204100:	200012c0 	.word	0x200012c0
  204104:	20010000 	.word	0x20010000
  204108:	20050000 	.word	0x20050000
  20410c:	00000000 	.word	0x00000000

00204110 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
  204110:	b500      	push	{lr}
  204112:	b087      	sub	sp, #28
  204114:	9003      	str	r0, [sp, #12]
  204116:	9102      	str	r1, [sp, #8]
  204118:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  20411a:	f7fe fa31 	bl	202580 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
  20411e:	9b02      	ldr	r3, [sp, #8]
  204120:	2b00      	cmp	r3, #0
  204122:	bf0c      	ite	eq
  204124:	2301      	moveq	r3, #1
  204126:	2300      	movne	r3, #0
  204128:	b2db      	uxtb	r3, r3
  20412a:	2b00      	cmp	r3, #0
  20412c:	d10a      	bne.n	204144 <chCoreAllocFromTopI+0x34>
  20412e:	9b02      	ldr	r3, [sp, #8]
  204130:	1e5a      	subs	r2, r3, #1
  204132:	9b02      	ldr	r3, [sp, #8]
  204134:	4013      	ands	r3, r2
  204136:	2b00      	cmp	r3, #0
  204138:	bf14      	ite	ne
  20413a:	2301      	movne	r3, #1
  20413c:	2300      	moveq	r3, #0
  20413e:	b2db      	uxtb	r3, r3
  204140:	2b00      	cmp	r3, #0
  204142:	d002      	beq.n	20414a <chCoreAllocFromTopI+0x3a>
  204144:	4813      	ldr	r0, [pc, #76]	; (204194 <chCoreAllocFromTopI+0x84>)
  204146:	f7fe f8ab 	bl	2022a0 <chSysHalt>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  20414a:	4b13      	ldr	r3, [pc, #76]	; (204198 <chCoreAllocFromTopI+0x88>)
  20414c:	685a      	ldr	r2, [r3, #4]
  20414e:	9b03      	ldr	r3, [sp, #12]
  204150:	425b      	negs	r3, r3
  204152:	4413      	add	r3, r2
  204154:	461a      	mov	r2, r3
  204156:	9b02      	ldr	r3, [sp, #8]
  204158:	425b      	negs	r3, r3
  20415a:	4013      	ands	r3, r2
  20415c:	9305      	str	r3, [sp, #20]
  prev = p - offset;
  20415e:	9b01      	ldr	r3, [sp, #4]
  204160:	425b      	negs	r3, r3
  204162:	9a05      	ldr	r2, [sp, #20]
  204164:	4413      	add	r3, r2
  204166:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
  204168:	4b0b      	ldr	r3, [pc, #44]	; (204198 <chCoreAllocFromTopI+0x88>)
  20416a:	681b      	ldr	r3, [r3, #0]
  20416c:	9a04      	ldr	r2, [sp, #16]
  20416e:	429a      	cmp	r2, r3
  204170:	d304      	bcc.n	20417c <chCoreAllocFromTopI+0x6c>
  204172:	4b09      	ldr	r3, [pc, #36]	; (204198 <chCoreAllocFromTopI+0x88>)
  204174:	685b      	ldr	r3, [r3, #4]
  204176:	9a04      	ldr	r2, [sp, #16]
  204178:	429a      	cmp	r2, r3
  20417a:	d901      	bls.n	204180 <chCoreAllocFromTopI+0x70>
    return NULL;
  20417c:	2300      	movs	r3, #0
  20417e:	e004      	b.n	20418a <chCoreAllocFromTopI+0x7a>
  }

  ch_memcore.topmem = prev;
  204180:	4a05      	ldr	r2, [pc, #20]	; (204198 <chCoreAllocFromTopI+0x88>)
  204182:	9b04      	ldr	r3, [sp, #16]
  204184:	6053      	str	r3, [r2, #4]

  return p;
  204186:	9b05      	ldr	r3, [sp, #20]
  204188:	bf00      	nop
}
  20418a:	4618      	mov	r0, r3
  20418c:	b007      	add	sp, #28
  20418e:	f85d fb04 	ldr.w	pc, [sp], #4
  204192:	bf00      	nop
  204194:	08004a78 	.word	0x08004a78
  204198:	200012c0 	.word	0x200012c0
  20419c:	00000000 	.word	0x00000000

002041a0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
  2041a0:	b500      	push	{lr}
  2041a2:	b087      	sub	sp, #28
  2041a4:	9003      	str	r0, [sp, #12]
  2041a6:	9102      	str	r1, [sp, #8]
  2041a8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
  2041aa:	f7ff ff59 	bl	204060 <chSysLock.lto_priv.17>
  p = chCoreAllocFromTopI(size, align, offset);
  2041ae:	9a01      	ldr	r2, [sp, #4]
  2041b0:	9902      	ldr	r1, [sp, #8]
  2041b2:	9803      	ldr	r0, [sp, #12]
  2041b4:	f7ff ffac 	bl	204110 <chCoreAllocFromTopI>
  2041b8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
  2041ba:	f7ff ff69 	bl	204090 <chSysUnlock.lto_priv.17>

  return p;
  2041be:	9b05      	ldr	r3, [sp, #20]
}
  2041c0:	4618      	mov	r0, r3
  2041c2:	b007      	add	sp, #28
  2041c4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002041d0 <chCoreGetStatusX>:
 *
 * @param[in] map       Memory area representing available core space.
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {
  2041d0:	b082      	sub	sp, #8
  2041d2:	9001      	str	r0, [sp, #4]

  map->base = ch_memcore.basemem;
  2041d4:	4b07      	ldr	r3, [pc, #28]	; (2041f4 <chCoreGetStatusX+0x24>)
  2041d6:	681a      	ldr	r2, [r3, #0]
  2041d8:	9b01      	ldr	r3, [sp, #4]
  2041da:	601a      	str	r2, [r3, #0]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
  2041dc:	4b05      	ldr	r3, [pc, #20]	; (2041f4 <chCoreGetStatusX+0x24>)
  2041de:	685a      	ldr	r2, [r3, #4]
  2041e0:	4b04      	ldr	r3, [pc, #16]	; (2041f4 <chCoreGetStatusX+0x24>)
  2041e2:	681b      	ldr	r3, [r3, #0]
  2041e4:	1ad3      	subs	r3, r2, r3
  2041e6:	461a      	mov	r2, r3
  2041e8:	9b01      	ldr	r3, [sp, #4]
  2041ea:	605a      	str	r2, [r3, #4]
  /*lint -restore*/
}
  2041ec:	bf00      	nop
  2041ee:	b002      	add	sp, #8
  2041f0:	4770      	bx	lr
  2041f2:	bf00      	nop
  2041f4:	200012c0 	.word	0x200012c0
	...

00204200 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
  204200:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
  204202:	4b08      	ldr	r3, [pc, #32]	; (204224 <__heap_init+0x24>)
  204204:	4a08      	ldr	r2, [pc, #32]	; (204228 <__heap_init+0x28>)
  204206:	601a      	str	r2, [r3, #0]
  chCoreGetStatusX(&default_heap.area);
  204208:	4808      	ldr	r0, [pc, #32]	; (20422c <__heap_init+0x2c>)
  20420a:	f7ff ffe1 	bl	2041d0 <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
  20420e:	4b05      	ldr	r3, [pc, #20]	; (204224 <__heap_init+0x24>)
  204210:	2200      	movs	r2, #0
  204212:	60da      	str	r2, [r3, #12]
  H_FREE_PAGES(&default_heap.header) = 0;
  204214:	4b03      	ldr	r3, [pc, #12]	; (204224 <__heap_init+0x24>)
  204216:	2200      	movs	r2, #0
  204218:	611a      	str	r2, [r3, #16]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
  20421a:	4805      	ldr	r0, [pc, #20]	; (204230 <__heap_init+0x30>)
  20421c:	f7ff fe68 	bl	203ef0 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
  204220:	bf00      	nop
  204222:	bd08      	pop	{r3, pc}
  204224:	200012c8 	.word	0x200012c8
  204228:	002041a1 	.word	0x002041a1
  20422c:	200012cc 	.word	0x200012cc
  204230:	200012dc 	.word	0x200012dc
	...

00204240 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
  204240:	b500      	push	{lr}
  204242:	b085      	sub	sp, #20
  204244:	9003      	str	r0, [sp, #12]
  204246:	9102      	str	r1, [sp, #8]
  204248:	9201      	str	r2, [sp, #4]
  20424a:	9300      	str	r3, [sp, #0]

  chDbgCheck((mp != NULL) &&
  20424c:	9b03      	ldr	r3, [sp, #12]
  20424e:	2b00      	cmp	r3, #0
  204250:	bf0c      	ite	eq
  204252:	2301      	moveq	r3, #1
  204254:	2300      	movne	r3, #0
  204256:	b2db      	uxtb	r3, r3
  204258:	2b00      	cmp	r3, #0
  20425a:	d107      	bne.n	20426c <chPoolObjectInitAligned+0x2c>
  20425c:	9b02      	ldr	r3, [sp, #8]
  20425e:	2b03      	cmp	r3, #3
  204260:	bf94      	ite	ls
  204262:	2301      	movls	r3, #1
  204264:	2300      	movhi	r3, #0
  204266:	b2db      	uxtb	r3, r3
  204268:	2b00      	cmp	r3, #0
  20426a:	d001      	beq.n	204270 <chPoolObjectInitAligned+0x30>
  20426c:	2301      	movs	r3, #1
  20426e:	e000      	b.n	204272 <chPoolObjectInitAligned+0x32>
  204270:	2300      	movs	r3, #0
  204272:	2b00      	cmp	r3, #0
  204274:	d107      	bne.n	204286 <chPoolObjectInitAligned+0x46>
  204276:	9b01      	ldr	r3, [sp, #4]
  204278:	2b03      	cmp	r3, #3
  20427a:	bf94      	ite	ls
  20427c:	2301      	movls	r3, #1
  20427e:	2300      	movhi	r3, #0
  204280:	b2db      	uxtb	r3, r3
  204282:	2b00      	cmp	r3, #0
  204284:	d001      	beq.n	20428a <chPoolObjectInitAligned+0x4a>
  204286:	2301      	movs	r3, #1
  204288:	e000      	b.n	20428c <chPoolObjectInitAligned+0x4c>
  20428a:	2300      	movs	r3, #0
  20428c:	2b00      	cmp	r3, #0
  20428e:	d117      	bne.n	2042c0 <chPoolObjectInitAligned+0x80>
  204290:	9b01      	ldr	r3, [sp, #4]
  204292:	2b00      	cmp	r3, #0
  204294:	bf0c      	ite	eq
  204296:	2301      	moveq	r3, #1
  204298:	2300      	movne	r3, #0
  20429a:	b2db      	uxtb	r3, r3
  20429c:	2b00      	cmp	r3, #0
  20429e:	d10a      	bne.n	2042b6 <chPoolObjectInitAligned+0x76>
  2042a0:	9b01      	ldr	r3, [sp, #4]
  2042a2:	1e5a      	subs	r2, r3, #1
  2042a4:	9b01      	ldr	r3, [sp, #4]
  2042a6:	4013      	ands	r3, r2
  2042a8:	2b00      	cmp	r3, #0
  2042aa:	bf14      	ite	ne
  2042ac:	2301      	movne	r3, #1
  2042ae:	2300      	moveq	r3, #0
  2042b0:	b2db      	uxtb	r3, r3
  2042b2:	2b00      	cmp	r3, #0
  2042b4:	d001      	beq.n	2042ba <chPoolObjectInitAligned+0x7a>
  2042b6:	2301      	movs	r3, #1
  2042b8:	e000      	b.n	2042bc <chPoolObjectInitAligned+0x7c>
  2042ba:	2300      	movs	r3, #0
  2042bc:	2b00      	cmp	r3, #0
  2042be:	d002      	beq.n	2042c6 <chPoolObjectInitAligned+0x86>
  2042c0:	4809      	ldr	r0, [pc, #36]	; (2042e8 <chPoolObjectInitAligned+0xa8>)
  2042c2:	f7fd ffed 	bl	2022a0 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  2042c6:	9b03      	ldr	r3, [sp, #12]
  2042c8:	2200      	movs	r2, #0
  2042ca:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
  2042cc:	9b03      	ldr	r3, [sp, #12]
  2042ce:	9a02      	ldr	r2, [sp, #8]
  2042d0:	605a      	str	r2, [r3, #4]
  mp->align = align;
  2042d2:	9b03      	ldr	r3, [sp, #12]
  2042d4:	9a01      	ldr	r2, [sp, #4]
  2042d6:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
  2042d8:	9b03      	ldr	r3, [sp, #12]
  2042da:	9a00      	ldr	r2, [sp, #0]
  2042dc:	60da      	str	r2, [r3, #12]
}
  2042de:	bf00      	nop
  2042e0:	b005      	add	sp, #20
  2042e2:	f85d fb04 	ldr.w	pc, [sp], #4
  2042e6:	bf00      	nop
  2042e8:	08004a98 	.word	0x08004a98
  2042ec:	00000000 	.word	0x00000000

002042f0 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
  2042f0:	b500      	push	{lr}
  2042f2:	b083      	sub	sp, #12
  2042f4:	9001      	str	r0, [sp, #4]
  2042f6:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
  2042f8:	2200      	movs	r2, #0
  2042fa:	9900      	ldr	r1, [sp, #0]
  2042fc:	9801      	ldr	r0, [sp, #4]
  2042fe:	f7ff ff07 	bl	204110 <chCoreAllocFromTopI>
  204302:	4603      	mov	r3, r0
}
  204304:	4618      	mov	r0, r3
  204306:	b003      	add	sp, #12
  204308:	f85d fb04 	ldr.w	pc, [sp], #4
  20430c:	0000      	movs	r0, r0
	...

00204310 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
  204310:	b500      	push	{lr}
  204312:	b085      	sub	sp, #20
  204314:	9003      	str	r0, [sp, #12]
  204316:	9102      	str	r1, [sp, #8]
  204318:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
  20431a:	9b01      	ldr	r3, [sp, #4]
  20431c:	2204      	movs	r2, #4
  20431e:	9902      	ldr	r1, [sp, #8]
  204320:	9803      	ldr	r0, [sp, #12]
  204322:	f7ff ff8d 	bl	204240 <chPoolObjectInitAligned>
}
  204326:	bf00      	nop
  204328:	b005      	add	sp, #20
  20432a:	f85d fb04 	ldr.w	pc, [sp], #4
  20432e:	bf00      	nop

00204330 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
  204330:	b082      	sub	sp, #8
  204332:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
  204334:	9b01      	ldr	r3, [sp, #4]
  204336:	9a01      	ldr	r2, [sp, #4]
  204338:	601a      	str	r2, [r3, #0]
}
  20433a:	bf00      	nop
  20433c:	b002      	add	sp, #8
  20433e:	4770      	bx	lr

00204340 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
  204340:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
  204342:	4810      	ldr	r0, [pc, #64]	; (204384 <__factory_init+0x44>)
  204344:	f7ff fdd4 	bl	203ef0 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
  204348:	480f      	ldr	r0, [pc, #60]	; (204388 <__factory_init+0x48>)
  20434a:	f7ff fff1 	bl	204330 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
  20434e:	4a0f      	ldr	r2, [pc, #60]	; (20438c <__factory_init+0x4c>)
  204350:	2114      	movs	r1, #20
  204352:	480f      	ldr	r0, [pc, #60]	; (204390 <__factory_init+0x50>)
  204354:	f7ff ffdc 	bl	204310 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
  204358:	480e      	ldr	r0, [pc, #56]	; (204394 <__factory_init+0x54>)
  20435a:	f7ff ffe9 	bl	204330 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
  20435e:	480e      	ldr	r0, [pc, #56]	; (204398 <__factory_init+0x58>)
  204360:	f7ff ffe6 	bl	204330 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
  204364:	4a09      	ldr	r2, [pc, #36]	; (20438c <__factory_init+0x4c>)
  204366:	211c      	movs	r1, #28
  204368:	480c      	ldr	r0, [pc, #48]	; (20439c <__factory_init+0x5c>)
  20436a:	f7ff ffd1 	bl	204310 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
  20436e:	480c      	ldr	r0, [pc, #48]	; (2043a0 <__factory_init+0x60>)
  204370:	f7ff ffde 	bl	204330 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
  204374:	480b      	ldr	r0, [pc, #44]	; (2043a4 <__factory_init+0x64>)
  204376:	f7ff ffdb 	bl	204330 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
  20437a:	480b      	ldr	r0, [pc, #44]	; (2043a8 <__factory_init+0x68>)
  20437c:	f7ff ffd8 	bl	204330 <dyn_list_init>
#endif
}
  204380:	bf00      	nop
  204382:	bd08      	pop	{r3, pc}
  204384:	200012ec 	.word	0x200012ec
  204388:	200012fc 	.word	0x200012fc
  20438c:	002042f1 	.word	0x002042f1
  204390:	20001300 	.word	0x20001300
  204394:	20001310 	.word	0x20001310
  204398:	20001314 	.word	0x20001314
  20439c:	20001318 	.word	0x20001318
  2043a0:	20001328 	.word	0x20001328
  2043a4:	2000132c 	.word	0x2000132c
  2043a8:	20001330 	.word	0x20001330
  2043ac:	00000000 	.word	0x00000000

002043b0 <__NVIC_SetPriorityGrouping>:
{
  2043b0:	b084      	sub	sp, #16
  2043b2:	9001      	str	r0, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
  2043b4:	9b01      	ldr	r3, [sp, #4]
  2043b6:	f003 0307 	and.w	r3, r3, #7
  2043ba:	9303      	str	r3, [sp, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  2043bc:	4b0a      	ldr	r3, [pc, #40]	; (2043e8 <__NVIC_SetPriorityGrouping+0x38>)
  2043be:	68db      	ldr	r3, [r3, #12]
  2043c0:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  2043c2:	9a02      	ldr	r2, [sp, #8]
  2043c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
  2043c8:	4013      	ands	r3, r2
  2043ca:	9302      	str	r3, [sp, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  2043cc:	9b03      	ldr	r3, [sp, #12]
  2043ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  2043d0:	9b02      	ldr	r3, [sp, #8]
  2043d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
  2043d4:	4b05      	ldr	r3, [pc, #20]	; (2043ec <__NVIC_SetPriorityGrouping+0x3c>)
  2043d6:	4313      	orrs	r3, r2
  2043d8:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
  2043da:	4a03      	ldr	r2, [pc, #12]	; (2043e8 <__NVIC_SetPriorityGrouping+0x38>)
  2043dc:	9b02      	ldr	r3, [sp, #8]
  2043de:	60d3      	str	r3, [r2, #12]
}
  2043e0:	bf00      	nop
  2043e2:	b004      	add	sp, #16
  2043e4:	4770      	bx	lr
  2043e6:	bf00      	nop
  2043e8:	e000ed00 	.word	0xe000ed00
  2043ec:	05fa0000 	.word	0x05fa0000

002043f0 <__NVIC_SetPriority>:
{
  2043f0:	b082      	sub	sp, #8
  2043f2:	4603      	mov	r3, r0
  2043f4:	9100      	str	r1, [sp, #0]
  2043f6:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
  2043fa:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  2043fe:	2b00      	cmp	r3, #0
  204400:	db0a      	blt.n	204418 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  204402:	9b00      	ldr	r3, [sp, #0]
  204404:	b2da      	uxtb	r2, r3
  204406:	490c      	ldr	r1, [pc, #48]	; (204438 <__NVIC_SetPriority+0x48>)
  204408:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  20440c:	0112      	lsls	r2, r2, #4
  20440e:	b2d2      	uxtb	r2, r2
  204410:	440b      	add	r3, r1
  204412:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  204416:	e00b      	b.n	204430 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  204418:	9b00      	ldr	r3, [sp, #0]
  20441a:	b2da      	uxtb	r2, r3
  20441c:	4907      	ldr	r1, [pc, #28]	; (20443c <__NVIC_SetPriority+0x4c>)
  20441e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  204422:	f003 030f 	and.w	r3, r3, #15
  204426:	3b04      	subs	r3, #4
  204428:	0112      	lsls	r2, r2, #4
  20442a:	b2d2      	uxtb	r2, r2
  20442c:	440b      	add	r3, r1
  20442e:	761a      	strb	r2, [r3, #24]
}
  204430:	bf00      	nop
  204432:	b002      	add	sp, #8
  204434:	4770      	bx	lr
  204436:	bf00      	nop
  204438:	e000e100 	.word	0xe000e100
  20443c:	e000ed00 	.word	0xe000ed00

00204440 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  204440:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  204442:	f3ef 8309 	mrs	r3, PSP
  204446:	9300      	str	r3, [sp, #0]
  return(result);
  204448:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
  20444a:	9303      	str	r3, [sp, #12]

  /* Unstacking procedure, discarding the current exception context and
     positioning the stack to point to the real one.*/
  psp += sizeof (struct port_extctx);
  20444c:	9b03      	ldr	r3, [sp, #12]
  20444e:	3320      	adds	r3, #32
  204450:	9303      	str	r3, [sp, #12]
  204452:	9b03      	ldr	r3, [sp, #12]
  204454:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  204456:	9b01      	ldr	r3, [sp, #4]
  204458:	f383 8809 	msr	PSP, r3
}
  20445c:	bf00      	nop
  20445e:	2300      	movs	r3, #0
  204460:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  204462:	9b02      	ldr	r3, [sp, #8]
  204464:	f383 8811 	msr	BASEPRI, r3
}
  204468:	bf00      	nop
  20446a:	bf00      	nop
}
  20446c:	bf00      	nop
  /* Restoring real position of the original stack frame.*/
  __set_PSP(psp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  20446e:	bf00      	nop
  204470:	b004      	add	sp, #16
  204472:	4770      	bx	lr
	...

00204480 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
  204480:	b500      	push	{lr}
  204482:	b085      	sub	sp, #20
  204484:	9001      	str	r0, [sp, #4]
  204486:	2330      	movs	r3, #48	; 0x30
  204488:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20448a:	9b03      	ldr	r3, [sp, #12]
  20448c:	f383 8811 	msr	BASEPRI, r3
}
  204490:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  204492:	b662      	cpsie	i
}
  204494:	bf00      	nop
}
  204496:	bf00      	nop
  __set_CONTROL(CONTROL_FPCA_Msk | CONTROL_SPSEL_Msk);
  __ISB();
#endif

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
  204498:	2003      	movs	r0, #3
  20449a:	f7ff ff89 	bl	2043b0 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  20449e:	4b0f      	ldr	r3, [pc, #60]	; (2044dc <port_init+0x5c>)
  2044a0:	68db      	ldr	r3, [r3, #12]
  2044a2:	4a0e      	ldr	r2, [pc, #56]	; (2044dc <port_init+0x5c>)
  2044a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  2044a8:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  2044aa:	4b0d      	ldr	r3, [pc, #52]	; (2044e0 <port_init+0x60>)
  2044ac:	4a0d      	ldr	r2, [pc, #52]	; (2044e4 <port_init+0x64>)
  2044ae:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  2044b2:	4b0b      	ldr	r3, [pc, #44]	; (2044e0 <port_init+0x60>)
  2044b4:	681b      	ldr	r3, [r3, #0]
  2044b6:	4a0a      	ldr	r2, [pc, #40]	; (2044e0 <port_init+0x60>)
  2044b8:	f043 0301 	orr.w	r3, r3, #1
  2044bc:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
  2044be:	2102      	movs	r1, #2
  2044c0:	f06f 0004 	mvn.w	r0, #4
  2044c4:	f7ff ff94 	bl	2043f0 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
  2044c8:	2103      	movs	r1, #3
  2044ca:	f06f 0001 	mvn.w	r0, #1
  2044ce:	f7ff ff8f 	bl	2043f0 <__NVIC_SetPriority>

#if (PORT_MPU_INITIALIZE == TRUE) || (PORT_ENABLE_GUARD_PAGES == TRUE)
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
  2044d2:	bf00      	nop
  2044d4:	b005      	add	sp, #20
  2044d6:	f85d fb04 	ldr.w	pc, [sp], #4
  2044da:	bf00      	nop
  2044dc:	e000edf0 	.word	0xe000edf0
  2044e0:	e0001000 	.word	0xe0001000
  2044e4:	c5acce55 	.word	0xc5acce55
	...

002044f0 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
  2044f0:	b500      	push	{lr}
  2044f2:	b087      	sub	sp, #28
  __ASM volatile ("cpsid i" : : : "memory");
  2044f4:	b672      	cpsid	i
}
  2044f6:	bf00      	nop
  2044f8:	2330      	movs	r3, #48	; 0x30
  2044fa:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2044fc:	9b03      	ldr	r3, [sp, #12]
  2044fe:	f383 8811 	msr	BASEPRI, r3
}
  204502:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  204504:	b662      	cpsie	i
}
  204506:	bf00      	nop
}
  204508:	bf00      	nop
}
  20450a:	bf00      	nop

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  20450c:	4b18      	ldr	r3, [pc, #96]	; (204570 <__port_irq_epilogue+0x80>)
  20450e:	685b      	ldr	r3, [r3, #4]
  204510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  204514:	2b00      	cmp	r3, #0
  204516:	d020      	beq.n	20455a <__port_irq_epilogue+0x6a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  204518:	f3ef 8309 	mrs	r3, PSP
  20451c:	9301      	str	r3, [sp, #4]
  return(result);
  20451e:	9b01      	ldr	r3, [sp, #4]
#endif


    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    psp = __get_PSP();
  204520:	9305      	str	r3, [sp, #20]
    psp -= sizeof (struct port_extctx);
  204522:	9b05      	ldr	r3, [sp, #20]
  204524:	3b20      	subs	r3, #32
  204526:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;
  204528:	9b05      	ldr	r3, [sp, #20]
  20452a:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
  20452c:	9b04      	ldr	r3, [sp, #16]
  20452e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  204532:	61da      	str	r2, [r3, #28]
  204534:	9b05      	ldr	r3, [sp, #20]
  204536:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  204538:	9b02      	ldr	r3, [sp, #8]
  20453a:	f383 8809 	msr	PSP, r3
}
  20453e:	bf00      	nop
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  204540:	f7fe ffb6 	bl	2034b0 <chSchIsPreemptionRequired>
  204544:	4603      	mov	r3, r0
  204546:	2b00      	cmp	r3, #0
  204548:	d003      	beq.n	204552 <__port_irq_epilogue+0x62>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
  20454a:	4a0a      	ldr	r2, [pc, #40]	; (204574 <__port_irq_epilogue+0x84>)
  20454c:	9b04      	ldr	r3, [sp, #16]
  20454e:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  204550:	e00b      	b.n	20456a <__port_irq_epilogue+0x7a>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
  204552:	4a09      	ldr	r2, [pc, #36]	; (204578 <__port_irq_epilogue+0x88>)
  204554:	9b04      	ldr	r3, [sp, #16]
  204556:	619a      	str	r2, [r3, #24]
    return;
  204558:	e007      	b.n	20456a <__port_irq_epilogue+0x7a>
  20455a:	2300      	movs	r3, #0
  20455c:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20455e:	9b00      	ldr	r3, [sp, #0]
  204560:	f383 8811 	msr	BASEPRI, r3
}
  204564:	bf00      	nop
}
  204566:	bf00      	nop
}
  204568:	bf00      	nop
  }
  port_unlock_from_isr();
}
  20456a:	b007      	add	sp, #28
  20456c:	f85d fb04 	ldr.w	pc, [sp], #4
  204570:	e000ed00 	.word	0xe000ed00
  204574:	00200307 	.word	0x00200307
  204578:	00200312 	.word	0x00200312
  20457c:	00000000 	.word	0x00000000

00204580 <main>:

#include "ch.h"
#include "hal.h"


int main(void) {
  204580:	b508      	push	{r3, lr}

  halInit();
  204582:	f7fc f875 	bl	200670 <halInit>
  chSysInit();
  204586:	f7fd fe5b 	bl	202240 <chSysInit>
  palSetPadMode( GPIOB, 0U, PAL_MODE_OUTPUT_PUSHPULL );
  20458a:	2201      	movs	r2, #1
  20458c:	2101      	movs	r1, #1
  20458e:	4815      	ldr	r0, [pc, #84]	; (2045e4 <main+0x64>)
  204590:	f7fd f96e 	bl	201870 <_pal_lld_setgroupmode>
  palSetPadMode( GPIOB, 14U, PAL_MODE_OUTPUT_PUSHPULL );
  204594:	2201      	movs	r2, #1
  204596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  20459a:	4812      	ldr	r0, [pc, #72]	; (2045e4 <main+0x64>)
  20459c:	f7fd f968 	bl	201870 <_pal_lld_setgroupmode>
  palSetPadMode( GPIOB, 7U, PAL_MODE_OUTPUT_PUSHPULL );
  2045a0:	2201      	movs	r2, #1
  2045a2:	2180      	movs	r1, #128	; 0x80
  2045a4:	480f      	ldr	r0, [pc, #60]	; (2045e4 <main+0x64>)
  2045a6:	f7fd f963 	bl	201870 <_pal_lld_setgroupmode>
  while (true) {

     chThdSleepMilliseconds(100);
  2045aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  2045ae:	f7ff fbaf 	bl	203d10 <chThdSleep>
     palClearPad(GPIOB, 0U);
  2045b2:	4b0c      	ldr	r3, [pc, #48]	; (2045e4 <main+0x64>)
  2045b4:	2201      	movs	r2, #1
  2045b6:	835a      	strh	r2, [r3, #26]
     palClearPad(GPIOB, 14U);
  2045b8:	4b0a      	ldr	r3, [pc, #40]	; (2045e4 <main+0x64>)
  2045ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  2045be:	835a      	strh	r2, [r3, #26]
     palClearPad(GPIOB, 7U);
  2045c0:	4b08      	ldr	r3, [pc, #32]	; (2045e4 <main+0x64>)
  2045c2:	2280      	movs	r2, #128	; 0x80
  2045c4:	835a      	strh	r2, [r3, #26]
     chThdSleepMilliseconds(100);
  2045c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  2045ca:	f7ff fba1 	bl	203d10 <chThdSleep>
     palSetPad(GPIOB, 0U);
  2045ce:	4b05      	ldr	r3, [pc, #20]	; (2045e4 <main+0x64>)
  2045d0:	2201      	movs	r2, #1
  2045d2:	831a      	strh	r2, [r3, #24]
     palSetPad(GPIOB, 14U);
  2045d4:	4b03      	ldr	r3, [pc, #12]	; (2045e4 <main+0x64>)
  2045d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  2045da:	831a      	strh	r2, [r3, #24]
     palSetPad(GPIOB, 7U);
  2045dc:	4b01      	ldr	r3, [pc, #4]	; (2045e4 <main+0x64>)
  2045de:	2280      	movs	r2, #128	; 0x80
  2045e0:	831a      	strh	r2, [r3, #24]
     chThdSleepMilliseconds(100);
  2045e2:	e7e2      	b.n	2045aa <main+0x2a>
  2045e4:	40020400 	.word	0x40020400
