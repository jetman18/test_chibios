
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

00200000 <__vectors_base__>:
  200000:	20000400 	.word	0x20000400
  200004:	002002d9 	.word	0x002002d9
  200008:	002002db 	.word	0x002002db
  20000c:	002002db 	.word	0x002002db
  200010:	002002db 	.word	0x002002db
  200014:	002002db 	.word	0x002002db
  200018:	002002db 	.word	0x002002db
  20001c:	002002db 	.word	0x002002db
  200020:	002002db 	.word	0x002002db
  200024:	002002db 	.word	0x002002db
  200028:	002002db 	.word	0x002002db
  20002c:	00205c51 	.word	0x00205c51
  200030:	002002db 	.word	0x002002db
  200034:	002002db 	.word	0x002002db
  200038:	002002db 	.word	0x002002db
  20003c:	002002db 	.word	0x002002db
  200040:	002002db 	.word	0x002002db
  200044:	002002db 	.word	0x002002db
  200048:	002002db 	.word	0x002002db
  20004c:	002002db 	.word	0x002002db
  200050:	002002db 	.word	0x002002db
  200054:	002002db 	.word	0x002002db
  200058:	002002db 	.word	0x002002db
  20005c:	002002db 	.word	0x002002db
  200060:	002002db 	.word	0x002002db
  200064:	002002db 	.word	0x002002db
  200068:	002002db 	.word	0x002002db
  20006c:	002022f1 	.word	0x002022f1
  200070:	00202351 	.word	0x00202351
  200074:	002023b1 	.word	0x002023b1
  200078:	00202411 	.word	0x00202411
  20007c:	00202471 	.word	0x00202471
  200080:	002024d1 	.word	0x002024d1
  200084:	00202531 	.word	0x00202531
  200088:	00201fc1 	.word	0x00201fc1
  20008c:	002002db 	.word	0x002002db
  200090:	002002db 	.word	0x002002db
  200094:	002002db 	.word	0x002002db
  200098:	002002db 	.word	0x002002db
  20009c:	002002db 	.word	0x002002db
  2000a0:	002002db 	.word	0x002002db
  2000a4:	002002db 	.word	0x002002db
  2000a8:	002002db 	.word	0x002002db
  2000ac:	002002db 	.word	0x002002db
  2000b0:	002019a1 	.word	0x002019a1
  2000b4:	002002db 	.word	0x002002db
  2000b8:	002019f1 	.word	0x002019f1
  2000bc:	002002db 	.word	0x002002db
  2000c0:	002002db 	.word	0x002002db
  2000c4:	002002db 	.word	0x002002db
  2000c8:	002002db 	.word	0x002002db
  2000cc:	002002db 	.word	0x002002db
  2000d0:	002002db 	.word	0x002002db
  2000d4:	002018e1 	.word	0x002018e1
  2000d8:	002002db 	.word	0x002002db
  2000dc:	002002db 	.word	0x002002db
  2000e0:	002002db 	.word	0x002002db
  2000e4:	002002db 	.word	0x002002db
  2000e8:	002002db 	.word	0x002002db
  2000ec:	002002db 	.word	0x002002db
  2000f0:	002002db 	.word	0x002002db
  2000f4:	002002db 	.word	0x002002db
  2000f8:	002002db 	.word	0x002002db
  2000fc:	00202591 	.word	0x00202591
  200100:	002002db 	.word	0x002002db
  200104:	002002db 	.word	0x002002db
  200108:	002002db 	.word	0x002002db
  20010c:	002002db 	.word	0x002002db
  200110:	002002db 	.word	0x002002db
  200114:	002002db 	.word	0x002002db
  200118:	002002db 	.word	0x002002db
  20011c:	002002db 	.word	0x002002db
  200120:	002025f1 	.word	0x002025f1
  200124:	00202651 	.word	0x00202651
  200128:	002026b1 	.word	0x002026b1
  20012c:	00202711 	.word	0x00202711
  200130:	00202771 	.word	0x00202771
  200134:	002002db 	.word	0x002002db
  200138:	002002db 	.word	0x002002db
  20013c:	002002db 	.word	0x002002db
  200140:	002002db 	.word	0x002002db
  200144:	002002db 	.word	0x002002db
  200148:	002002db 	.word	0x002002db
  20014c:	002002db 	.word	0x002002db
  200150:	002027d1 	.word	0x002027d1
  200154:	00202831 	.word	0x00202831
  200158:	00202891 	.word	0x00202891
  20015c:	002002db 	.word	0x002002db
  200160:	002002db 	.word	0x002002db
  200164:	002002db 	.word	0x002002db
  200168:	002002db 	.word	0x002002db
  20016c:	002002db 	.word	0x002002db
  200170:	002002db 	.word	0x002002db
  200174:	002002db 	.word	0x002002db
  200178:	002002db 	.word	0x002002db
  20017c:	002002db 	.word	0x002002db
  200180:	002002db 	.word	0x002002db
  200184:	002002db 	.word	0x002002db
  200188:	002002db 	.word	0x002002db
  20018c:	002002db 	.word	0x002002db
  200190:	002002db 	.word	0x002002db
  200194:	002002db 	.word	0x002002db
  200198:	002002db 	.word	0x002002db
  20019c:	002002db 	.word	0x002002db
  2001a0:	002002db 	.word	0x002002db
  2001a4:	002002db 	.word	0x002002db
  2001a8:	002002db 	.word	0x002002db
  2001ac:	002002db 	.word	0x002002db
  2001b0:	002002db 	.word	0x002002db
  2001b4:	002002db 	.word	0x002002db
  2001b8:	002002db 	.word	0x002002db
  2001bc:	002002db 	.word	0x002002db
  2001c0:	002002db 	.word	0x002002db
  2001c4:	002002db 	.word	0x002002db
  2001c8:	002002db 	.word	0x002002db
  2001cc:	002002db 	.word	0x002002db
  2001d0:	002002db 	.word	0x002002db
  2001d4:	002002db 	.word	0x002002db
  2001d8:	002002db 	.word	0x002002db
  2001dc:	002002db 	.word	0x002002db
  2001e0:	002002db 	.word	0x002002db
  2001e4:	002002db 	.word	0x002002db
  2001e8:	002002db 	.word	0x002002db
  2001ec:	002002db 	.word	0x002002db
  2001f0:	002002db 	.word	0x002002db
  2001f4:	002002db 	.word	0x002002db
  2001f8:	002002db 	.word	0x002002db
  2001fc:	002002db 	.word	0x002002db

Disassembly of section .text:

00200200 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
  200200:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
  200202:	4826      	ldr	r0, [pc, #152]	; (20029c <_crt0_entry+0x9c>)
                msr     MSP, r0
  200204:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
  200208:	4825      	ldr	r0, [pc, #148]	; (2002a0 <_crt0_entry+0xa0>)
                msr     PSP, r0
  20020a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                /* Initial VTOR position enforced.*/
                ldr     r0, =_vectors
  20020e:	4825      	ldr	r0, [pc, #148]	; (2002a4 <_crt0_entry+0xa4>)
                ldr     r1, =SCB_VTOR
  200210:	4925      	ldr	r1, [pc, #148]	; (2002a8 <_crt0_entry+0xa8>)
                str     r0, [r1]
  200212:	6008      	str	r0, [r1, #0]
                movt    r1, #SCB_FPDSCR >> 16
                str     r0, [r1]
#endif

                /* CONTROL register initialization as configured.*/
                movs    r0, #CRT0_CONTROL_INIT
  200214:	2002      	movs	r0, #2
                msr     CONTROL, r0
  200216:	f380 8814 	msr	CONTROL, r0
                isb
  20021a:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __cpu_init
  20021e:	f000 f9c7 	bl	2005b0 <__cpu_init>
#endif

                /* Early initialization.*/
                bl      __early_init
  200222:	f003 f965 	bl	2034f0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
  200226:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
  20022a:	4920      	ldr	r1, [pc, #128]	; (2002ac <_crt0_entry+0xac>)
                ldr     r2, =__main_stack_end__
  20022c:	4a1b      	ldr	r2, [pc, #108]	; (20029c <_crt0_entry+0x9c>)
.Lmsloop:
                cmp     r1, r2
  20022e:	4291      	cmp	r1, r2
                itt     lo
  200230:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200232:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lmsloop
  200236:	e7fa      	bcc.n	20022e <_crt0_entry+0x2e>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
  200238:	491d      	ldr	r1, [pc, #116]	; (2002b0 <_crt0_entry+0xb0>)
                ldr     r2, =__process_stack_end__
  20023a:	4a19      	ldr	r2, [pc, #100]	; (2002a0 <_crt0_entry+0xa0>)
.Lpsloop:
                cmp     r1, r2
  20023c:	4291      	cmp	r1, r2
                itt     lo
  20023e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200240:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lpsloop
  200244:	e7fa      	bcc.n	20023c <_crt0_entry+0x3c>

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                ldr     r1, =__textdata_base__
  200246:	491b      	ldr	r1, [pc, #108]	; (2002b4 <_crt0_entry+0xb4>)
                ldr     r2, =__data_base__
  200248:	4a1b      	ldr	r2, [pc, #108]	; (2002b8 <_crt0_entry+0xb8>)
                ldr     r3, =__data_end__
  20024a:	4b1c      	ldr	r3, [pc, #112]	; (2002bc <_crt0_entry+0xbc>)
.Ldloop:
                cmp     r2, r3
  20024c:	429a      	cmp	r2, r3
                ittt    lo
  20024e:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
  200250:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
  200254:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     .Ldloop
  200258:	e7f8      	bcc.n	20024c <_crt0_entry+0x4c>

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the BSS
                   size is a multiple of 4 so the linker file must ensure
                   this.*/
                movs    r0, #0
  20025a:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
  20025c:	4918      	ldr	r1, [pc, #96]	; (2002c0 <_crt0_entry+0xc0>)
                ldr     r2, =__bss_end__
  20025e:	4a19      	ldr	r2, [pc, #100]	; (2002c4 <_crt0_entry+0xc4>)
.Lbloop:
                cmp     r1, r2
  200260:	4291      	cmp	r1, r2
                itt     lo
  200262:	bf3c      	itt	cc
                strlo   r0, [r1], #4
  200264:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     .Lbloop
  200268:	e7fa      	bcc.n	200260 <_crt0_entry+0x60>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
  20026a:	f000 f9b9 	bl	2005e0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
  20026e:	f000 f9a7 	bl	2005c0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
  200272:	4c15      	ldr	r4, [pc, #84]	; (2002c8 <_crt0_entry+0xc8>)
                ldr     r5, =__init_array_end__
  200274:	4d15      	ldr	r5, [pc, #84]	; (2002cc <_crt0_entry+0xcc>)
.Linitloop:
                cmp     r4, r5
  200276:	42ac      	cmp	r4, r5
                bge     .Lendinitloop
  200278:	da03      	bge.n	200282 <_crt0_entry+0x82>
                ldr     r1, [r4], #4
  20027a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  20027e:	4788      	blx	r1
                b       .Linitloop
  200280:	e7f9      	b.n	200276 <_crt0_entry+0x76>
.Lendinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
  200282:	f005 fdd5 	bl	205e30 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
  200286:	4c12      	ldr	r4, [pc, #72]	; (2002d0 <_crt0_entry+0xd0>)
                ldr     r5, =__fini_array_end__
  200288:	4d12      	ldr	r5, [pc, #72]	; (2002d4 <_crt0_entry+0xd4>)
.Lfiniloop:
                cmp     r4, r5
  20028a:	42ac      	cmp	r4, r5
                bge     .Lendfiniloop
  20028c:	da03      	bge.n	200296 <_crt0_entry+0x96>
                ldr     r1, [r4], #4
  20028e:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
  200292:	4788      	blx	r1
                b       .Lfiniloop
  200294:	e7f9      	b.n	20028a <_crt0_entry+0x8a>
.Lendfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
  200296:	f000 b99b 	b.w	2005d0 <__default_exit>
  20029a:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
  20029c:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
  2002a0:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
  2002a4:	00200000 	.word	0x00200000
                ldr     r1, =SCB_VTOR
  2002a8:	e000ed08 	.word	0xe000ed08
                ldr     r1, =__main_stack_base__
  2002ac:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
  2002b0:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
  2002b4:	08006664 	.word	0x08006664
                ldr     r2, =__data_base__
  2002b8:	20010000 	.word	0x20010000
                ldr     r3, =__data_end__
  2002bc:	20010000 	.word	0x20010000
                ldr     r1, =__bss_base__
  2002c0:	20000800 	.word	0x20000800
                ldr     r2, =__bss_end__
  2002c4:	20001680 	.word	0x20001680
                ldr     r4, =__init_array_base__
  2002c8:	00200200 	.word	0x00200200
                ldr     r5, =__init_array_end__
  2002cc:	00200200 	.word	0x00200200
                ldr     r4, =__fini_array_base__
  2002d0:	00200200 	.word	0x00200200
                ldr     r5, =__fini_array_end__
  2002d4:	00200200 	.word	0x00200200

002002d8 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
  2002d8:	e792      	b.n	200200 <_crt0_entry>

002002da <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
  2002da:	f000 f800 	bl	2002de <_unhandled_exception>

002002de <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
  2002de:	e7fe      	b.n	2002de <_unhandled_exception>

002002e0 <__port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  __port_switch
__port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
  2002e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                /* Saving FPU context.*/
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
  2002e4:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
  2002e8:	f8d0 d00c 	ldr.w	sp, [r0, #12]

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  2002ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

002002f0 <__port_thread_start>:
__port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      __port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
  2002f0:	f003 fa1e 	bl	203730 <__dbg_check_unlock>
                bl      __stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
  2002f4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
  2002f6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
  2002fa:	4628      	mov	r0, r5
                blx     r4
  2002fc:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
  2002fe:	2000      	movs	r0, #0
                bl      chThdExit
  200300:	f004 ffce 	bl	2052a0 <chThdExit>
1:              b       1b
  200304:	e7fe      	b.n	200304 <__port_thread_start+0x14>

00200306 <__port_switch_from_isr>:
__port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      __stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_lock
  200306:	f003 f9eb 	bl	2036e0 <__dbg_check_lock>
#endif
                bl      chSchDoPreemption
  20030a:	f004 fb29 	bl	204960 <chSchDoPreemption>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      __dbg_check_unlock
  20030e:	f003 fa0f 	bl	203730 <__dbg_check_unlock>

00200312 <__port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
  200312:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
1:              b       1b
  200314:	e7fe      	b.n	200314 <__port_exit_from_isr+0x2>
	...

00200318 <memcpy>:
  200318:	4684      	mov	ip, r0
  20031a:	ea41 0300 	orr.w	r3, r1, r0
  20031e:	f013 0303 	ands.w	r3, r3, #3
  200322:	d16d      	bne.n	200400 <memcpy+0xe8>
  200324:	3a40      	subs	r2, #64	; 0x40
  200326:	d341      	bcc.n	2003ac <memcpy+0x94>
  200328:	f851 3b04 	ldr.w	r3, [r1], #4
  20032c:	f840 3b04 	str.w	r3, [r0], #4
  200330:	f851 3b04 	ldr.w	r3, [r1], #4
  200334:	f840 3b04 	str.w	r3, [r0], #4
  200338:	f851 3b04 	ldr.w	r3, [r1], #4
  20033c:	f840 3b04 	str.w	r3, [r0], #4
  200340:	f851 3b04 	ldr.w	r3, [r1], #4
  200344:	f840 3b04 	str.w	r3, [r0], #4
  200348:	f851 3b04 	ldr.w	r3, [r1], #4
  20034c:	f840 3b04 	str.w	r3, [r0], #4
  200350:	f851 3b04 	ldr.w	r3, [r1], #4
  200354:	f840 3b04 	str.w	r3, [r0], #4
  200358:	f851 3b04 	ldr.w	r3, [r1], #4
  20035c:	f840 3b04 	str.w	r3, [r0], #4
  200360:	f851 3b04 	ldr.w	r3, [r1], #4
  200364:	f840 3b04 	str.w	r3, [r0], #4
  200368:	f851 3b04 	ldr.w	r3, [r1], #4
  20036c:	f840 3b04 	str.w	r3, [r0], #4
  200370:	f851 3b04 	ldr.w	r3, [r1], #4
  200374:	f840 3b04 	str.w	r3, [r0], #4
  200378:	f851 3b04 	ldr.w	r3, [r1], #4
  20037c:	f840 3b04 	str.w	r3, [r0], #4
  200380:	f851 3b04 	ldr.w	r3, [r1], #4
  200384:	f840 3b04 	str.w	r3, [r0], #4
  200388:	f851 3b04 	ldr.w	r3, [r1], #4
  20038c:	f840 3b04 	str.w	r3, [r0], #4
  200390:	f851 3b04 	ldr.w	r3, [r1], #4
  200394:	f840 3b04 	str.w	r3, [r0], #4
  200398:	f851 3b04 	ldr.w	r3, [r1], #4
  20039c:	f840 3b04 	str.w	r3, [r0], #4
  2003a0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003a4:	f840 3b04 	str.w	r3, [r0], #4
  2003a8:	3a40      	subs	r2, #64	; 0x40
  2003aa:	d2bd      	bcs.n	200328 <memcpy+0x10>
  2003ac:	3230      	adds	r2, #48	; 0x30
  2003ae:	d311      	bcc.n	2003d4 <memcpy+0xbc>
  2003b0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003b4:	f840 3b04 	str.w	r3, [r0], #4
  2003b8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003bc:	f840 3b04 	str.w	r3, [r0], #4
  2003c0:	f851 3b04 	ldr.w	r3, [r1], #4
  2003c4:	f840 3b04 	str.w	r3, [r0], #4
  2003c8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003cc:	f840 3b04 	str.w	r3, [r0], #4
  2003d0:	3a10      	subs	r2, #16
  2003d2:	d2ed      	bcs.n	2003b0 <memcpy+0x98>
  2003d4:	320c      	adds	r2, #12
  2003d6:	d305      	bcc.n	2003e4 <memcpy+0xcc>
  2003d8:	f851 3b04 	ldr.w	r3, [r1], #4
  2003dc:	f840 3b04 	str.w	r3, [r0], #4
  2003e0:	3a04      	subs	r2, #4
  2003e2:	d2f9      	bcs.n	2003d8 <memcpy+0xc0>
  2003e4:	3204      	adds	r2, #4
  2003e6:	d008      	beq.n	2003fa <memcpy+0xe2>
  2003e8:	07d2      	lsls	r2, r2, #31
  2003ea:	bf1c      	itt	ne
  2003ec:	f811 3b01 	ldrbne.w	r3, [r1], #1
  2003f0:	f800 3b01 	strbne.w	r3, [r0], #1
  2003f4:	d301      	bcc.n	2003fa <memcpy+0xe2>
  2003f6:	880b      	ldrh	r3, [r1, #0]
  2003f8:	8003      	strh	r3, [r0, #0]
  2003fa:	4660      	mov	r0, ip
  2003fc:	4770      	bx	lr
  2003fe:	bf00      	nop
  200400:	2a08      	cmp	r2, #8
  200402:	d313      	bcc.n	20042c <memcpy+0x114>
  200404:	078b      	lsls	r3, r1, #30
  200406:	d08d      	beq.n	200324 <memcpy+0xc>
  200408:	f010 0303 	ands.w	r3, r0, #3
  20040c:	d08a      	beq.n	200324 <memcpy+0xc>
  20040e:	f1c3 0304 	rsb	r3, r3, #4
  200412:	1ad2      	subs	r2, r2, r3
  200414:	07db      	lsls	r3, r3, #31
  200416:	bf1c      	itt	ne
  200418:	f811 3b01 	ldrbne.w	r3, [r1], #1
  20041c:	f800 3b01 	strbne.w	r3, [r0], #1
  200420:	d380      	bcc.n	200324 <memcpy+0xc>
  200422:	f831 3b02 	ldrh.w	r3, [r1], #2
  200426:	f820 3b02 	strh.w	r3, [r0], #2
  20042a:	e77b      	b.n	200324 <memcpy+0xc>
  20042c:	3a04      	subs	r2, #4
  20042e:	d3d9      	bcc.n	2003e4 <memcpy+0xcc>
  200430:	3a01      	subs	r2, #1
  200432:	f811 3b01 	ldrb.w	r3, [r1], #1
  200436:	f800 3b01 	strb.w	r3, [r0], #1
  20043a:	d2f9      	bcs.n	200430 <memcpy+0x118>
  20043c:	780b      	ldrb	r3, [r1, #0]
  20043e:	7003      	strb	r3, [r0, #0]
  200440:	784b      	ldrb	r3, [r1, #1]
  200442:	7043      	strb	r3, [r0, #1]
  200444:	788b      	ldrb	r3, [r1, #2]
  200446:	7083      	strb	r3, [r0, #2]
  200448:	4660      	mov	r0, ip
  20044a:	4770      	bx	lr
  20044c:	0000      	movs	r0, r0
	...

00200450 <SCB_EnableICache>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
  200450:	f3bf 8f4f 	dsb	sy
}
  200454:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  200456:	f3bf 8f6f 	isb	sy
}
  20045a:	bf00      	nop
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
  20045c:	4b0b      	ldr	r3, [pc, #44]	; (20048c <SCB_EnableICache+0x3c>)
  20045e:	2200      	movs	r2, #0
  200460:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  200464:	f3bf 8f4f 	dsb	sy
}
  200468:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  20046a:	f3bf 8f6f 	isb	sy
}
  20046e:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
  200470:	4b06      	ldr	r3, [pc, #24]	; (20048c <SCB_EnableICache+0x3c>)
  200472:	695b      	ldr	r3, [r3, #20]
  200474:	4a05      	ldr	r2, [pc, #20]	; (20048c <SCB_EnableICache+0x3c>)
  200476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  20047a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  20047c:	f3bf 8f4f 	dsb	sy
}
  200480:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  200482:	f3bf 8f6f 	isb	sy
}
  200486:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
  200488:	bf00      	nop
  20048a:	4770      	bx	lr
  20048c:	e000ed00 	.word	0xe000ed00

00200490 <SCB_InvalidateICache>:
  __ASM volatile ("dsb 0xF":::"memory");
  200490:	f3bf 8f4f 	dsb	sy
}
  200494:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  200496:	f3bf 8f6f 	isb	sy
}
  20049a:	bf00      	nop
__STATIC_INLINE void SCB_InvalidateICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;
  20049c:	4b05      	ldr	r3, [pc, #20]	; (2004b4 <SCB_InvalidateICache+0x24>)
  20049e:	2200      	movs	r2, #0
  2004a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
  2004a4:	f3bf 8f4f 	dsb	sy
}
  2004a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  2004aa:	f3bf 8f6f 	isb	sy
}
  2004ae:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
  2004b0:	bf00      	nop
  2004b2:	4770      	bx	lr
  2004b4:	e000ed00 	.word	0xe000ed00
	...

002004c0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
  2004c0:	b084      	sub	sp, #16
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  2004c2:	4b1e      	ldr	r3, [pc, #120]	; (20053c <SCB_EnableDCache+0x7c>)
  2004c4:	2200      	movs	r2, #0
  2004c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  2004ca:	f3bf 8f4f 	dsb	sy
}
  2004ce:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
  2004d0:	4b1a      	ldr	r3, [pc, #104]	; (20053c <SCB_EnableDCache+0x7c>)
  2004d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  2004d6:	9301      	str	r3, [sp, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  2004d8:	9b01      	ldr	r3, [sp, #4]
  2004da:	0b5b      	lsrs	r3, r3, #13
  2004dc:	f3c3 030e 	ubfx	r3, r3, #0, #15
  2004e0:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  2004e2:	9b01      	ldr	r3, [sp, #4]
  2004e4:	08db      	lsrs	r3, r3, #3
  2004e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
  2004ea:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2004ec:	9b03      	ldr	r3, [sp, #12]
  2004ee:	015a      	lsls	r2, r3, #5
  2004f0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  2004f4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
  2004f6:	9a02      	ldr	r2, [sp, #8]
  2004f8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
  2004fa:	4910      	ldr	r1, [pc, #64]	; (20053c <SCB_EnableDCache+0x7c>)
  2004fc:	4313      	orrs	r3, r2
  2004fe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  200502:	9b02      	ldr	r3, [sp, #8]
  200504:	1e5a      	subs	r2, r3, #1
  200506:	9202      	str	r2, [sp, #8]
  200508:	2b00      	cmp	r3, #0
  20050a:	d1ef      	bne.n	2004ec <SCB_EnableDCache+0x2c>
    } while(sets-- != 0U);
  20050c:	9b03      	ldr	r3, [sp, #12]
  20050e:	1e5a      	subs	r2, r3, #1
  200510:	9203      	str	r2, [sp, #12]
  200512:	2b00      	cmp	r3, #0
  200514:	d1e5      	bne.n	2004e2 <SCB_EnableDCache+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
  200516:	f3bf 8f4f 	dsb	sy
}
  20051a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
  20051c:	4b07      	ldr	r3, [pc, #28]	; (20053c <SCB_EnableDCache+0x7c>)
  20051e:	695b      	ldr	r3, [r3, #20]
  200520:	4a06      	ldr	r2, [pc, #24]	; (20053c <SCB_EnableDCache+0x7c>)
  200522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  200526:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
  200528:	f3bf 8f4f 	dsb	sy
}
  20052c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  20052e:	f3bf 8f6f 	isb	sy
}
  200532:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
  200534:	bf00      	nop
  200536:	b004      	add	sp, #16
  200538:	4770      	bx	lr
  20053a:	bf00      	nop
  20053c:	e000ed00 	.word	0xe000ed00

00200540 <SCB_CleanDCache>:
/**
  \brief   Clean D-Cache
  \details Cleans D-Cache
  */
__STATIC_INLINE void SCB_CleanDCache (void)
{
  200540:	b084      	sub	sp, #16
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
  200542:	4b19      	ldr	r3, [pc, #100]	; (2005a8 <SCB_CleanDCache+0x68>)
  200544:	2200      	movs	r2, #0
  200546:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
  20054a:	f3bf 8f4f 	dsb	sy
}
  20054e:	bf00      	nop
   __DSB();

    ccsidr = SCB->CCSIDR;
  200550:	4b15      	ldr	r3, [pc, #84]	; (2005a8 <SCB_CleanDCache+0x68>)
  200552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  200556:	9301      	str	r3, [sp, #4]

                                            /* clean D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
  200558:	9b01      	ldr	r3, [sp, #4]
  20055a:	0b5b      	lsrs	r3, r3, #13
  20055c:	f3c3 030e 	ubfx	r3, r3, #0, #15
  200560:	9303      	str	r3, [sp, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
  200562:	9b01      	ldr	r3, [sp, #4]
  200564:	08db      	lsrs	r3, r3, #3
  200566:	f3c3 0309 	ubfx	r3, r3, #0, #10
  20056a:	9302      	str	r3, [sp, #8]
      do {
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  20056c:	9b03      	ldr	r3, [sp, #12]
  20056e:	015a      	lsls	r2, r3, #5
  200570:	f643 73e0 	movw	r3, #16352	; 0x3fe0
  200574:	4013      	ands	r3, r2
                      ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
  200576:	9a02      	ldr	r2, [sp, #8]
  200578:	0792      	lsls	r2, r2, #30
        SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
  20057a:	490b      	ldr	r1, [pc, #44]	; (2005a8 <SCB_CleanDCache+0x68>)
  20057c:	4313      	orrs	r3, r2
  20057e:	f8c1 326c 	str.w	r3, [r1, #620]	; 0x26c
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
  200582:	9b02      	ldr	r3, [sp, #8]
  200584:	1e5a      	subs	r2, r3, #1
  200586:	9202      	str	r2, [sp, #8]
  200588:	2b00      	cmp	r3, #0
  20058a:	d1ef      	bne.n	20056c <SCB_CleanDCache+0x2c>
    } while(sets-- != 0U);
  20058c:	9b03      	ldr	r3, [sp, #12]
  20058e:	1e5a      	subs	r2, r3, #1
  200590:	9203      	str	r2, [sp, #12]
  200592:	2b00      	cmp	r3, #0
  200594:	d1e5      	bne.n	200562 <SCB_CleanDCache+0x22>
  __ASM volatile ("dsb 0xF":::"memory");
  200596:	f3bf 8f4f 	dsb	sy
}
  20059a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
  20059c:	f3bf 8f6f 	isb	sy
}
  2005a0:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
  2005a2:	bf00      	nop
  2005a4:	b004      	add	sp, #16
  2005a6:	4770      	bx	lr
  2005a8:	e000ed00 	.word	0xe000ed00
  2005ac:	00000000 	.word	0x00000000

002005b0 <__cpu_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __cpu_init(void) {
  2005b0:	b508      	push	{r3, lr}

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  2005b2:	f7ff ff4d 	bl	200450 <SCB_EnableICache>
  SCB_EnableDCache();
  2005b6:	f7ff ff83 	bl	2004c0 <SCB_EnableDCache>
#endif
}
  2005ba:	bf00      	nop
  2005bc:	bd08      	pop	{r3, pc}
  2005be:	bf00      	nop

002005c0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
  2005c0:	bf00      	nop
  2005c2:	4770      	bx	lr
	...

002005d0 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
  2005d0:	e7fe      	b.n	2005d0 <__default_exit>
  2005d2:	bf00      	nop
	...

002005e0 <__init_ram_areas>:
#endif

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
  2005e0:	b500      	push	{lr}
  2005e2:	b085      	sub	sp, #20
#if CRT0_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
  2005e4:	4b19      	ldr	r3, [pc, #100]	; (20064c <__init_ram_areas+0x6c>)
  2005e6:	9303      	str	r3, [sp, #12]

  do {
    uint32_t *tp = rap->init_text_area;
  2005e8:	9b03      	ldr	r3, [sp, #12]
  2005ea:	681b      	ldr	r3, [r3, #0]
  2005ec:	9302      	str	r3, [sp, #8]
    uint32_t *p = rap->init_area;
  2005ee:	9b03      	ldr	r3, [sp, #12]
  2005f0:	685b      	ldr	r3, [r3, #4]
  2005f2:	9301      	str	r3, [sp, #4]

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
  2005f4:	e009      	b.n	20060a <__init_ram_areas+0x2a>
      *p = *tp;
  2005f6:	9b02      	ldr	r3, [sp, #8]
  2005f8:	681a      	ldr	r2, [r3, #0]
  2005fa:	9b01      	ldr	r3, [sp, #4]
  2005fc:	601a      	str	r2, [r3, #0]
      p++;
  2005fe:	9b01      	ldr	r3, [sp, #4]
  200600:	3304      	adds	r3, #4
  200602:	9301      	str	r3, [sp, #4]
      tp++;
  200604:	9b02      	ldr	r3, [sp, #8]
  200606:	3304      	adds	r3, #4
  200608:	9302      	str	r3, [sp, #8]
    while (p < rap->clear_area) {
  20060a:	9b03      	ldr	r3, [sp, #12]
  20060c:	689b      	ldr	r3, [r3, #8]
  20060e:	9a01      	ldr	r2, [sp, #4]
  200610:	429a      	cmp	r2, r3
  200612:	d3f0      	bcc.n	2005f6 <__init_ram_areas+0x16>
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
  200614:	e005      	b.n	200622 <__init_ram_areas+0x42>
      *p = 0;
  200616:	9b01      	ldr	r3, [sp, #4]
  200618:	2200      	movs	r2, #0
  20061a:	601a      	str	r2, [r3, #0]
      p++;
  20061c:	9b01      	ldr	r3, [sp, #4]
  20061e:	3304      	adds	r3, #4
  200620:	9301      	str	r3, [sp, #4]
    while (p < rap->no_init_area) {
  200622:	9b03      	ldr	r3, [sp, #12]
  200624:	68db      	ldr	r3, [r3, #12]
  200626:	9a01      	ldr	r2, [sp, #4]
  200628:	429a      	cmp	r2, r3
  20062a:	d3f4      	bcc.n	200616 <__init_ram_areas+0x36>
    }
    rap++;
  20062c:	9b03      	ldr	r3, [sp, #12]
  20062e:	3310      	adds	r3, #16
  200630:	9303      	str	r3, [sp, #12]
  }
  while (rap < &ram_areas[CRT0_AREAS_NUMBER]);
  200632:	9b03      	ldr	r3, [sp, #12]
  200634:	4a06      	ldr	r2, [pc, #24]	; (200650 <__init_ram_areas+0x70>)
  200636:	4293      	cmp	r3, r2
  200638:	d3d6      	bcc.n	2005e8 <__init_ram_areas+0x8>
#if CORTEX_MODEL == 7
  /* PM0253 - 4.8.7 Cache maintenance design hints and tips - required
     for self-modifying code.*/
  SCB_CleanDCache();
  20063a:	f7ff ff81 	bl	200540 <SCB_CleanDCache>
  SCB_InvalidateICache();
  20063e:	f7ff ff27 	bl	200490 <SCB_InvalidateICache>
#endif
#endif
}
  200642:	bf00      	nop
  200644:	b005      	add	sp, #20
  200646:	f85d fb04 	ldr.w	pc, [sp], #4
  20064a:	bf00      	nop
  20064c:	08005ec8 	.word	0x08005ec8
  200650:	08005f48 	.word	0x08005f48
	...

00200660 <osalInit>:
 *
 * @api
 */
static inline void osalInit(void) {

}
  200660:	bf00      	nop
  200662:	4770      	bx	lr
	...

00200670 <halInit>:
 *          board-specific initialization is performed by invoking
 *          @p boardInit() (usually defined in @p board.c).
 *
 * @init
 */
void halInit(void) {
  200670:	b508      	push	{r3, lr}

  /* Initializes the OS Abstraction Layer.*/
  osalInit();
  200672:	f7ff fff5 	bl	200660 <osalInit>

  /* Platform low level initializations.*/
  hal_lld_init();
  200676:	f001 fa6b 	bl	201b50 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
  20067a:	f002 fa19 	bl	202ab0 <_pal_lld_init>
#else
  palInit(&pal_default_config);
#endif
#endif
#if (HAL_USE_ADC == TRUE) || defined(__DOXYGEN__)
  adcInit();
  20067e:	f000 fc77 	bl	200f70 <adcInit>
#endif
#if (HAL_USE_EFL == TRUE) || defined(__DOXYGEN__)
  eflInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
  200682:	f000 fdd5 	bl	201230 <gptInit>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
  200686:	f000 ffdb 	bl	201640 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
  20068a:	f002 ff39 	bl	203500 <boardInit>
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
  20068e:	f000 f84f 	bl	200730 <stInit>
#endif
}
  200692:	bf00      	nop
  200694:	bd08      	pop	{r3, pc}
  200696:	bf00      	nop
	...

002006a0 <st_lld_get_counter>:
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
  2006a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2006a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
  2006a6:	4618      	mov	r0, r3
  2006a8:	4770      	bx	lr
  2006aa:	bf00      	nop
  2006ac:	0000      	movs	r0, r0
	...

002006b0 <st_lld_start_alarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t abstime) {
  2006b0:	b082      	sub	sp, #8
  2006b2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
  2006b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  2006b8:	9b01      	ldr	r3, [sp, #4]
  2006ba:	6353      	str	r3, [r2, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
  2006bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2006c0:	2200      	movs	r2, #0
  2006c2:	611a      	str	r2, [r3, #16]
#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
  2006c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2006c8:	2202      	movs	r2, #2
  2006ca:	60da      	str	r2, [r3, #12]
#else
  STM32_ST_TIM->DIER  |= STM32_TIM_DIER_CC1IE;
#endif
}
  2006cc:	bf00      	nop
  2006ce:	b002      	add	sp, #8
  2006d0:	4770      	bx	lr
  2006d2:	bf00      	nop
	...

002006e0 <st_lld_stop_alarm>:
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
  2006e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  2006e4:	2200      	movs	r2, #0
  2006e6:	60da      	str	r2, [r3, #12]
#else
 STM32_ST_TIM->DIER &= ~STM32_TIM_DIER_CC1IE;
#endif
}
  2006e8:	bf00      	nop
  2006ea:	4770      	bx	lr
  2006ec:	0000      	movs	r0, r0
	...

002006f0 <st_lld_set_alarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {
  2006f0:	b082      	sub	sp, #8
  2006f2:	9001      	str	r0, [sp, #4]

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
  2006f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  2006f8:	9b01      	ldr	r3, [sp, #4]
  2006fa:	6353      	str	r3, [r2, #52]	; 0x34
}
  2006fc:	bf00      	nop
  2006fe:	b002      	add	sp, #8
  200700:	4770      	bx	lr
  200702:	bf00      	nop
	...

00200710 <st_lld_is_alarm_active>:
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
  200710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  200714:	68db      	ldr	r3, [r3, #12]
  200716:	f003 0302 	and.w	r3, r3, #2
  20071a:	2b00      	cmp	r3, #0
  20071c:	bf14      	ite	ne
  20071e:	2301      	movne	r3, #1
  200720:	2300      	moveq	r3, #0
  200722:	b2db      	uxtb	r3, r3
}
  200724:	4618      	mov	r0, r3
  200726:	4770      	bx	lr
	...

00200730 <stInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void stInit(void) {
  200730:	b508      	push	{r3, lr}

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
  200732:	f002 fabd 	bl	202cb0 <st_lld_init>
}
  200736:	bf00      	nop
  200738:	bd08      	pop	{r3, pc}
  20073a:	bf00      	nop
  20073c:	0000      	movs	r0, r0
	...

00200740 <stGetCounter>:
 *
 * @return              The counter value.
 *
 * @api
 */
systime_t stGetCounter(void) {
  200740:	b508      	push	{r3, lr}

  return st_lld_get_counter();
  200742:	f7ff ffad 	bl	2006a0 <st_lld_get_counter>
  200746:	4603      	mov	r3, r0
}
  200748:	4618      	mov	r0, r3
  20074a:	bd08      	pop	{r3, pc}
  20074c:	0000      	movs	r0, r0
	...

00200750 <stStartAlarm>:
 *
 * @param[in] abstime   the time to be set for the first alarm
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {
  200750:	b500      	push	{lr}
  200752:	b083      	sub	sp, #12
  200754:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() == false, "already active");
  200756:	f000 f833 	bl	2007c0 <stIsAlarmActive>
  20075a:	4603      	mov	r3, r0
  20075c:	2b00      	cmp	r3, #0
  20075e:	d002      	beq.n	200766 <stStartAlarm+0x16>
  200760:	4804      	ldr	r0, [pc, #16]	; (200774 <stStartAlarm+0x24>)
  200762:	f002 ff6d 	bl	203640 <chSysHalt>

  st_lld_start_alarm(abstime);
  200766:	9801      	ldr	r0, [sp, #4]
  200768:	f7ff ffa2 	bl	2006b0 <st_lld_start_alarm>
}
  20076c:	bf00      	nop
  20076e:	b003      	add	sp, #12
  200770:	f85d fb04 	ldr.w	pc, [sp], #4
  200774:	08005f48 	.word	0x08005f48
	...

00200780 <stStopAlarm>:
 * @note    This functionality is only available in free running mode, the
 *          behavior in periodic mode is undefined.
 *
 * @api
 */
void stStopAlarm(void) {
  200780:	b508      	push	{r3, lr}

  st_lld_stop_alarm();
  200782:	f7ff ffad 	bl	2006e0 <st_lld_stop_alarm>
}
  200786:	bf00      	nop
  200788:	bd08      	pop	{r3, pc}
  20078a:	bf00      	nop
  20078c:	0000      	movs	r0, r0
	...

00200790 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
  200790:	b500      	push	{lr}
  200792:	b083      	sub	sp, #12
  200794:	9001      	str	r0, [sp, #4]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
  200796:	f000 f813 	bl	2007c0 <stIsAlarmActive>
  20079a:	4603      	mov	r3, r0
  20079c:	f083 0301 	eor.w	r3, r3, #1
  2007a0:	b2db      	uxtb	r3, r3
  2007a2:	2b00      	cmp	r3, #0
  2007a4:	d002      	beq.n	2007ac <stSetAlarm+0x1c>
  2007a6:	4805      	ldr	r0, [pc, #20]	; (2007bc <stSetAlarm+0x2c>)
  2007a8:	f002 ff4a 	bl	203640 <chSysHalt>

  st_lld_set_alarm(abstime);
  2007ac:	9801      	ldr	r0, [sp, #4]
  2007ae:	f7ff ff9f 	bl	2006f0 <st_lld_set_alarm>
}
  2007b2:	bf00      	nop
  2007b4:	b003      	add	sp, #12
  2007b6:	f85d fb04 	ldr.w	pc, [sp], #4
  2007ba:	bf00      	nop
  2007bc:	08005f58 	.word	0x08005f58

002007c0 <stIsAlarmActive>:
 * @retval false        if the alarm is not active.
 * @retval true         is the alarm is active
 *
 * @api
 */
bool stIsAlarmActive(void) {
  2007c0:	b508      	push	{r3, lr}

  return st_lld_is_alarm_active();
  2007c2:	f7ff ffa5 	bl	200710 <st_lld_is_alarm_active>
  2007c6:	4603      	mov	r3, r0
}
  2007c8:	4618      	mov	r0, r3
  2007ca:	bd08      	pop	{r3, pc}
  2007cc:	0000      	movs	r0, r0
	...

002007d0 <chSysLock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to disabling interrupts.
 *
 * @special
 */
static inline void chSysLock(void) {
  2007d0:	b500      	push	{lr}
  2007d2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  2007d4:	b672      	cpsid	i
}
  2007d6:	bf00      	nop
  2007d8:	2330      	movs	r3, #48	; 0x30
  2007da:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2007dc:	9b01      	ldr	r3, [sp, #4]
  2007de:	f383 8811 	msr	BASEPRI, r3
}
  2007e2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  2007e4:	b662      	cpsie	i
}
  2007e6:	bf00      	nop
#endif
#endif
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __disable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
  2007e8:	bf00      	nop

  port_lock();
  __stats_start_measure_crit_thd();
  __dbg_check_lock();
  2007ea:	f002 ff79 	bl	2036e0 <__dbg_check_lock>
}
  2007ee:	bf00      	nop
  2007f0:	b003      	add	sp, #12
  2007f2:	f85d fb04 	ldr.w	pc, [sp], #4
  2007f6:	bf00      	nop
	...

00200800 <chSysUnlock.lto_priv.1>:
 * @note    The exact behavior of this function is port-dependent and could
 *          not be limited to enabling interrupts.
 *
 * @special
 */
static inline void chSysUnlock(void) {
  200800:	b500      	push	{lr}
  200802:	b083      	sub	sp, #12

  __dbg_check_unlock();
  200804:	f002 ff94 	bl	203730 <__dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchRescheduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  200808:	4b12      	ldr	r3, [pc, #72]	; (200854 <chSysUnlock.lto_priv.1+0x54>)
  20080a:	681b      	ldr	r3, [r3, #0]
  20080c:	4a11      	ldr	r2, [pc, #68]	; (200854 <chSysUnlock.lto_priv.1+0x54>)
  20080e:	4293      	cmp	r3, r2
  200810:	bf14      	ite	ne
  200812:	2301      	movne	r3, #1
  200814:	2300      	moveq	r3, #0
  200816:	b2db      	uxtb	r3, r3
  200818:	2b00      	cmp	r3, #0
  20081a:	d00f      	beq.n	20083c <chSysUnlock.lto_priv.1+0x3c>
  20081c:	4b0d      	ldr	r3, [pc, #52]	; (200854 <chSysUnlock.lto_priv.1+0x54>)
  20081e:	68db      	ldr	r3, [r3, #12]
  200820:	689a      	ldr	r2, [r3, #8]
  200822:	4b0c      	ldr	r3, [pc, #48]	; (200854 <chSysUnlock.lto_priv.1+0x54>)
  200824:	681b      	ldr	r3, [r3, #0]
  200826:	689b      	ldr	r3, [r3, #8]
  200828:	429a      	cmp	r2, r3
  20082a:	bf34      	ite	cc
  20082c:	2301      	movcc	r3, #1
  20082e:	2300      	movcs	r3, #0
  200830:	b2db      	uxtb	r3, r3
  200832:	2b00      	cmp	r3, #0
  200834:	d002      	beq.n	20083c <chSysUnlock.lto_priv.1+0x3c>
  200836:	4808      	ldr	r0, [pc, #32]	; (200858 <chSysUnlock.lto_priv.1+0x58>)
  200838:	f002 ff02 	bl	203640 <chSysHalt>
  20083c:	2300      	movs	r3, #0
  20083e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200840:	9b01      	ldr	r3, [sp, #4]
  200842:	f383 8811 	msr	BASEPRI, r3
}
  200846:	bf00      	nop
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  __set_BASEPRI(CORTEX_BASEPRI_DISABLED);
#else /* CORTEX_SIMPLIFIED_PRIORITY */
  __enable_irq();
#endif /* CORTEX_SIMPLIFIED_PRIORITY */
}
  200848:	bf00      	nop
              (currcore->rlist.current->hdr.pqueue.prio >= currcore->rlist.pqueue.next->prio),
              "priority order violation");

  port_unlock();
}
  20084a:	bf00      	nop
  20084c:	b003      	add	sp, #12
  20084e:	f85d fb04 	ldr.w	pc, [sp], #4
  200852:	bf00      	nop
  200854:	20000958 	.word	0x20000958
  200858:	08005f78 	.word	0x08005f78
  20085c:	00000000 	.word	0x00000000

00200860 <osalSysLock.lto_priv.1>:
 * @brief   Enters a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysLock(void) {
  200860:	b508      	push	{r3, lr}

  chSysLock();
  200862:	f7ff ffb5 	bl	2007d0 <chSysLock.lto_priv.1>
}
  200866:	bf00      	nop
  200868:	bd08      	pop	{r3, pc}
  20086a:	bf00      	nop
  20086c:	0000      	movs	r0, r0
	...

00200870 <osalSysUnlock.lto_priv.1>:
 * @brief   Leaves a critical zone from thread context.
 * @note    This function cannot be used for reentrant critical zones.
 *
 * @special
 */
static inline void osalSysUnlock(void) {
  200870:	b508      	push	{r3, lr}

  chSysUnlock();
  200872:	f7ff ffc5 	bl	200800 <chSysUnlock.lto_priv.1>
}
  200876:	bf00      	nop
  200878:	bd08      	pop	{r3, pc}
  20087a:	bf00      	nop
  20087c:	0000      	movs	r0, r0
	...

00200880 <osalThreadQueueObjectInit.lto_priv.1>:
 *
 * @param[out] tqp      pointer to the threads queue object
 *
 * @init
 */
static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
  200880:	b500      	push	{lr}
  200882:	b083      	sub	sp, #12
  200884:	9001      	str	r0, [sp, #4]

  chThdQueueObjectInit(tqp);
  200886:	9801      	ldr	r0, [sp, #4]
  200888:	f004 fd92 	bl	2053b0 <chThdQueueObjectInit>
}
  20088c:	bf00      	nop
  20088e:	b003      	add	sp, #12
  200890:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002008a0 <osalThreadEnqueueTimeoutS.lto_priv.1>:
 *                      specification.
 *
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {
  2008a0:	b500      	push	{lr}
  2008a2:	b083      	sub	sp, #12
  2008a4:	9001      	str	r0, [sp, #4]
  2008a6:	9100      	str	r1, [sp, #0]

  return chThdEnqueueTimeoutS(tqp, timeout);
  2008a8:	9900      	ldr	r1, [sp, #0]
  2008aa:	9801      	ldr	r0, [sp, #4]
  2008ac:	f004 fd98 	bl	2053e0 <chThdEnqueueTimeoutS>
  2008b0:	4603      	mov	r3, r0
}
  2008b2:	4618      	mov	r0, r3
  2008b4:	b003      	add	sp, #12
  2008b6:	f85d fb04 	ldr.w	pc, [sp], #4
  2008ba:	bf00      	nop
  2008bc:	0000      	movs	r0, r0
	...

002008c0 <osalThreadDequeueNextI.lto_priv.1>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  2008c0:	b500      	push	{lr}
  2008c2:	b083      	sub	sp, #12
  2008c4:	9001      	str	r0, [sp, #4]
  2008c6:	9100      	str	r1, [sp, #0]

  chThdDequeueNextI(tqp, msg);
  2008c8:	9900      	ldr	r1, [sp, #0]
  2008ca:	9801      	ldr	r0, [sp, #4]
  2008cc:	f004 fda8 	bl	205420 <chThdDequeueNextI>
}
  2008d0:	bf00      	nop
  2008d2:	b003      	add	sp, #12
  2008d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002008e0 <iq_read>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
  2008e0:	b500      	push	{lr}
  2008e2:	b087      	sub	sp, #28
  2008e4:	9003      	str	r0, [sp, #12]
  2008e6:	9102      	str	r1, [sp, #8]
  2008e8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
  2008ea:	9b01      	ldr	r3, [sp, #4]
  2008ec:	2b00      	cmp	r3, #0
  2008ee:	bf0c      	ite	eq
  2008f0:	2301      	moveq	r3, #1
  2008f2:	2300      	movne	r3, #0
  2008f4:	b2db      	uxtb	r3, r3
  2008f6:	2b00      	cmp	r3, #0
  2008f8:	d002      	beq.n	200900 <iq_read+0x20>
  2008fa:	482e      	ldr	r0, [pc, #184]	; (2009b4 <iq_read+0xd4>)
  2008fc:	f002 fea0 	bl	203640 <chSysHalt>

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
  200900:	9b03      	ldr	r3, [sp, #12]
  200902:	689b      	ldr	r3, [r3, #8]
  200904:	9a01      	ldr	r2, [sp, #4]
  200906:	429a      	cmp	r2, r3
  200908:	d902      	bls.n	200910 <iq_read+0x30>
    n = iqGetFullI(iqp);
  20090a:	9b03      	ldr	r3, [sp, #12]
  20090c:	689b      	ldr	r3, [r3, #8]
  20090e:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  200910:	9b03      	ldr	r3, [sp, #12]
  200912:	691a      	ldr	r2, [r3, #16]
  200914:	9b03      	ldr	r3, [sp, #12]
  200916:	699b      	ldr	r3, [r3, #24]
  200918:	1ad3      	subs	r3, r2, r3
  20091a:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
  20091c:	9a01      	ldr	r2, [sp, #4]
  20091e:	9b05      	ldr	r3, [sp, #20]
  200920:	429a      	cmp	r2, r3
  200922:	d20d      	bcs.n	200940 <iq_read+0x60>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  200924:	9b03      	ldr	r3, [sp, #12]
  200926:	699b      	ldr	r3, [r3, #24]
  200928:	9a01      	ldr	r2, [sp, #4]
  20092a:	4619      	mov	r1, r3
  20092c:	9802      	ldr	r0, [sp, #8]
  20092e:	f7ff fcf3 	bl	200318 <memcpy>
    iqp->q_rdptr += n;
  200932:	9b03      	ldr	r3, [sp, #12]
  200934:	699a      	ldr	r2, [r3, #24]
  200936:	9b01      	ldr	r3, [sp, #4]
  200938:	441a      	add	r2, r3
  20093a:	9b03      	ldr	r3, [sp, #12]
  20093c:	619a      	str	r2, [r3, #24]
  20093e:	e02b      	b.n	200998 <iq_read+0xb8>
  }
  else if (n > s1) {
  200940:	9a01      	ldr	r2, [sp, #4]
  200942:	9b05      	ldr	r3, [sp, #20]
  200944:	429a      	cmp	r2, r3
  200946:	d91c      	bls.n	200982 <iq_read+0xa2>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  200948:	9b03      	ldr	r3, [sp, #12]
  20094a:	699b      	ldr	r3, [r3, #24]
  20094c:	9a05      	ldr	r2, [sp, #20]
  20094e:	4619      	mov	r1, r3
  200950:	9802      	ldr	r0, [sp, #8]
  200952:	f7ff fce1 	bl	200318 <memcpy>
    bp += s1;
  200956:	9a02      	ldr	r2, [sp, #8]
  200958:	9b05      	ldr	r3, [sp, #20]
  20095a:	4413      	add	r3, r2
  20095c:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
  20095e:	9a01      	ldr	r2, [sp, #4]
  200960:	9b05      	ldr	r3, [sp, #20]
  200962:	1ad3      	subs	r3, r2, r3
  200964:	9304      	str	r3, [sp, #16]
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  200966:	9b03      	ldr	r3, [sp, #12]
  200968:	68db      	ldr	r3, [r3, #12]
  20096a:	9a04      	ldr	r2, [sp, #16]
  20096c:	4619      	mov	r1, r3
  20096e:	9802      	ldr	r0, [sp, #8]
  200970:	f7ff fcd2 	bl	200318 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
  200974:	9b03      	ldr	r3, [sp, #12]
  200976:	68da      	ldr	r2, [r3, #12]
  200978:	9b04      	ldr	r3, [sp, #16]
  20097a:	441a      	add	r2, r3
  20097c:	9b03      	ldr	r3, [sp, #12]
  20097e:	619a      	str	r2, [r3, #24]
  200980:	e00a      	b.n	200998 <iq_read+0xb8>
  }
  else {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  200982:	9b03      	ldr	r3, [sp, #12]
  200984:	699b      	ldr	r3, [r3, #24]
  200986:	9a01      	ldr	r2, [sp, #4]
  200988:	4619      	mov	r1, r3
  20098a:	9802      	ldr	r0, [sp, #8]
  20098c:	f7ff fcc4 	bl	200318 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
  200990:	9b03      	ldr	r3, [sp, #12]
  200992:	68da      	ldr	r2, [r3, #12]
  200994:	9b03      	ldr	r3, [sp, #12]
  200996:	619a      	str	r2, [r3, #24]
  }

  iqp->q_counter -= n;
  200998:	9b03      	ldr	r3, [sp, #12]
  20099a:	689a      	ldr	r2, [r3, #8]
  20099c:	9b01      	ldr	r3, [sp, #4]
  20099e:	1ad2      	subs	r2, r2, r3
  2009a0:	9b03      	ldr	r3, [sp, #12]
  2009a2:	609a      	str	r2, [r3, #8]
  return n;
  2009a4:	9b01      	ldr	r3, [sp, #4]
  2009a6:	bf00      	nop
  2009a8:	bf00      	nop
}
  2009aa:	4618      	mov	r0, r3
  2009ac:	b007      	add	sp, #28
  2009ae:	f85d fb04 	ldr.w	pc, [sp], #4
  2009b2:	bf00      	nop
  2009b4:	08005f64 	.word	0x08005f64
	...

002009c0 <oq_write>:
 *                      value 0 is reserved
 * @return              The number of bytes effectively transferred.
 *
 * @notapi
 */
static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
  2009c0:	b500      	push	{lr}
  2009c2:	b087      	sub	sp, #28
  2009c4:	9003      	str	r0, [sp, #12]
  2009c6:	9102      	str	r1, [sp, #8]
  2009c8:	9201      	str	r2, [sp, #4]
  size_t s1, s2;

  osalDbgCheck(n > 0U);
  2009ca:	9b01      	ldr	r3, [sp, #4]
  2009cc:	2b00      	cmp	r3, #0
  2009ce:	bf0c      	ite	eq
  2009d0:	2301      	moveq	r3, #1
  2009d2:	2300      	movne	r3, #0
  2009d4:	b2db      	uxtb	r3, r3
  2009d6:	2b00      	cmp	r3, #0
  2009d8:	d002      	beq.n	2009e0 <oq_write+0x20>
  2009da:	482e      	ldr	r0, [pc, #184]	; (200a94 <oq_write+0xd4>)
  2009dc:	f002 fe30 	bl	203640 <chSysHalt>

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
  2009e0:	9b03      	ldr	r3, [sp, #12]
  2009e2:	689b      	ldr	r3, [r3, #8]
  2009e4:	9a01      	ldr	r2, [sp, #4]
  2009e6:	429a      	cmp	r2, r3
  2009e8:	d902      	bls.n	2009f0 <oq_write+0x30>
    n = oqGetEmptyI(oqp);
  2009ea:	9b03      	ldr	r3, [sp, #12]
  2009ec:	689b      	ldr	r3, [r3, #8]
  2009ee:	9301      	str	r3, [sp, #4]
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  2009f0:	9b03      	ldr	r3, [sp, #12]
  2009f2:	691a      	ldr	r2, [r3, #16]
  2009f4:	9b03      	ldr	r3, [sp, #12]
  2009f6:	695b      	ldr	r3, [r3, #20]
  2009f8:	1ad3      	subs	r3, r2, r3
  2009fa:	9305      	str	r3, [sp, #20]
  /*lint -restore*/
  if (n < s1) {
  2009fc:	9a01      	ldr	r2, [sp, #4]
  2009fe:	9b05      	ldr	r3, [sp, #20]
  200a00:	429a      	cmp	r2, r3
  200a02:	d20d      	bcs.n	200a20 <oq_write+0x60>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  200a04:	9b03      	ldr	r3, [sp, #12]
  200a06:	695b      	ldr	r3, [r3, #20]
  200a08:	9a01      	ldr	r2, [sp, #4]
  200a0a:	9902      	ldr	r1, [sp, #8]
  200a0c:	4618      	mov	r0, r3
  200a0e:	f7ff fc83 	bl	200318 <memcpy>
    oqp->q_wrptr += n;
  200a12:	9b03      	ldr	r3, [sp, #12]
  200a14:	695a      	ldr	r2, [r3, #20]
  200a16:	9b01      	ldr	r3, [sp, #4]
  200a18:	441a      	add	r2, r3
  200a1a:	9b03      	ldr	r3, [sp, #12]
  200a1c:	615a      	str	r2, [r3, #20]
  200a1e:	e02b      	b.n	200a78 <oq_write+0xb8>
  }
  else if (n > s1) {
  200a20:	9a01      	ldr	r2, [sp, #4]
  200a22:	9b05      	ldr	r3, [sp, #20]
  200a24:	429a      	cmp	r2, r3
  200a26:	d91c      	bls.n	200a62 <oq_write+0xa2>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
  200a28:	9b03      	ldr	r3, [sp, #12]
  200a2a:	695b      	ldr	r3, [r3, #20]
  200a2c:	9a05      	ldr	r2, [sp, #20]
  200a2e:	9902      	ldr	r1, [sp, #8]
  200a30:	4618      	mov	r0, r3
  200a32:	f7ff fc71 	bl	200318 <memcpy>
    bp += s1;
  200a36:	9a02      	ldr	r2, [sp, #8]
  200a38:	9b05      	ldr	r3, [sp, #20]
  200a3a:	4413      	add	r3, r2
  200a3c:	9302      	str	r3, [sp, #8]
    s2 = n - s1;
  200a3e:	9a01      	ldr	r2, [sp, #4]
  200a40:	9b05      	ldr	r3, [sp, #20]
  200a42:	1ad3      	subs	r3, r2, r3
  200a44:	9304      	str	r3, [sp, #16]
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
  200a46:	9b03      	ldr	r3, [sp, #12]
  200a48:	68db      	ldr	r3, [r3, #12]
  200a4a:	9a04      	ldr	r2, [sp, #16]
  200a4c:	9902      	ldr	r1, [sp, #8]
  200a4e:	4618      	mov	r0, r3
  200a50:	f7ff fc62 	bl	200318 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
  200a54:	9b03      	ldr	r3, [sp, #12]
  200a56:	68da      	ldr	r2, [r3, #12]
  200a58:	9b04      	ldr	r3, [sp, #16]
  200a5a:	441a      	add	r2, r3
  200a5c:	9b03      	ldr	r3, [sp, #12]
  200a5e:	615a      	str	r2, [r3, #20]
  200a60:	e00a      	b.n	200a78 <oq_write+0xb8>
  }
  else {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
  200a62:	9b03      	ldr	r3, [sp, #12]
  200a64:	695b      	ldr	r3, [r3, #20]
  200a66:	9a01      	ldr	r2, [sp, #4]
  200a68:	9902      	ldr	r1, [sp, #8]
  200a6a:	4618      	mov	r0, r3
  200a6c:	f7ff fc54 	bl	200318 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
  200a70:	9b03      	ldr	r3, [sp, #12]
  200a72:	68da      	ldr	r2, [r3, #12]
  200a74:	9b03      	ldr	r3, [sp, #12]
  200a76:	615a      	str	r2, [r3, #20]
  }

  oqp->q_counter -= n;
  200a78:	9b03      	ldr	r3, [sp, #12]
  200a7a:	689a      	ldr	r2, [r3, #8]
  200a7c:	9b01      	ldr	r3, [sp, #4]
  200a7e:	1ad2      	subs	r2, r2, r3
  200a80:	9b03      	ldr	r3, [sp, #12]
  200a82:	609a      	str	r2, [r3, #8]
  return n;
  200a84:	9b01      	ldr	r3, [sp, #4]
  200a86:	bf00      	nop
  200a88:	bf00      	nop
}
  200a8a:	4618      	mov	r0, r3
  200a8c:	b007      	add	sp, #28
  200a8e:	f85d fb04 	ldr.w	pc, [sp], #4
  200a92:	bf00      	nop
  200a94:	08005f6c 	.word	0x08005f6c
	...

00200aa0 <iqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {
  200aa0:	b500      	push	{lr}
  200aa2:	b085      	sub	sp, #20
  200aa4:	9003      	str	r0, [sp, #12]
  200aa6:	9102      	str	r1, [sp, #8]
  200aa8:	9201      	str	r2, [sp, #4]
  200aaa:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&iqp->q_waiting);
  200aac:	9b03      	ldr	r3, [sp, #12]
  200aae:	4618      	mov	r0, r3
  200ab0:	f7ff fee6 	bl	200880 <osalThreadQueueObjectInit.lto_priv.1>
  iqp->q_counter = 0;
  200ab4:	9b03      	ldr	r3, [sp, #12]
  200ab6:	2200      	movs	r2, #0
  200ab8:	609a      	str	r2, [r3, #8]
  iqp->q_buffer  = bp;
  200aba:	9b03      	ldr	r3, [sp, #12]
  200abc:	9a02      	ldr	r2, [sp, #8]
  200abe:	60da      	str	r2, [r3, #12]
  iqp->q_rdptr   = bp;
  200ac0:	9b03      	ldr	r3, [sp, #12]
  200ac2:	9a02      	ldr	r2, [sp, #8]
  200ac4:	619a      	str	r2, [r3, #24]
  iqp->q_wrptr   = bp;
  200ac6:	9b03      	ldr	r3, [sp, #12]
  200ac8:	9a02      	ldr	r2, [sp, #8]
  200aca:	615a      	str	r2, [r3, #20]
  iqp->q_top     = bp + size;
  200acc:	9a02      	ldr	r2, [sp, #8]
  200ace:	9b01      	ldr	r3, [sp, #4]
  200ad0:	441a      	add	r2, r3
  200ad2:	9b03      	ldr	r3, [sp, #12]
  200ad4:	611a      	str	r2, [r3, #16]
  iqp->q_notify  = infy;
  200ad6:	9b03      	ldr	r3, [sp, #12]
  200ad8:	9a00      	ldr	r2, [sp, #0]
  200ada:	61da      	str	r2, [r3, #28]
  iqp->q_link    = link;
  200adc:	9b03      	ldr	r3, [sp, #12]
  200ade:	9a06      	ldr	r2, [sp, #24]
  200ae0:	621a      	str	r2, [r3, #32]
}
  200ae2:	bf00      	nop
  200ae4:	b005      	add	sp, #20
  200ae6:	f85d fb04 	ldr.w	pc, [sp], #4
  200aea:	bf00      	nop
  200aec:	0000      	movs	r0, r0
	...

00200af0 <iqPutI>:
 * @retval MSG_OK       if the operation has been completed with success.
 * @retval MSG_TIMEOUT  if the queue is full.
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
  200af0:	b500      	push	{lr}
  200af2:	b083      	sub	sp, #12
  200af4:	9001      	str	r0, [sp, #4]
  200af6:	460b      	mov	r3, r1
  200af8:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  200afc:	f002 ff10 	bl	203920 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
  200b00:	9b01      	ldr	r3, [sp, #4]
  200b02:	695a      	ldr	r2, [r3, #20]
  200b04:	9b01      	ldr	r3, [sp, #4]
  200b06:	699b      	ldr	r3, [r3, #24]
  200b08:	429a      	cmp	r2, r3
  200b0a:	d105      	bne.n	200b18 <iqPutI+0x28>
  200b0c:	9b01      	ldr	r3, [sp, #4]
  200b0e:	689b      	ldr	r3, [r3, #8]
  200b10:	2b00      	cmp	r3, #0
  200b12:	d001      	beq.n	200b18 <iqPutI+0x28>
  200b14:	2301      	movs	r3, #1
  200b16:	e000      	b.n	200b1a <iqPutI+0x2a>
  200b18:	2300      	movs	r3, #0
  200b1a:	f003 0301 	and.w	r3, r3, #1
  200b1e:	b2db      	uxtb	r3, r3
  200b20:	f083 0301 	eor.w	r3, r3, #1
  200b24:	b2db      	uxtb	r3, r3
  200b26:	2b00      	cmp	r3, #0
  200b28:	d01d      	beq.n	200b66 <iqPutI+0x76>
    iqp->q_counter++;
  200b2a:	9b01      	ldr	r3, [sp, #4]
  200b2c:	689b      	ldr	r3, [r3, #8]
  200b2e:	1c5a      	adds	r2, r3, #1
  200b30:	9b01      	ldr	r3, [sp, #4]
  200b32:	609a      	str	r2, [r3, #8]
    *iqp->q_wrptr++ = b;
  200b34:	9b01      	ldr	r3, [sp, #4]
  200b36:	695b      	ldr	r3, [r3, #20]
  200b38:	1c59      	adds	r1, r3, #1
  200b3a:	9a01      	ldr	r2, [sp, #4]
  200b3c:	6151      	str	r1, [r2, #20]
  200b3e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  200b42:	701a      	strb	r2, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
  200b44:	9b01      	ldr	r3, [sp, #4]
  200b46:	695a      	ldr	r2, [r3, #20]
  200b48:	9b01      	ldr	r3, [sp, #4]
  200b4a:	691b      	ldr	r3, [r3, #16]
  200b4c:	429a      	cmp	r2, r3
  200b4e:	d303      	bcc.n	200b58 <iqPutI+0x68>
      iqp->q_wrptr = iqp->q_buffer;
  200b50:	9b01      	ldr	r3, [sp, #4]
  200b52:	68da      	ldr	r2, [r3, #12]
  200b54:	9b01      	ldr	r3, [sp, #4]
  200b56:	615a      	str	r2, [r3, #20]
    }

    osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
  200b58:	9b01      	ldr	r3, [sp, #4]
  200b5a:	2100      	movs	r1, #0
  200b5c:	4618      	mov	r0, r3
  200b5e:	f7ff feaf 	bl	2008c0 <osalThreadDequeueNextI.lto_priv.1>

    return MSG_OK;
  200b62:	2300      	movs	r3, #0
  200b64:	e001      	b.n	200b6a <iqPutI+0x7a>
  }

  return MSG_TIMEOUT;
  200b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
  200b6a:	4618      	mov	r0, r3
  200b6c:	b003      	add	sp, #12
  200b6e:	f85d fb04 	ldr.w	pc, [sp], #4
  200b72:	bf00      	nop
	...

00200b80 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
  200b80:	b500      	push	{lr}
  200b82:	b085      	sub	sp, #20
  200b84:	9001      	str	r0, [sp, #4]
  200b86:	9100      	str	r1, [sp, #0]
  uint8_t b;

  osalSysLock();
  200b88:	f7ff fe6a 	bl	200860 <osalSysLock.lto_priv.1>

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
  200b8c:	e00c      	b.n	200ba8 <iqGetTimeout+0x28>
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
  200b8e:	9b01      	ldr	r3, [sp, #4]
  200b90:	9900      	ldr	r1, [sp, #0]
  200b92:	4618      	mov	r0, r3
  200b94:	f7ff fe84 	bl	2008a0 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200b98:	9002      	str	r0, [sp, #8]
    if (msg < MSG_OK) {
  200b9a:	9b02      	ldr	r3, [sp, #8]
  200b9c:	2b00      	cmp	r3, #0
  200b9e:	da03      	bge.n	200ba8 <iqGetTimeout+0x28>
      osalSysUnlock();
  200ba0:	f7ff fe66 	bl	200870 <osalSysUnlock.lto_priv.1>
      return msg;
  200ba4:	9b02      	ldr	r3, [sp, #8]
  200ba6:	e026      	b.n	200bf6 <iqGetTimeout+0x76>
  while (iqIsEmptyI(iqp)) {
  200ba8:	9b01      	ldr	r3, [sp, #4]
  200baa:	689b      	ldr	r3, [r3, #8]
  200bac:	2b00      	cmp	r3, #0
  200bae:	d0ee      	beq.n	200b8e <iqGetTimeout+0xe>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  200bb0:	9b01      	ldr	r3, [sp, #4]
  200bb2:	689b      	ldr	r3, [r3, #8]
  200bb4:	1e5a      	subs	r2, r3, #1
  200bb6:	9b01      	ldr	r3, [sp, #4]
  200bb8:	609a      	str	r2, [r3, #8]
  b = *iqp->q_rdptr++;
  200bba:	9b01      	ldr	r3, [sp, #4]
  200bbc:	699b      	ldr	r3, [r3, #24]
  200bbe:	1c59      	adds	r1, r3, #1
  200bc0:	9a01      	ldr	r2, [sp, #4]
  200bc2:	6191      	str	r1, [r2, #24]
  200bc4:	781b      	ldrb	r3, [r3, #0]
  200bc6:	f88d 300f 	strb.w	r3, [sp, #15]
  if (iqp->q_rdptr >= iqp->q_top) {
  200bca:	9b01      	ldr	r3, [sp, #4]
  200bcc:	699a      	ldr	r2, [r3, #24]
  200bce:	9b01      	ldr	r3, [sp, #4]
  200bd0:	691b      	ldr	r3, [r3, #16]
  200bd2:	429a      	cmp	r2, r3
  200bd4:	d303      	bcc.n	200bde <iqGetTimeout+0x5e>
    iqp->q_rdptr = iqp->q_buffer;
  200bd6:	9b01      	ldr	r3, [sp, #4]
  200bd8:	68da      	ldr	r2, [r3, #12]
  200bda:	9b01      	ldr	r3, [sp, #4]
  200bdc:	619a      	str	r2, [r3, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
  200bde:	9b01      	ldr	r3, [sp, #4]
  200be0:	69db      	ldr	r3, [r3, #28]
  200be2:	2b00      	cmp	r3, #0
  200be4:	d003      	beq.n	200bee <iqGetTimeout+0x6e>
    iqp->q_notify(iqp);
  200be6:	9b01      	ldr	r3, [sp, #4]
  200be8:	69db      	ldr	r3, [r3, #28]
  200bea:	9801      	ldr	r0, [sp, #4]
  200bec:	4798      	blx	r3
  }

  osalSysUnlock();
  200bee:	f7ff fe3f 	bl	200870 <osalSysUnlock.lto_priv.1>

  return (msg_t)b;
  200bf2:	f89d 300f 	ldrb.w	r3, [sp, #15]
}
  200bf6:	4618      	mov	r0, r3
  200bf8:	b005      	add	sp, #20
  200bfa:	f85d fb04 	ldr.w	pc, [sp], #4
  200bfe:	bf00      	nop

00200c00 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
  200c00:	b500      	push	{lr}
  200c02:	b089      	sub	sp, #36	; 0x24
  200c04:	9003      	str	r0, [sp, #12]
  200c06:	9102      	str	r1, [sp, #8]
  200c08:	9201      	str	r2, [sp, #4]
  200c0a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = iqp->q_notify;
  200c0c:	9b03      	ldr	r3, [sp, #12]
  200c0e:	69db      	ldr	r3, [r3, #28]
  200c10:	9307      	str	r3, [sp, #28]
  size_t max = n;
  200c12:	9b01      	ldr	r3, [sp, #4]
  200c14:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
  200c16:	9b01      	ldr	r3, [sp, #4]
  200c18:	2b00      	cmp	r3, #0
  200c1a:	bf0c      	ite	eq
  200c1c:	2301      	moveq	r3, #1
  200c1e:	2300      	movne	r3, #0
  200c20:	b2db      	uxtb	r3, r3
  200c22:	2b00      	cmp	r3, #0
  200c24:	d002      	beq.n	200c2c <iqReadTimeout+0x2c>
  200c26:	481c      	ldr	r0, [pc, #112]	; (200c98 <iqReadTimeout+0x98>)
  200c28:	f002 fd0a 	bl	203640 <chSysHalt>

  osalSysLock();
  200c2c:	f7ff fe18 	bl	200860 <osalSysLock.lto_priv.1>

  while (n > 0U) {
  200c30:	e024      	b.n	200c7c <iqReadTimeout+0x7c>
    size_t done;

    done = iq_read(iqp, bp, n);
  200c32:	9a01      	ldr	r2, [sp, #4]
  200c34:	9902      	ldr	r1, [sp, #8]
  200c36:	9803      	ldr	r0, [sp, #12]
  200c38:	f7ff fe52 	bl	2008e0 <iq_read>
  200c3c:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
  200c3e:	9b05      	ldr	r3, [sp, #20]
  200c40:	2b00      	cmp	r3, #0
  200c42:	d109      	bne.n	200c58 <iqReadTimeout+0x58>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
  200c44:	9b03      	ldr	r3, [sp, #12]
  200c46:	9900      	ldr	r1, [sp, #0]
  200c48:	4618      	mov	r0, r3
  200c4a:	f7ff fe29 	bl	2008a0 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200c4e:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
  200c50:	9b04      	ldr	r3, [sp, #16]
  200c52:	2b00      	cmp	r3, #0
  200c54:	d012      	beq.n	200c7c <iqReadTimeout+0x7c>
        break;
  200c56:	e014      	b.n	200c82 <iqReadTimeout+0x82>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
  200c58:	9b07      	ldr	r3, [sp, #28]
  200c5a:	2b00      	cmp	r3, #0
  200c5c:	d002      	beq.n	200c64 <iqReadTimeout+0x64>
        nfy(iqp);
  200c5e:	9b07      	ldr	r3, [sp, #28]
  200c60:	9803      	ldr	r0, [sp, #12]
  200c62:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
  200c64:	f7ff fe04 	bl	200870 <osalSysUnlock.lto_priv.1>

      n  -= done;
  200c68:	9a01      	ldr	r2, [sp, #4]
  200c6a:	9b05      	ldr	r3, [sp, #20]
  200c6c:	1ad3      	subs	r3, r2, r3
  200c6e:	9301      	str	r3, [sp, #4]
      bp += done;
  200c70:	9a02      	ldr	r2, [sp, #8]
  200c72:	9b05      	ldr	r3, [sp, #20]
  200c74:	4413      	add	r3, r2
  200c76:	9302      	str	r3, [sp, #8]

      osalSysLock();
  200c78:	f7ff fdf2 	bl	200860 <osalSysLock.lto_priv.1>
  while (n > 0U) {
  200c7c:	9b01      	ldr	r3, [sp, #4]
  200c7e:	2b00      	cmp	r3, #0
  200c80:	d1d7      	bne.n	200c32 <iqReadTimeout+0x32>
    }
  }

  osalSysUnlock();
  200c82:	f7ff fdf5 	bl	200870 <osalSysUnlock.lto_priv.1>
  return max - n;
  200c86:	9a06      	ldr	r2, [sp, #24]
  200c88:	9b01      	ldr	r3, [sp, #4]
  200c8a:	1ad3      	subs	r3, r2, r3
  200c8c:	bf00      	nop
  200c8e:	bf00      	nop
}
  200c90:	4618      	mov	r0, r3
  200c92:	b009      	add	sp, #36	; 0x24
  200c94:	f85d fb04 	ldr.w	pc, [sp], #4
  200c98:	08005f84 	.word	0x08005f84
  200c9c:	00000000 	.word	0x00000000

00200ca0 <oqObjectInit>:
 * @param[in] link      application defined pointer
 *
 * @init
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {
  200ca0:	b500      	push	{lr}
  200ca2:	b085      	sub	sp, #20
  200ca4:	9003      	str	r0, [sp, #12]
  200ca6:	9102      	str	r1, [sp, #8]
  200ca8:	9201      	str	r2, [sp, #4]
  200caa:	9300      	str	r3, [sp, #0]

  osalThreadQueueObjectInit(&oqp->q_waiting);
  200cac:	9b03      	ldr	r3, [sp, #12]
  200cae:	4618      	mov	r0, r3
  200cb0:	f7ff fde6 	bl	200880 <osalThreadQueueObjectInit.lto_priv.1>
  oqp->q_counter = size;
  200cb4:	9b03      	ldr	r3, [sp, #12]
  200cb6:	9a01      	ldr	r2, [sp, #4]
  200cb8:	609a      	str	r2, [r3, #8]
  oqp->q_buffer  = bp;
  200cba:	9b03      	ldr	r3, [sp, #12]
  200cbc:	9a02      	ldr	r2, [sp, #8]
  200cbe:	60da      	str	r2, [r3, #12]
  oqp->q_rdptr   = bp;
  200cc0:	9b03      	ldr	r3, [sp, #12]
  200cc2:	9a02      	ldr	r2, [sp, #8]
  200cc4:	619a      	str	r2, [r3, #24]
  oqp->q_wrptr   = bp;
  200cc6:	9b03      	ldr	r3, [sp, #12]
  200cc8:	9a02      	ldr	r2, [sp, #8]
  200cca:	615a      	str	r2, [r3, #20]
  oqp->q_top     = bp + size;
  200ccc:	9a02      	ldr	r2, [sp, #8]
  200cce:	9b01      	ldr	r3, [sp, #4]
  200cd0:	441a      	add	r2, r3
  200cd2:	9b03      	ldr	r3, [sp, #12]
  200cd4:	611a      	str	r2, [r3, #16]
  oqp->q_notify  = onfy;
  200cd6:	9b03      	ldr	r3, [sp, #12]
  200cd8:	9a00      	ldr	r2, [sp, #0]
  200cda:	61da      	str	r2, [r3, #28]
  oqp->q_link    = link;
  200cdc:	9b03      	ldr	r3, [sp, #12]
  200cde:	9a06      	ldr	r2, [sp, #24]
  200ce0:	621a      	str	r2, [r3, #32]
}
  200ce2:	bf00      	nop
  200ce4:	b005      	add	sp, #20
  200ce6:	f85d fb04 	ldr.w	pc, [sp], #4
  200cea:	bf00      	nop
  200cec:	0000      	movs	r0, r0
	...

00200cf0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
  200cf0:	b500      	push	{lr}
  200cf2:	b087      	sub	sp, #28
  200cf4:	9003      	str	r0, [sp, #12]
  200cf6:	460b      	mov	r3, r1
  200cf8:	9201      	str	r2, [sp, #4]
  200cfa:	f88d 300b 	strb.w	r3, [sp, #11]

  osalSysLock();
  200cfe:	f7ff fdaf 	bl	200860 <osalSysLock.lto_priv.1>

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
  200d02:	e00c      	b.n	200d1e <oqPutTimeout+0x2e>
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
  200d04:	9b03      	ldr	r3, [sp, #12]
  200d06:	9901      	ldr	r1, [sp, #4]
  200d08:	4618      	mov	r0, r3
  200d0a:	f7ff fdc9 	bl	2008a0 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200d0e:	9005      	str	r0, [sp, #20]
    if (msg < MSG_OK) {
  200d10:	9b05      	ldr	r3, [sp, #20]
  200d12:	2b00      	cmp	r3, #0
  200d14:	da03      	bge.n	200d1e <oqPutTimeout+0x2e>
      osalSysUnlock();
  200d16:	f7ff fdab 	bl	200870 <osalSysUnlock.lto_priv.1>
      return msg;
  200d1a:	9b05      	ldr	r3, [sp, #20]
  200d1c:	e025      	b.n	200d6a <oqPutTimeout+0x7a>
  while (oqIsFullI(oqp)) {
  200d1e:	9b03      	ldr	r3, [sp, #12]
  200d20:	689b      	ldr	r3, [r3, #8]
  200d22:	2b00      	cmp	r3, #0
  200d24:	d0ee      	beq.n	200d04 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  200d26:	9b03      	ldr	r3, [sp, #12]
  200d28:	689b      	ldr	r3, [r3, #8]
  200d2a:	1e5a      	subs	r2, r3, #1
  200d2c:	9b03      	ldr	r3, [sp, #12]
  200d2e:	609a      	str	r2, [r3, #8]
  *oqp->q_wrptr++ = b;
  200d30:	9b03      	ldr	r3, [sp, #12]
  200d32:	695b      	ldr	r3, [r3, #20]
  200d34:	1c59      	adds	r1, r3, #1
  200d36:	9a03      	ldr	r2, [sp, #12]
  200d38:	6151      	str	r1, [r2, #20]
  200d3a:	f89d 200b 	ldrb.w	r2, [sp, #11]
  200d3e:	701a      	strb	r2, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
  200d40:	9b03      	ldr	r3, [sp, #12]
  200d42:	695a      	ldr	r2, [r3, #20]
  200d44:	9b03      	ldr	r3, [sp, #12]
  200d46:	691b      	ldr	r3, [r3, #16]
  200d48:	429a      	cmp	r2, r3
  200d4a:	d303      	bcc.n	200d54 <oqPutTimeout+0x64>
    oqp->q_wrptr = oqp->q_buffer;
  200d4c:	9b03      	ldr	r3, [sp, #12]
  200d4e:	68da      	ldr	r2, [r3, #12]
  200d50:	9b03      	ldr	r3, [sp, #12]
  200d52:	615a      	str	r2, [r3, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
  200d54:	9b03      	ldr	r3, [sp, #12]
  200d56:	69db      	ldr	r3, [r3, #28]
  200d58:	2b00      	cmp	r3, #0
  200d5a:	d003      	beq.n	200d64 <oqPutTimeout+0x74>
    oqp->q_notify(oqp);
  200d5c:	9b03      	ldr	r3, [sp, #12]
  200d5e:	69db      	ldr	r3, [r3, #28]
  200d60:	9803      	ldr	r0, [sp, #12]
  200d62:	4798      	blx	r3
  }

  osalSysUnlock();
  200d64:	f7ff fd84 	bl	200870 <osalSysUnlock.lto_priv.1>

  return MSG_OK;
  200d68:	2300      	movs	r3, #0
}
  200d6a:	4618      	mov	r0, r3
  200d6c:	b007      	add	sp, #28
  200d6e:	f85d fb04 	ldr.w	pc, [sp], #4
  200d72:	bf00      	nop
	...

00200d80 <oqGetI>:
 * @return              The byte value from the queue.
 * @retval MSG_TIMEOUT  if the queue is empty.
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {
  200d80:	b500      	push	{lr}
  200d82:	b085      	sub	sp, #20
  200d84:	9001      	str	r0, [sp, #4]

  osalDbgCheckClassI();
  200d86:	f002 fdcb 	bl	203920 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
  200d8a:	9b01      	ldr	r3, [sp, #4]
  200d8c:	695a      	ldr	r2, [r3, #20]
  200d8e:	9b01      	ldr	r3, [sp, #4]
  200d90:	699b      	ldr	r3, [r3, #24]
  200d92:	429a      	cmp	r2, r3
  200d94:	d105      	bne.n	200da2 <oqGetI+0x22>
  200d96:	9b01      	ldr	r3, [sp, #4]
  200d98:	689b      	ldr	r3, [r3, #8]
  200d9a:	2b00      	cmp	r3, #0
  200d9c:	d001      	beq.n	200da2 <oqGetI+0x22>
  200d9e:	2301      	movs	r3, #1
  200da0:	e000      	b.n	200da4 <oqGetI+0x24>
  200da2:	2300      	movs	r3, #0
  200da4:	f003 0301 	and.w	r3, r3, #1
  200da8:	b2db      	uxtb	r3, r3
  200daa:	f083 0301 	eor.w	r3, r3, #1
  200dae:	b2db      	uxtb	r3, r3
  200db0:	2b00      	cmp	r3, #0
  200db2:	d01e      	beq.n	200df2 <oqGetI+0x72>
    uint8_t b;

    oqp->q_counter++;
  200db4:	9b01      	ldr	r3, [sp, #4]
  200db6:	689b      	ldr	r3, [r3, #8]
  200db8:	1c5a      	adds	r2, r3, #1
  200dba:	9b01      	ldr	r3, [sp, #4]
  200dbc:	609a      	str	r2, [r3, #8]
    b = *oqp->q_rdptr++;
  200dbe:	9b01      	ldr	r3, [sp, #4]
  200dc0:	699b      	ldr	r3, [r3, #24]
  200dc2:	1c59      	adds	r1, r3, #1
  200dc4:	9a01      	ldr	r2, [sp, #4]
  200dc6:	6191      	str	r1, [r2, #24]
  200dc8:	781b      	ldrb	r3, [r3, #0]
  200dca:	f88d 300f 	strb.w	r3, [sp, #15]
    if (oqp->q_rdptr >= oqp->q_top) {
  200dce:	9b01      	ldr	r3, [sp, #4]
  200dd0:	699a      	ldr	r2, [r3, #24]
  200dd2:	9b01      	ldr	r3, [sp, #4]
  200dd4:	691b      	ldr	r3, [r3, #16]
  200dd6:	429a      	cmp	r2, r3
  200dd8:	d303      	bcc.n	200de2 <oqGetI+0x62>
      oqp->q_rdptr = oqp->q_buffer;
  200dda:	9b01      	ldr	r3, [sp, #4]
  200ddc:	68da      	ldr	r2, [r3, #12]
  200dde:	9b01      	ldr	r3, [sp, #4]
  200de0:	619a      	str	r2, [r3, #24]
    }

    osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
  200de2:	9b01      	ldr	r3, [sp, #4]
  200de4:	2100      	movs	r1, #0
  200de6:	4618      	mov	r0, r3
  200de8:	f7ff fd6a 	bl	2008c0 <osalThreadDequeueNextI.lto_priv.1>

    return (msg_t)b;
  200dec:	f89d 300f 	ldrb.w	r3, [sp, #15]
  200df0:	e001      	b.n	200df6 <oqGetI+0x76>
  }

  return MSG_TIMEOUT;
  200df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
  200df6:	4618      	mov	r0, r3
  200df8:	b005      	add	sp, #20
  200dfa:	f85d fb04 	ldr.w	pc, [sp], #4
  200dfe:	bf00      	nop

00200e00 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  200e00:	b500      	push	{lr}
  200e02:	b089      	sub	sp, #36	; 0x24
  200e04:	9003      	str	r0, [sp, #12]
  200e06:	9102      	str	r1, [sp, #8]
  200e08:	9201      	str	r2, [sp, #4]
  200e0a:	9300      	str	r3, [sp, #0]
  qnotify_t nfy = oqp->q_notify;
  200e0c:	9b03      	ldr	r3, [sp, #12]
  200e0e:	69db      	ldr	r3, [r3, #28]
  200e10:	9307      	str	r3, [sp, #28]
  size_t max = n;
  200e12:	9b01      	ldr	r3, [sp, #4]
  200e14:	9306      	str	r3, [sp, #24]

  osalDbgCheck(n > 0U);
  200e16:	9b01      	ldr	r3, [sp, #4]
  200e18:	2b00      	cmp	r3, #0
  200e1a:	bf0c      	ite	eq
  200e1c:	2301      	moveq	r3, #1
  200e1e:	2300      	movne	r3, #0
  200e20:	b2db      	uxtb	r3, r3
  200e22:	2b00      	cmp	r3, #0
  200e24:	d002      	beq.n	200e2c <oqWriteTimeout+0x2c>
  200e26:	481c      	ldr	r0, [pc, #112]	; (200e98 <oqWriteTimeout+0x98>)
  200e28:	f002 fc0a 	bl	203640 <chSysHalt>

  osalSysLock();
  200e2c:	f7ff fd18 	bl	200860 <osalSysLock.lto_priv.1>

  while (n > 0U) {
  200e30:	e024      	b.n	200e7c <oqWriteTimeout+0x7c>
    size_t done;

    done = oq_write(oqp, bp, n);
  200e32:	9a01      	ldr	r2, [sp, #4]
  200e34:	9902      	ldr	r1, [sp, #8]
  200e36:	9803      	ldr	r0, [sp, #12]
  200e38:	f7ff fdc2 	bl	2009c0 <oq_write>
  200e3c:	9005      	str	r0, [sp, #20]
    if (done == (size_t)0) {
  200e3e:	9b05      	ldr	r3, [sp, #20]
  200e40:	2b00      	cmp	r3, #0
  200e42:	d109      	bne.n	200e58 <oqWriteTimeout+0x58>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
  200e44:	9b03      	ldr	r3, [sp, #12]
  200e46:	9900      	ldr	r1, [sp, #0]
  200e48:	4618      	mov	r0, r3
  200e4a:	f7ff fd29 	bl	2008a0 <osalThreadEnqueueTimeoutS.lto_priv.1>
  200e4e:	9004      	str	r0, [sp, #16]

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
  200e50:	9b04      	ldr	r3, [sp, #16]
  200e52:	2b00      	cmp	r3, #0
  200e54:	d012      	beq.n	200e7c <oqWriteTimeout+0x7c>
        break;
  200e56:	e014      	b.n	200e82 <oqWriteTimeout+0x82>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
  200e58:	9b07      	ldr	r3, [sp, #28]
  200e5a:	2b00      	cmp	r3, #0
  200e5c:	d002      	beq.n	200e64 <oqWriteTimeout+0x64>
        nfy(oqp);
  200e5e:	9b07      	ldr	r3, [sp, #28]
  200e60:	9803      	ldr	r0, [sp, #12]
  200e62:	4798      	blx	r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();
  200e64:	f7ff fd04 	bl	200870 <osalSysUnlock.lto_priv.1>

      n  -= done;
  200e68:	9a01      	ldr	r2, [sp, #4]
  200e6a:	9b05      	ldr	r3, [sp, #20]
  200e6c:	1ad3      	subs	r3, r2, r3
  200e6e:	9301      	str	r3, [sp, #4]
      bp += done;
  200e70:	9a02      	ldr	r2, [sp, #8]
  200e72:	9b05      	ldr	r3, [sp, #20]
  200e74:	4413      	add	r3, r2
  200e76:	9302      	str	r3, [sp, #8]

      osalSysLock();
  200e78:	f7ff fcf2 	bl	200860 <osalSysLock.lto_priv.1>
  while (n > 0U) {
  200e7c:	9b01      	ldr	r3, [sp, #4]
  200e7e:	2b00      	cmp	r3, #0
  200e80:	d1d7      	bne.n	200e32 <oqWriteTimeout+0x32>
    }
  }

  osalSysUnlock();
  200e82:	f7ff fcf5 	bl	200870 <osalSysUnlock.lto_priv.1>
  return max - n;
  200e86:	9a06      	ldr	r2, [sp, #24]
  200e88:	9b01      	ldr	r3, [sp, #4]
  200e8a:	1ad3      	subs	r3, r2, r3
  200e8c:	bf00      	nop
  200e8e:	bf00      	nop
}
  200e90:	4618      	mov	r0, r3
  200e92:	b009      	add	sp, #36	; 0x24
  200e94:	f85d fb04 	ldr.w	pc, [sp], #4
  200e98:	08005f94 	.word	0x08005f94
  200e9c:	00000000 	.word	0x00000000

00200ea0 <chSysLock.lto_priv.2>:
static inline void chSysLock(void) {
  200ea0:	b500      	push	{lr}
  200ea2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  200ea4:	b672      	cpsid	i
}
  200ea6:	bf00      	nop
  200ea8:	2330      	movs	r3, #48	; 0x30
  200eaa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200eac:	9b01      	ldr	r3, [sp, #4]
  200eae:	f383 8811 	msr	BASEPRI, r3
}
  200eb2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  200eb4:	b662      	cpsie	i
}
  200eb6:	bf00      	nop
}
  200eb8:	bf00      	nop
  __dbg_check_lock();
  200eba:	f002 fc11 	bl	2036e0 <__dbg_check_lock>
}
  200ebe:	bf00      	nop
  200ec0:	b003      	add	sp, #12
  200ec2:	f85d fb04 	ldr.w	pc, [sp], #4
  200ec6:	bf00      	nop
	...

00200ed0 <chSysUnlock.lto_priv.2>:
static inline void chSysUnlock(void) {
  200ed0:	b500      	push	{lr}
  200ed2:	b083      	sub	sp, #12
  __dbg_check_unlock();
  200ed4:	f002 fc2c 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  200ed8:	4b12      	ldr	r3, [pc, #72]	; (200f24 <chSysUnlock.lto_priv.2+0x54>)
  200eda:	681b      	ldr	r3, [r3, #0]
  200edc:	4a11      	ldr	r2, [pc, #68]	; (200f24 <chSysUnlock.lto_priv.2+0x54>)
  200ede:	4293      	cmp	r3, r2
  200ee0:	bf14      	ite	ne
  200ee2:	2301      	movne	r3, #1
  200ee4:	2300      	moveq	r3, #0
  200ee6:	b2db      	uxtb	r3, r3
  200ee8:	2b00      	cmp	r3, #0
  200eea:	d00f      	beq.n	200f0c <chSysUnlock.lto_priv.2+0x3c>
  200eec:	4b0d      	ldr	r3, [pc, #52]	; (200f24 <chSysUnlock.lto_priv.2+0x54>)
  200eee:	68db      	ldr	r3, [r3, #12]
  200ef0:	689a      	ldr	r2, [r3, #8]
  200ef2:	4b0c      	ldr	r3, [pc, #48]	; (200f24 <chSysUnlock.lto_priv.2+0x54>)
  200ef4:	681b      	ldr	r3, [r3, #0]
  200ef6:	689b      	ldr	r3, [r3, #8]
  200ef8:	429a      	cmp	r2, r3
  200efa:	bf34      	ite	cc
  200efc:	2301      	movcc	r3, #1
  200efe:	2300      	movcs	r3, #0
  200f00:	b2db      	uxtb	r3, r3
  200f02:	2b00      	cmp	r3, #0
  200f04:	d002      	beq.n	200f0c <chSysUnlock.lto_priv.2+0x3c>
  200f06:	4808      	ldr	r0, [pc, #32]	; (200f28 <chSysUnlock.lto_priv.2+0x58>)
  200f08:	f002 fb9a 	bl	203640 <chSysHalt>
  200f0c:	2300      	movs	r3, #0
  200f0e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  200f10:	9b01      	ldr	r3, [sp, #4]
  200f12:	f383 8811 	msr	BASEPRI, r3
}
  200f16:	bf00      	nop
}
  200f18:	bf00      	nop
}
  200f1a:	bf00      	nop
  200f1c:	b003      	add	sp, #12
  200f1e:	f85d fb04 	ldr.w	pc, [sp], #4
  200f22:	bf00      	nop
  200f24:	20000958 	.word	0x20000958
  200f28:	08005fb0 	.word	0x08005fb0
  200f2c:	00000000 	.word	0x00000000

00200f30 <osalSysLock.lto_priv.2>:
static inline void osalSysLock(void) {
  200f30:	b508      	push	{r3, lr}
  chSysLock();
  200f32:	f7ff ffb5 	bl	200ea0 <chSysLock.lto_priv.2>
}
  200f36:	bf00      	nop
  200f38:	bd08      	pop	{r3, pc}
  200f3a:	bf00      	nop
  200f3c:	0000      	movs	r0, r0
	...

00200f40 <osalSysUnlock.lto_priv.2>:
static inline void osalSysUnlock(void) {
  200f40:	b508      	push	{r3, lr}
  chSysUnlock();
  200f42:	f7ff ffc5 	bl	200ed0 <chSysUnlock.lto_priv.2>
}
  200f46:	bf00      	nop
  200f48:	bd08      	pop	{r3, pc}
  200f4a:	bf00      	nop
  200f4c:	0000      	movs	r0, r0
	...

00200f50 <osalMutexObjectInit>:
 *
 * @param[out] mp       pointer to the @p mutex_t object
 *
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {
  200f50:	b500      	push	{lr}
  200f52:	b083      	sub	sp, #12
  200f54:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
  200f56:	9801      	ldr	r0, [sp, #4]
  200f58:	f004 fbd2 	bl	205700 <chMtxObjectInit>
#elif CH_CFG_USE_SEMAPHORES
  chSemObjectInit((semaphore_t *)mp, 1);
#else
 *mp = 0;
#endif
}
  200f5c:	bf00      	nop
  200f5e:	b003      	add	sp, #12
  200f60:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00200f70 <adcInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void adcInit(void) {
  200f70:	b508      	push	{r3, lr}

  adc_lld_init();
  200f72:	f001 f84d 	bl	202010 <adc_lld_init>
}
  200f76:	bf00      	nop
  200f78:	bd08      	pop	{r3, pc}
  200f7a:	bf00      	nop
  200f7c:	0000      	movs	r0, r0
	...

00200f80 <adcObjectInit>:
 *
 * @param[out] adcp     pointer to the @p ADCDriver object
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {
  200f80:	b500      	push	{lr}
  200f82:	b083      	sub	sp, #12
  200f84:	9001      	str	r0, [sp, #4]

  adcp->state    = ADC_STOP;
  200f86:	9b01      	ldr	r3, [sp, #4]
  200f88:	2201      	movs	r2, #1
  200f8a:	701a      	strb	r2, [r3, #0]
  adcp->config   = NULL;
  200f8c:	9b01      	ldr	r3, [sp, #4]
  200f8e:	2200      	movs	r2, #0
  200f90:	605a      	str	r2, [r3, #4]
  adcp->samples  = NULL;
  200f92:	9b01      	ldr	r3, [sp, #4]
  200f94:	2200      	movs	r2, #0
  200f96:	609a      	str	r2, [r3, #8]
  adcp->depth    = 0;
  200f98:	9b01      	ldr	r3, [sp, #4]
  200f9a:	2200      	movs	r2, #0
  200f9c:	60da      	str	r2, [r3, #12]
  adcp->grpp     = NULL;
  200f9e:	9b01      	ldr	r3, [sp, #4]
  200fa0:	2200      	movs	r2, #0
  200fa2:	611a      	str	r2, [r3, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
  200fa4:	9b01      	ldr	r3, [sp, #4]
  200fa6:	2200      	movs	r2, #0
  200fa8:	615a      	str	r2, [r3, #20]
#endif
#if ADC_USE_MUTUAL_EXCLUSION == TRUE
  osalMutexObjectInit(&adcp->mutex);
  200faa:	9b01      	ldr	r3, [sp, #4]
  200fac:	3318      	adds	r3, #24
  200fae:	4618      	mov	r0, r3
  200fb0:	f7ff ffce 	bl	200f50 <osalMutexObjectInit>
#endif
#if defined(ADC_DRIVER_EXT_INIT_HOOK)
  ADC_DRIVER_EXT_INIT_HOOK(adcp);
#endif
}
  200fb4:	bf00      	nop
  200fb6:	b003      	add	sp, #12
  200fb8:	f85d fb04 	ldr.w	pc, [sp], #4
  200fbc:	0000      	movs	r0, r0
	...

00200fc0 <adcStart>:
 *                      the implementation the value can be @p NULL.
 * @return              The operation status.
 *
 * @api
 */
msg_t adcStart(ADCDriver *adcp, const ADCConfig *config) {
  200fc0:	b500      	push	{lr}
  200fc2:	b085      	sub	sp, #20
  200fc4:	9001      	str	r0, [sp, #4]
  200fc6:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(adcp != NULL);
  200fc8:	9b01      	ldr	r3, [sp, #4]
  200fca:	2b00      	cmp	r3, #0
  200fcc:	bf0c      	ite	eq
  200fce:	2301      	moveq	r3, #1
  200fd0:	2300      	movne	r3, #0
  200fd2:	b2db      	uxtb	r3, r3
  200fd4:	2b00      	cmp	r3, #0
  200fd6:	d002      	beq.n	200fde <adcStart+0x1e>
  200fd8:	481a      	ldr	r0, [pc, #104]	; (201044 <adcStart+0x84>)
  200fda:	f002 fb31 	bl	203640 <chSysHalt>

  osalSysLock();
  200fde:	f7ff ffa7 	bl	200f30 <osalSysLock.lto_priv.2>
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
  200fe2:	9b01      	ldr	r3, [sp, #4]
  200fe4:	781b      	ldrb	r3, [r3, #0]
  200fe6:	2b01      	cmp	r3, #1
  200fe8:	bf14      	ite	ne
  200fea:	2301      	movne	r3, #1
  200fec:	2300      	moveq	r3, #0
  200fee:	b2db      	uxtb	r3, r3
  200ff0:	2b00      	cmp	r3, #0
  200ff2:	d00b      	beq.n	20100c <adcStart+0x4c>
  200ff4:	9b01      	ldr	r3, [sp, #4]
  200ff6:	781b      	ldrb	r3, [r3, #0]
  200ff8:	2b02      	cmp	r3, #2
  200ffa:	bf14      	ite	ne
  200ffc:	2301      	movne	r3, #1
  200ffe:	2300      	moveq	r3, #0
  201000:	b2db      	uxtb	r3, r3
  201002:	2b00      	cmp	r3, #0
  201004:	d002      	beq.n	20100c <adcStart+0x4c>
  201006:	480f      	ldr	r0, [pc, #60]	; (201044 <adcStart+0x84>)
  201008:	f002 fb1a 	bl	203640 <chSysHalt>
                "invalid state");
  adcp->config = config;
  20100c:	9b01      	ldr	r3, [sp, #4]
  20100e:	9a00      	ldr	r2, [sp, #0]
  201010:	605a      	str	r2, [r3, #4]

#if defined(ADC_LLD_ENHANCED_API)
  msg = adc_lld_start(adcp);
#else
  adc_lld_start(adcp);
  201012:	9801      	ldr	r0, [sp, #4]
  201014:	f001 f82c 	bl	202070 <adc_lld_start>
  msg = HAL_RET_SUCCESS;
  201018:	2300      	movs	r3, #0
  20101a:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
  20101c:	9b03      	ldr	r3, [sp, #12]
  20101e:	2b00      	cmp	r3, #0
  201020:	d103      	bne.n	20102a <adcStart+0x6a>
    adcp->state = ADC_READY;
  201022:	9b01      	ldr	r3, [sp, #4]
  201024:	2202      	movs	r2, #2
  201026:	701a      	strb	r2, [r3, #0]
  201028:	e002      	b.n	201030 <adcStart+0x70>
  }
  else {
    adcp->state = ADC_STOP;
  20102a:	9b01      	ldr	r3, [sp, #4]
  20102c:	2201      	movs	r2, #1
  20102e:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
  201030:	f7ff ff86 	bl	200f40 <osalSysUnlock.lto_priv.2>

  return msg;
  201034:	9b03      	ldr	r3, [sp, #12]
  201036:	bf00      	nop
  201038:	bf00      	nop
}
  20103a:	4618      	mov	r0, r3
  20103c:	b005      	add	sp, #20
  20103e:	f85d fb04 	ldr.w	pc, [sp], #4
  201042:	bf00      	nop
  201044:	08005fa4 	.word	0x08005fa4
	...

00201050 <adcStartConversion>:
 * @api
 */
void adcStartConversion(ADCDriver *adcp,
                        const ADCConversionGroup *grpp,
                        adcsample_t *samples,
                        size_t depth) {
  201050:	b500      	push	{lr}
  201052:	b085      	sub	sp, #20
  201054:	9003      	str	r0, [sp, #12]
  201056:	9102      	str	r1, [sp, #8]
  201058:	9201      	str	r2, [sp, #4]
  20105a:	9300      	str	r3, [sp, #0]

  osalSysLock();
  20105c:	f7ff ff68 	bl	200f30 <osalSysLock.lto_priv.2>
  adcStartConversionI(adcp, grpp, samples, depth);
  201060:	9b00      	ldr	r3, [sp, #0]
  201062:	9a01      	ldr	r2, [sp, #4]
  201064:	9902      	ldr	r1, [sp, #8]
  201066:	9803      	ldr	r0, [sp, #12]
  201068:	f000 f80a 	bl	201080 <adcStartConversionI>
  osalSysUnlock();
  20106c:	f7ff ff68 	bl	200f40 <osalSysUnlock.lto_priv.2>
}
  201070:	bf00      	nop
  201072:	b005      	add	sp, #20
  201074:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201080 <adcStartConversionI>:
 * @iclass
 */
void adcStartConversionI(ADCDriver *adcp,
                         const ADCConversionGroup *grpp,
                         adcsample_t *samples,
                         size_t depth) {
  201080:	b500      	push	{lr}
  201082:	b085      	sub	sp, #20
  201084:	9003      	str	r0, [sp, #12]
  201086:	9102      	str	r1, [sp, #8]
  201088:	9201      	str	r2, [sp, #4]
  20108a:	9300      	str	r3, [sp, #0]

  osalDbgCheckClassI();
  20108c:	f002 fc48 	bl	203920 <chDbgCheckClassI>
  osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
  201090:	9b03      	ldr	r3, [sp, #12]
  201092:	2b00      	cmp	r3, #0
  201094:	bf0c      	ite	eq
  201096:	2301      	moveq	r3, #1
  201098:	2300      	movne	r3, #0
  20109a:	b2db      	uxtb	r3, r3
  20109c:	2b00      	cmp	r3, #0
  20109e:	d107      	bne.n	2010b0 <adcStartConversionI+0x30>
  2010a0:	9b02      	ldr	r3, [sp, #8]
  2010a2:	2b00      	cmp	r3, #0
  2010a4:	bf0c      	ite	eq
  2010a6:	2301      	moveq	r3, #1
  2010a8:	2300      	movne	r3, #0
  2010aa:	b2db      	uxtb	r3, r3
  2010ac:	2b00      	cmp	r3, #0
  2010ae:	d001      	beq.n	2010b4 <adcStartConversionI+0x34>
  2010b0:	2301      	movs	r3, #1
  2010b2:	e000      	b.n	2010b6 <adcStartConversionI+0x36>
  2010b4:	2300      	movs	r3, #0
  2010b6:	2b00      	cmp	r3, #0
  2010b8:	d107      	bne.n	2010ca <adcStartConversionI+0x4a>
  2010ba:	9b01      	ldr	r3, [sp, #4]
  2010bc:	2b00      	cmp	r3, #0
  2010be:	bf0c      	ite	eq
  2010c0:	2301      	moveq	r3, #1
  2010c2:	2300      	movne	r3, #0
  2010c4:	b2db      	uxtb	r3, r3
  2010c6:	2b00      	cmp	r3, #0
  2010c8:	d001      	beq.n	2010ce <adcStartConversionI+0x4e>
  2010ca:	2301      	movs	r3, #1
  2010cc:	e000      	b.n	2010d0 <adcStartConversionI+0x50>
  2010ce:	2300      	movs	r3, #0
  2010d0:	2b00      	cmp	r3, #0
  2010d2:	d107      	bne.n	2010e4 <adcStartConversionI+0x64>
  2010d4:	9b00      	ldr	r3, [sp, #0]
  2010d6:	2b00      	cmp	r3, #0
  2010d8:	bf0c      	ite	eq
  2010da:	2301      	moveq	r3, #1
  2010dc:	2300      	movne	r3, #0
  2010de:	b2db      	uxtb	r3, r3
  2010e0:	2b00      	cmp	r3, #0
  2010e2:	d001      	beq.n	2010e8 <adcStartConversionI+0x68>
  2010e4:	2301      	movs	r3, #1
  2010e6:	e000      	b.n	2010ea <adcStartConversionI+0x6a>
  2010e8:	2300      	movs	r3, #0
  2010ea:	2b00      	cmp	r3, #0
  2010ec:	d116      	bne.n	20111c <adcStartConversionI+0x9c>
  2010ee:	9b00      	ldr	r3, [sp, #0]
  2010f0:	2b01      	cmp	r3, #1
  2010f2:	bf14      	ite	ne
  2010f4:	2301      	movne	r3, #1
  2010f6:	2300      	moveq	r3, #0
  2010f8:	b2db      	uxtb	r3, r3
  2010fa:	2b00      	cmp	r3, #0
  2010fc:	d00b      	beq.n	201116 <adcStartConversionI+0x96>
  2010fe:	9b00      	ldr	r3, [sp, #0]
  201100:	f003 0301 	and.w	r3, r3, #1
  201104:	2b00      	cmp	r3, #0
  201106:	bf14      	ite	ne
  201108:	2301      	movne	r3, #1
  20110a:	2300      	moveq	r3, #0
  20110c:	b2db      	uxtb	r3, r3
  20110e:	2b00      	cmp	r3, #0
  201110:	d001      	beq.n	201116 <adcStartConversionI+0x96>
  201112:	2301      	movs	r3, #1
  201114:	e000      	b.n	201118 <adcStartConversionI+0x98>
  201116:	2300      	movs	r3, #0
  201118:	2b00      	cmp	r3, #0
  20111a:	d002      	beq.n	201122 <adcStartConversionI+0xa2>
  20111c:	4815      	ldr	r0, [pc, #84]	; (201174 <adcStartConversionI+0xf4>)
  20111e:	f002 fa8f 	bl	203640 <chSysHalt>
               (depth > 0U) && ((depth == 1U) || ((depth & 1U) == 0U)));
  osalDbgAssert((adcp->state == ADC_READY) ||
  201122:	9b03      	ldr	r3, [sp, #12]
  201124:	781b      	ldrb	r3, [r3, #0]
  201126:	2b02      	cmp	r3, #2
  201128:	bf14      	ite	ne
  20112a:	2301      	movne	r3, #1
  20112c:	2300      	moveq	r3, #0
  20112e:	b2db      	uxtb	r3, r3
  201130:	2b00      	cmp	r3, #0
  201132:	d00b      	beq.n	20114c <adcStartConversionI+0xcc>
  201134:	9b03      	ldr	r3, [sp, #12]
  201136:	781b      	ldrb	r3, [r3, #0]
  201138:	2b05      	cmp	r3, #5
  20113a:	bf14      	ite	ne
  20113c:	2301      	movne	r3, #1
  20113e:	2300      	moveq	r3, #0
  201140:	b2db      	uxtb	r3, r3
  201142:	2b00      	cmp	r3, #0
  201144:	d002      	beq.n	20114c <adcStartConversionI+0xcc>
  201146:	480b      	ldr	r0, [pc, #44]	; (201174 <adcStartConversionI+0xf4>)
  201148:	f002 fa7a 	bl	203640 <chSysHalt>
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  20114c:	9b03      	ldr	r3, [sp, #12]
  20114e:	9a01      	ldr	r2, [sp, #4]
  201150:	609a      	str	r2, [r3, #8]
  adcp->depth    = depth;
  201152:	9b03      	ldr	r3, [sp, #12]
  201154:	9a00      	ldr	r2, [sp, #0]
  201156:	60da      	str	r2, [r3, #12]
  adcp->grpp     = grpp;
  201158:	9b03      	ldr	r3, [sp, #12]
  20115a:	9a02      	ldr	r2, [sp, #8]
  20115c:	611a      	str	r2, [r3, #16]
  adcp->state    = ADC_ACTIVE;
  20115e:	9b03      	ldr	r3, [sp, #12]
  201160:	2203      	movs	r2, #3
  201162:	701a      	strb	r2, [r3, #0]
  adc_lld_start_conversion(adcp);
  201164:	9803      	ldr	r0, [sp, #12]
  201166:	f000 ffdb 	bl	202120 <adc_lld_start_conversion>
}
  20116a:	bf00      	nop
  20116c:	b005      	add	sp, #20
  20116e:	f85d fb04 	ldr.w	pc, [sp], #4
  201172:	bf00      	nop
  201174:	08005fbc 	.word	0x08005fbc
	...

00201180 <chSysLock.lto_priv.3>:
static inline void chSysLock(void) {
  201180:	b500      	push	{lr}
  201182:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  201184:	b672      	cpsid	i
}
  201186:	bf00      	nop
  201188:	2330      	movs	r3, #48	; 0x30
  20118a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20118c:	9b01      	ldr	r3, [sp, #4]
  20118e:	f383 8811 	msr	BASEPRI, r3
}
  201192:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  201194:	b662      	cpsie	i
}
  201196:	bf00      	nop
}
  201198:	bf00      	nop
  __dbg_check_lock();
  20119a:	f002 faa1 	bl	2036e0 <__dbg_check_lock>
}
  20119e:	bf00      	nop
  2011a0:	b003      	add	sp, #12
  2011a2:	f85d fb04 	ldr.w	pc, [sp], #4
  2011a6:	bf00      	nop
	...

002011b0 <chSysUnlock.lto_priv.3>:
static inline void chSysUnlock(void) {
  2011b0:	b500      	push	{lr}
  2011b2:	b083      	sub	sp, #12
  __dbg_check_unlock();
  2011b4:	f002 fabc 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  2011b8:	4b12      	ldr	r3, [pc, #72]	; (201204 <chSysUnlock.lto_priv.3+0x54>)
  2011ba:	681b      	ldr	r3, [r3, #0]
  2011bc:	4a11      	ldr	r2, [pc, #68]	; (201204 <chSysUnlock.lto_priv.3+0x54>)
  2011be:	4293      	cmp	r3, r2
  2011c0:	bf14      	ite	ne
  2011c2:	2301      	movne	r3, #1
  2011c4:	2300      	moveq	r3, #0
  2011c6:	b2db      	uxtb	r3, r3
  2011c8:	2b00      	cmp	r3, #0
  2011ca:	d00f      	beq.n	2011ec <chSysUnlock.lto_priv.3+0x3c>
  2011cc:	4b0d      	ldr	r3, [pc, #52]	; (201204 <chSysUnlock.lto_priv.3+0x54>)
  2011ce:	68db      	ldr	r3, [r3, #12]
  2011d0:	689a      	ldr	r2, [r3, #8]
  2011d2:	4b0c      	ldr	r3, [pc, #48]	; (201204 <chSysUnlock.lto_priv.3+0x54>)
  2011d4:	681b      	ldr	r3, [r3, #0]
  2011d6:	689b      	ldr	r3, [r3, #8]
  2011d8:	429a      	cmp	r2, r3
  2011da:	bf34      	ite	cc
  2011dc:	2301      	movcc	r3, #1
  2011de:	2300      	movcs	r3, #0
  2011e0:	b2db      	uxtb	r3, r3
  2011e2:	2b00      	cmp	r3, #0
  2011e4:	d002      	beq.n	2011ec <chSysUnlock.lto_priv.3+0x3c>
  2011e6:	4808      	ldr	r0, [pc, #32]	; (201208 <chSysUnlock.lto_priv.3+0x58>)
  2011e8:	f002 fa2a 	bl	203640 <chSysHalt>
  2011ec:	2300      	movs	r3, #0
  2011ee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2011f0:	9b01      	ldr	r3, [sp, #4]
  2011f2:	f383 8811 	msr	BASEPRI, r3
}
  2011f6:	bf00      	nop
}
  2011f8:	bf00      	nop
}
  2011fa:	bf00      	nop
  2011fc:	b003      	add	sp, #12
  2011fe:	f85d fb04 	ldr.w	pc, [sp], #4
  201202:	bf00      	nop
  201204:	20000958 	.word	0x20000958
  201208:	08005fdc 	.word	0x08005fdc
  20120c:	00000000 	.word	0x00000000

00201210 <osalSysLock.lto_priv.3>:
static inline void osalSysLock(void) {
  201210:	b508      	push	{r3, lr}
  chSysLock();
  201212:	f7ff ffb5 	bl	201180 <chSysLock.lto_priv.3>
}
  201216:	bf00      	nop
  201218:	bd08      	pop	{r3, pc}
  20121a:	bf00      	nop
  20121c:	0000      	movs	r0, r0
	...

00201220 <osalSysUnlock.lto_priv.3>:
static inline void osalSysUnlock(void) {
  201220:	b508      	push	{r3, lr}
  chSysUnlock();
  201222:	f7ff ffc5 	bl	2011b0 <chSysUnlock.lto_priv.3>
}
  201226:	bf00      	nop
  201228:	bd08      	pop	{r3, pc}
  20122a:	bf00      	nop
  20122c:	0000      	movs	r0, r0
	...

00201230 <gptInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void gptInit(void) {
  201230:	b508      	push	{r3, lr}

  gpt_lld_init();
  201232:	f001 fda5 	bl	202d80 <gpt_lld_init>
}
  201236:	bf00      	nop
  201238:	bd08      	pop	{r3, pc}
  20123a:	bf00      	nop
  20123c:	0000      	movs	r0, r0
	...

00201240 <gptObjectInit>:
 *
 * @param[out] gptp     pointer to the @p GPTDriver object
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {
  201240:	b082      	sub	sp, #8
  201242:	9001      	str	r0, [sp, #4]

  gptp->state  = GPT_STOP;
  201244:	9b01      	ldr	r3, [sp, #4]
  201246:	2201      	movs	r2, #1
  201248:	701a      	strb	r2, [r3, #0]
  gptp->config = NULL;
  20124a:	9b01      	ldr	r3, [sp, #4]
  20124c:	2200      	movs	r2, #0
  20124e:	605a      	str	r2, [r3, #4]
}
  201250:	bf00      	nop
  201252:	b002      	add	sp, #8
  201254:	4770      	bx	lr
  201256:	bf00      	nop
	...

00201260 <gptStart>:
 * @param[in] config    pointer to the @p GPTConfig object
 * @return              The operation status.
 *
 * @api
 */
msg_t gptStart(GPTDriver *gptp, const GPTConfig *config) {
  201260:	b500      	push	{lr}
  201262:	b085      	sub	sp, #20
  201264:	9001      	str	r0, [sp, #4]
  201266:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck((gptp != NULL) && (config != NULL));
  201268:	9b01      	ldr	r3, [sp, #4]
  20126a:	2b00      	cmp	r3, #0
  20126c:	bf0c      	ite	eq
  20126e:	2301      	moveq	r3, #1
  201270:	2300      	movne	r3, #0
  201272:	b2db      	uxtb	r3, r3
  201274:	2b00      	cmp	r3, #0
  201276:	d107      	bne.n	201288 <gptStart+0x28>
  201278:	9b00      	ldr	r3, [sp, #0]
  20127a:	2b00      	cmp	r3, #0
  20127c:	bf0c      	ite	eq
  20127e:	2301      	moveq	r3, #1
  201280:	2300      	movne	r3, #0
  201282:	b2db      	uxtb	r3, r3
  201284:	2b00      	cmp	r3, #0
  201286:	d002      	beq.n	20128e <gptStart+0x2e>
  201288:	481a      	ldr	r0, [pc, #104]	; (2012f4 <gptStart+0x94>)
  20128a:	f002 f9d9 	bl	203640 <chSysHalt>

  osalSysLock();
  20128e:	f7ff ffbf 	bl	201210 <osalSysLock.lto_priv.3>

  osalDbgAssert((gptp->state == GPT_STOP) || (gptp->state == GPT_READY),
  201292:	9b01      	ldr	r3, [sp, #4]
  201294:	781b      	ldrb	r3, [r3, #0]
  201296:	2b01      	cmp	r3, #1
  201298:	bf14      	ite	ne
  20129a:	2301      	movne	r3, #1
  20129c:	2300      	moveq	r3, #0
  20129e:	b2db      	uxtb	r3, r3
  2012a0:	2b00      	cmp	r3, #0
  2012a2:	d00b      	beq.n	2012bc <gptStart+0x5c>
  2012a4:	9b01      	ldr	r3, [sp, #4]
  2012a6:	781b      	ldrb	r3, [r3, #0]
  2012a8:	2b02      	cmp	r3, #2
  2012aa:	bf14      	ite	ne
  2012ac:	2301      	movne	r3, #1
  2012ae:	2300      	moveq	r3, #0
  2012b0:	b2db      	uxtb	r3, r3
  2012b2:	2b00      	cmp	r3, #0
  2012b4:	d002      	beq.n	2012bc <gptStart+0x5c>
  2012b6:	480f      	ldr	r0, [pc, #60]	; (2012f4 <gptStart+0x94>)
  2012b8:	f002 f9c2 	bl	203640 <chSysHalt>
              "invalid state");

  gptp->config = config;
  2012bc:	9b01      	ldr	r3, [sp, #4]
  2012be:	9a00      	ldr	r2, [sp, #0]
  2012c0:	605a      	str	r2, [r3, #4]

#if defined(GPT_LLD_ENHANCED_API)
  msg = gpt_lld_start(gptp);
#else
  gpt_lld_start(gptp);
  2012c2:	9801      	ldr	r0, [sp, #4]
  2012c4:	f001 fd6c 	bl	202da0 <gpt_lld_start>
  msg = HAL_RET_SUCCESS;
  2012c8:	2300      	movs	r3, #0
  2012ca:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
  2012cc:	9b03      	ldr	r3, [sp, #12]
  2012ce:	2b00      	cmp	r3, #0
  2012d0:	d103      	bne.n	2012da <gptStart+0x7a>
    gptp->state = GPT_READY;
  2012d2:	9b01      	ldr	r3, [sp, #4]
  2012d4:	2202      	movs	r2, #2
  2012d6:	701a      	strb	r2, [r3, #0]
  2012d8:	e002      	b.n	2012e0 <gptStart+0x80>
  }
  else {
    gptp->state = GPT_STOP;
  2012da:	9b01      	ldr	r3, [sp, #4]
  2012dc:	2201      	movs	r2, #1
  2012de:	701a      	strb	r2, [r3, #0]
  }

  osalSysUnlock();
  2012e0:	f7ff ff9e 	bl	201220 <osalSysUnlock.lto_priv.3>

  return msg;
  2012e4:	9b03      	ldr	r3, [sp, #12]
  2012e6:	bf00      	nop
  2012e8:	bf00      	nop
}
  2012ea:	4618      	mov	r0, r3
  2012ec:	b005      	add	sp, #20
  2012ee:	f85d fb04 	ldr.w	pc, [sp], #4
  2012f2:	bf00      	nop
  2012f4:	08005fd0 	.word	0x08005fd0
	...

00201300 <gptStartContinuous>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @api
 */
void gptStartContinuous(GPTDriver *gptp, gptcnt_t interval) {
  201300:	b500      	push	{lr}
  201302:	b083      	sub	sp, #12
  201304:	9001      	str	r0, [sp, #4]
  201306:	9100      	str	r1, [sp, #0]

  osalSysLock();
  201308:	f7ff ff82 	bl	201210 <osalSysLock.lto_priv.3>
  gptStartContinuousI(gptp, interval);
  20130c:	9900      	ldr	r1, [sp, #0]
  20130e:	9801      	ldr	r0, [sp, #4]
  201310:	f000 f806 	bl	201320 <gptStartContinuousI>
  osalSysUnlock();
  201314:	f7ff ff84 	bl	201220 <osalSysUnlock.lto_priv.3>
}
  201318:	bf00      	nop
  20131a:	b003      	add	sp, #12
  20131c:	f85d fb04 	ldr.w	pc, [sp], #4

00201320 <gptStartContinuousI>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @iclass
 */
void gptStartContinuousI(GPTDriver *gptp, gptcnt_t interval) {
  201320:	b500      	push	{lr}
  201322:	b083      	sub	sp, #12
  201324:	9001      	str	r0, [sp, #4]
  201326:	9100      	str	r1, [sp, #0]

  osalDbgCheckClassI();
  201328:	f002 fafa 	bl	203920 <chDbgCheckClassI>
  osalDbgCheck(gptp != NULL);
  20132c:	9b01      	ldr	r3, [sp, #4]
  20132e:	2b00      	cmp	r3, #0
  201330:	bf0c      	ite	eq
  201332:	2301      	moveq	r3, #1
  201334:	2300      	movne	r3, #0
  201336:	b2db      	uxtb	r3, r3
  201338:	2b00      	cmp	r3, #0
  20133a:	d002      	beq.n	201342 <gptStartContinuousI+0x22>
  20133c:	480c      	ldr	r0, [pc, #48]	; (201370 <gptStartContinuousI+0x50>)
  20133e:	f002 f97f 	bl	203640 <chSysHalt>
  osalDbgAssert(gptp->state == GPT_READY,
  201342:	9b01      	ldr	r3, [sp, #4]
  201344:	781b      	ldrb	r3, [r3, #0]
  201346:	2b02      	cmp	r3, #2
  201348:	bf14      	ite	ne
  20134a:	2301      	movne	r3, #1
  20134c:	2300      	moveq	r3, #0
  20134e:	b2db      	uxtb	r3, r3
  201350:	2b00      	cmp	r3, #0
  201352:	d002      	beq.n	20135a <gptStartContinuousI+0x3a>
  201354:	4806      	ldr	r0, [pc, #24]	; (201370 <gptStartContinuousI+0x50>)
  201356:	f002 f973 	bl	203640 <chSysHalt>
                "invalid state");

  gptp->state = GPT_CONTINUOUS;
  20135a:	9b01      	ldr	r3, [sp, #4]
  20135c:	2203      	movs	r2, #3
  20135e:	701a      	strb	r2, [r3, #0]
  gpt_lld_start_timer(gptp, interval);
  201360:	9900      	ldr	r1, [sp, #0]
  201362:	9801      	ldr	r0, [sp, #4]
  201364:	f001 fd94 	bl	202e90 <gpt_lld_start_timer>
}
  201368:	bf00      	nop
  20136a:	b003      	add	sp, #12
  20136c:	f85d fb04 	ldr.w	pc, [sp], #4
  201370:	08005fe8 	.word	0x08005fe8
	...

00201380 <chSysLock.lto_priv.4>:
static inline void chSysLock(void) {
  201380:	b500      	push	{lr}
  201382:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  201384:	b672      	cpsid	i
}
  201386:	bf00      	nop
  201388:	2330      	movs	r3, #48	; 0x30
  20138a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20138c:	9b01      	ldr	r3, [sp, #4]
  20138e:	f383 8811 	msr	BASEPRI, r3
}
  201392:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  201394:	b662      	cpsie	i
}
  201396:	bf00      	nop
}
  201398:	bf00      	nop
  __dbg_check_lock();
  20139a:	f002 f9a1 	bl	2036e0 <__dbg_check_lock>
}
  20139e:	bf00      	nop
  2013a0:	b003      	add	sp, #12
  2013a2:	f85d fb04 	ldr.w	pc, [sp], #4
  2013a6:	bf00      	nop
	...

002013b0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
  2013b0:	b500      	push	{lr}
  2013b2:	b083      	sub	sp, #12
  __dbg_check_unlock();
  2013b4:	f002 f9bc 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  2013b8:	4b12      	ldr	r3, [pc, #72]	; (201404 <chSysUnlock.lto_priv.4+0x54>)
  2013ba:	681b      	ldr	r3, [r3, #0]
  2013bc:	4a11      	ldr	r2, [pc, #68]	; (201404 <chSysUnlock.lto_priv.4+0x54>)
  2013be:	4293      	cmp	r3, r2
  2013c0:	bf14      	ite	ne
  2013c2:	2301      	movne	r3, #1
  2013c4:	2300      	moveq	r3, #0
  2013c6:	b2db      	uxtb	r3, r3
  2013c8:	2b00      	cmp	r3, #0
  2013ca:	d00f      	beq.n	2013ec <chSysUnlock.lto_priv.4+0x3c>
  2013cc:	4b0d      	ldr	r3, [pc, #52]	; (201404 <chSysUnlock.lto_priv.4+0x54>)
  2013ce:	68db      	ldr	r3, [r3, #12]
  2013d0:	689a      	ldr	r2, [r3, #8]
  2013d2:	4b0c      	ldr	r3, [pc, #48]	; (201404 <chSysUnlock.lto_priv.4+0x54>)
  2013d4:	681b      	ldr	r3, [r3, #0]
  2013d6:	689b      	ldr	r3, [r3, #8]
  2013d8:	429a      	cmp	r2, r3
  2013da:	bf34      	ite	cc
  2013dc:	2301      	movcc	r3, #1
  2013de:	2300      	movcs	r3, #0
  2013e0:	b2db      	uxtb	r3, r3
  2013e2:	2b00      	cmp	r3, #0
  2013e4:	d002      	beq.n	2013ec <chSysUnlock.lto_priv.4+0x3c>
  2013e6:	4808      	ldr	r0, [pc, #32]	; (201408 <chSysUnlock.lto_priv.4+0x58>)
  2013e8:	f002 f92a 	bl	203640 <chSysHalt>
  2013ec:	2300      	movs	r3, #0
  2013ee:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2013f0:	9b01      	ldr	r3, [sp, #4]
  2013f2:	f383 8811 	msr	BASEPRI, r3
}
  2013f6:	bf00      	nop
}
  2013f8:	bf00      	nop
}
  2013fa:	bf00      	nop
  2013fc:	b003      	add	sp, #12
  2013fe:	f85d fb04 	ldr.w	pc, [sp], #4
  201402:	bf00      	nop
  201404:	20000958 	.word	0x20000958
  201408:	08006034 	.word	0x08006034
  20140c:	00000000 	.word	0x00000000

00201410 <osalSysLock.lto_priv.4>:
static inline void osalSysLock(void) {
  201410:	b508      	push	{r3, lr}
  chSysLock();
  201412:	f7ff ffb5 	bl	201380 <chSysLock.lto_priv.4>
}
  201416:	bf00      	nop
  201418:	bd08      	pop	{r3, pc}
  20141a:	bf00      	nop
  20141c:	0000      	movs	r0, r0
	...

00201420 <osalSysUnlock.lto_priv.4>:
static inline void osalSysUnlock(void) {
  201420:	b508      	push	{r3, lr}
  chSysUnlock();
  201422:	f7ff ffc5 	bl	2013b0 <chSysUnlock.lto_priv.4>
}
  201426:	bf00      	nop
  201428:	bd08      	pop	{r3, pc}
  20142a:	bf00      	nop
  20142c:	0000      	movs	r0, r0
	...

00201430 <osalEventObjectInit>:
static inline void osalEventObjectInit(event_source_t *esp) {
  201430:	b500      	push	{lr}
  201432:	b083      	sub	sp, #12
  201434:	9001      	str	r0, [sp, #4]
  chEvtObjectInit(esp);
  201436:	9801      	ldr	r0, [sp, #4]
  201438:	f004 f982 	bl	205740 <chEvtObjectInit>
}
  20143c:	bf00      	nop
  20143e:	b003      	add	sp, #12
  201440:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201450 <osalEventBroadcastFlagsI.lto_priv.1>:
                                            eventflags_t flags) {
  201450:	b500      	push	{lr}
  201452:	b083      	sub	sp, #12
  201454:	9001      	str	r0, [sp, #4]
  201456:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
  201458:	9900      	ldr	r1, [sp, #0]
  20145a:	9801      	ldr	r0, [sp, #4]
  20145c:	f004 f9c8 	bl	2057f0 <chEvtBroadcastFlagsI>
}
  201460:	bf00      	nop
  201462:	b003      	add	sp, #12
  201464:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201470 <_write>:
/*
 * Interface implementation, the following functions just invoke the equivalent
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {
  201470:	b500      	push	{lr}
  201472:	b085      	sub	sp, #20
  201474:	9003      	str	r0, [sp, #12]
  201476:	9102      	str	r1, [sp, #8]
  201478:	9201      	str	r2, [sp, #4]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
  20147a:	9b03      	ldr	r3, [sp, #12]
  20147c:	f103 0030 	add.w	r0, r3, #48	; 0x30
  201480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  201484:	9a01      	ldr	r2, [sp, #4]
  201486:	9902      	ldr	r1, [sp, #8]
  201488:	f7ff fcba 	bl	200e00 <oqWriteTimeout>
  20148c:	4603      	mov	r3, r0
                        n, TIME_INFINITE);
}
  20148e:	4618      	mov	r0, r3
  201490:	b005      	add	sp, #20
  201492:	f85d fb04 	ldr.w	pc, [sp], #4
  201496:	bf00      	nop
	...

002014a0 <_read>:

static size_t _read(void *ip, uint8_t *bp, size_t n) {
  2014a0:	b500      	push	{lr}
  2014a2:	b085      	sub	sp, #20
  2014a4:	9003      	str	r0, [sp, #12]
  2014a6:	9102      	str	r1, [sp, #8]
  2014a8:	9201      	str	r2, [sp, #4]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
  2014aa:	9b03      	ldr	r3, [sp, #12]
  2014ac:	f103 000c 	add.w	r0, r3, #12
  2014b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  2014b4:	9a01      	ldr	r2, [sp, #4]
  2014b6:	9902      	ldr	r1, [sp, #8]
  2014b8:	f7ff fba2 	bl	200c00 <iqReadTimeout>
  2014bc:	4603      	mov	r3, r0
                       n, TIME_INFINITE);
}
  2014be:	4618      	mov	r0, r3
  2014c0:	b005      	add	sp, #20
  2014c2:	f85d fb04 	ldr.w	pc, [sp], #4
  2014c6:	bf00      	nop
	...

002014d0 <_put>:

static msg_t _put(void *ip, uint8_t b) {
  2014d0:	b500      	push	{lr}
  2014d2:	b083      	sub	sp, #12
  2014d4:	9001      	str	r0, [sp, #4]
  2014d6:	460b      	mov	r3, r1
  2014d8:	f88d 3003 	strb.w	r3, [sp, #3]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
  2014dc:	9b01      	ldr	r3, [sp, #4]
  2014de:	3330      	adds	r3, #48	; 0x30
  2014e0:	f89d 1003 	ldrb.w	r1, [sp, #3]
  2014e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  2014e8:	4618      	mov	r0, r3
  2014ea:	f7ff fc01 	bl	200cf0 <oqPutTimeout>
  2014ee:	4603      	mov	r3, r0
}
  2014f0:	4618      	mov	r0, r3
  2014f2:	b003      	add	sp, #12
  2014f4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201500 <_get>:

static msg_t _get(void *ip) {
  201500:	b500      	push	{lr}
  201502:	b083      	sub	sp, #12
  201504:	9001      	str	r0, [sp, #4]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
  201506:	9b01      	ldr	r3, [sp, #4]
  201508:	330c      	adds	r3, #12
  20150a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  20150e:	4618      	mov	r0, r3
  201510:	f7ff fb36 	bl	200b80 <iqGetTimeout>
  201514:	4603      	mov	r3, r0
}
  201516:	4618      	mov	r0, r3
  201518:	b003      	add	sp, #12
  20151a:	f85d fb04 	ldr.w	pc, [sp], #4
  20151e:	bf00      	nop

00201520 <_putt>:

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
  201520:	b500      	push	{lr}
  201522:	b085      	sub	sp, #20
  201524:	9003      	str	r0, [sp, #12]
  201526:	460b      	mov	r3, r1
  201528:	9201      	str	r2, [sp, #4]
  20152a:	f88d 300b 	strb.w	r3, [sp, #11]

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
  20152e:	9b03      	ldr	r3, [sp, #12]
  201530:	3330      	adds	r3, #48	; 0x30
  201532:	f89d 100b 	ldrb.w	r1, [sp, #11]
  201536:	9a01      	ldr	r2, [sp, #4]
  201538:	4618      	mov	r0, r3
  20153a:	f7ff fbd9 	bl	200cf0 <oqPutTimeout>
  20153e:	4603      	mov	r3, r0
}
  201540:	4618      	mov	r0, r3
  201542:	b005      	add	sp, #20
  201544:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201550 <_gett>:

static msg_t _gett(void *ip, sysinterval_t timeout) {
  201550:	b500      	push	{lr}
  201552:	b083      	sub	sp, #12
  201554:	9001      	str	r0, [sp, #4]
  201556:	9100      	str	r1, [sp, #0]

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
  201558:	9b01      	ldr	r3, [sp, #4]
  20155a:	330c      	adds	r3, #12
  20155c:	9900      	ldr	r1, [sp, #0]
  20155e:	4618      	mov	r0, r3
  201560:	f7ff fb0e 	bl	200b80 <iqGetTimeout>
  201564:	4603      	mov	r3, r0
}
  201566:	4618      	mov	r0, r3
  201568:	b003      	add	sp, #12
  20156a:	f85d fb04 	ldr.w	pc, [sp], #4
  20156e:	bf00      	nop

00201570 <_writet>:

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {
  201570:	b500      	push	{lr}
  201572:	b085      	sub	sp, #20
  201574:	9003      	str	r0, [sp, #12]
  201576:	9102      	str	r1, [sp, #8]
  201578:	9201      	str	r2, [sp, #4]
  20157a:	9300      	str	r3, [sp, #0]

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
  20157c:	9b03      	ldr	r3, [sp, #12]
  20157e:	f103 0030 	add.w	r0, r3, #48	; 0x30
  201582:	9b00      	ldr	r3, [sp, #0]
  201584:	9a01      	ldr	r2, [sp, #4]
  201586:	9902      	ldr	r1, [sp, #8]
  201588:	f7ff fc3a 	bl	200e00 <oqWriteTimeout>
  20158c:	4603      	mov	r3, r0
}
  20158e:	4618      	mov	r0, r3
  201590:	b005      	add	sp, #20
  201592:	f85d fb04 	ldr.w	pc, [sp], #4
  201596:	bf00      	nop
	...

002015a0 <_readt>:

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {
  2015a0:	b500      	push	{lr}
  2015a2:	b085      	sub	sp, #20
  2015a4:	9003      	str	r0, [sp, #12]
  2015a6:	9102      	str	r1, [sp, #8]
  2015a8:	9201      	str	r2, [sp, #4]
  2015aa:	9300      	str	r3, [sp, #0]

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
  2015ac:	9b03      	ldr	r3, [sp, #12]
  2015ae:	f103 000c 	add.w	r0, r3, #12
  2015b2:	9b00      	ldr	r3, [sp, #0]
  2015b4:	9a01      	ldr	r2, [sp, #4]
  2015b6:	9902      	ldr	r1, [sp, #8]
  2015b8:	f7ff fb22 	bl	200c00 <iqReadTimeout>
  2015bc:	4603      	mov	r3, r0
}
  2015be:	4618      	mov	r0, r3
  2015c0:	b005      	add	sp, #20
  2015c2:	f85d fb04 	ldr.w	pc, [sp], #4
  2015c6:	bf00      	nop
	...

002015d0 <_ctl>:

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
  2015d0:	b500      	push	{lr}
  2015d2:	b087      	sub	sp, #28
  2015d4:	9003      	str	r0, [sp, #12]
  2015d6:	9102      	str	r1, [sp, #8]
  2015d8:	9201      	str	r2, [sp, #4]
  SerialDriver *sdp = (SerialDriver *)ip;
  2015da:	9b03      	ldr	r3, [sp, #12]
  2015dc:	9305      	str	r3, [sp, #20]

  osalDbgCheck(sdp != NULL);
  2015de:	9b05      	ldr	r3, [sp, #20]
  2015e0:	2b00      	cmp	r3, #0
  2015e2:	bf0c      	ite	eq
  2015e4:	2301      	moveq	r3, #1
  2015e6:	2300      	movne	r3, #0
  2015e8:	b2db      	uxtb	r3, r3
  2015ea:	2b00      	cmp	r3, #0
  2015ec:	d002      	beq.n	2015f4 <_ctl+0x24>
  2015ee:	4811      	ldr	r0, [pc, #68]	; (201634 <_ctl+0x64>)
  2015f0:	f002 f826 	bl	203640 <chSysHalt>

  switch (operation) {
  2015f4:	9b02      	ldr	r3, [sp, #8]
  2015f6:	2b00      	cmp	r3, #0
  2015f8:	d00e      	beq.n	201618 <_ctl+0x48>
  2015fa:	9b02      	ldr	r3, [sp, #8]
  2015fc:	2b01      	cmp	r3, #1
  2015fe:	d10e      	bne.n	20161e <_ctl+0x4e>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
  201600:	9b01      	ldr	r3, [sp, #4]
  201602:	2b00      	cmp	r3, #0
  201604:	bf14      	ite	ne
  201606:	2301      	movne	r3, #1
  201608:	2300      	moveq	r3, #0
  20160a:	b2db      	uxtb	r3, r3
  20160c:	2b00      	cmp	r3, #0
  20160e:	d009      	beq.n	201624 <_ctl+0x54>
  201610:	4808      	ldr	r0, [pc, #32]	; (201634 <_ctl+0x64>)
  201612:	f002 f815 	bl	203640 <chSysHalt>
    break;
  201616:	e005      	b.n	201624 <_ctl+0x54>
  case CHN_CTL_INVALID:
    return HAL_RET_UNKNOWN_CTL;
  201618:	f06f 0313 	mvn.w	r3, #19
  20161c:	e005      	b.n	20162a <_ctl+0x5a>
  default:
#if defined(SD_LLD_IMPLEMENTS_CTL)
    /* Delegating to the LLD if supported.*/
    return sd_lld_control(sdp, operation, arg);
#else
    return HAL_RET_UNKNOWN_CTL;
  20161e:	f06f 0313 	mvn.w	r3, #19
  201622:	e002      	b.n	20162a <_ctl+0x5a>
    break;
  201624:	bf00      	nop
#endif
  }
  return HAL_RET_SUCCESS;
  201626:	2300      	movs	r3, #0
  201628:	bf00      	nop
}
  20162a:	4618      	mov	r0, r3
  20162c:	b007      	add	sp, #28
  20162e:	f85d fb04 	ldr.w	pc, [sp], #4
  201632:	bf00      	nop
  201634:	08006024 	.word	0x08006024
	...

00201640 <sdInit>:
 * @note    This function is implicitly invoked by @p halInit(), there is
 *          no need to explicitly initialize the driver.
 *
 * @init
 */
void sdInit(void) {
  201640:	b508      	push	{r3, lr}

  sd_lld_init();
  201642:	f001 fdad 	bl	2031a0 <sd_lld_init>
}
  201646:	bf00      	nop
  201648:	bd08      	pop	{r3, pc}
  20164a:	bf00      	nop
  20164c:	0000      	movs	r0, r0
	...

00201650 <sdObjectInit>:
  sdp->state = SD_STOP;
  iqObjectInit(&sdp->iqueue, sdp->ib, SERIAL_BUFFERS_SIZE, inotify, sdp);
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {
  201650:	b500      	push	{lr}
  201652:	b083      	sub	sp, #12
  201654:	9001      	str	r0, [sp, #4]

  sdp->vmt = &vmt;
  201656:	9b01      	ldr	r3, [sp, #4]
  201658:	4a06      	ldr	r2, [pc, #24]	; (201674 <sdObjectInit+0x24>)
  20165a:	601a      	str	r2, [r3, #0]
  osalEventObjectInit(&sdp->event);
  20165c:	9b01      	ldr	r3, [sp, #4]
  20165e:	3304      	adds	r3, #4
  201660:	4618      	mov	r0, r3
  201662:	f7ff fee5 	bl	201430 <osalEventObjectInit>
  sdp->state = SD_STOP;
  201666:	9b01      	ldr	r3, [sp, #4]
  201668:	2201      	movs	r2, #1
  20166a:	721a      	strb	r2, [r3, #8]
}
  20166c:	bf00      	nop
  20166e:	b003      	add	sp, #12
  201670:	f85d fb04 	ldr.w	pc, [sp], #4
  201674:	08005ffc 	.word	0x08005ffc
	...

00201680 <sdStart>:
 *                      configuration is used.
 * @return              The operation status.
 *
 * @api
 */
msg_t sdStart(SerialDriver *sdp, const SerialConfig *config) {
  201680:	b500      	push	{lr}
  201682:	b085      	sub	sp, #20
  201684:	9001      	str	r0, [sp, #4]
  201686:	9100      	str	r1, [sp, #0]
  msg_t msg;

  osalDbgCheck(sdp != NULL);
  201688:	9b01      	ldr	r3, [sp, #4]
  20168a:	2b00      	cmp	r3, #0
  20168c:	bf0c      	ite	eq
  20168e:	2301      	moveq	r3, #1
  201690:	2300      	movne	r3, #0
  201692:	b2db      	uxtb	r3, r3
  201694:	2b00      	cmp	r3, #0
  201696:	d002      	beq.n	20169e <sdStart+0x1e>
  201698:	4819      	ldr	r0, [pc, #100]	; (201700 <sdStart+0x80>)
  20169a:	f001 ffd1 	bl	203640 <chSysHalt>

  osalSysLock();
  20169e:	f7ff feb7 	bl	201410 <osalSysLock.lto_priv.4>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
  2016a2:	9b01      	ldr	r3, [sp, #4]
  2016a4:	7a1b      	ldrb	r3, [r3, #8]
  2016a6:	2b01      	cmp	r3, #1
  2016a8:	bf14      	ite	ne
  2016aa:	2301      	movne	r3, #1
  2016ac:	2300      	moveq	r3, #0
  2016ae:	b2db      	uxtb	r3, r3
  2016b0:	2b00      	cmp	r3, #0
  2016b2:	d00b      	beq.n	2016cc <sdStart+0x4c>
  2016b4:	9b01      	ldr	r3, [sp, #4]
  2016b6:	7a1b      	ldrb	r3, [r3, #8]
  2016b8:	2b02      	cmp	r3, #2
  2016ba:	bf14      	ite	ne
  2016bc:	2301      	movne	r3, #1
  2016be:	2300      	moveq	r3, #0
  2016c0:	b2db      	uxtb	r3, r3
  2016c2:	2b00      	cmp	r3, #0
  2016c4:	d002      	beq.n	2016cc <sdStart+0x4c>
  2016c6:	480e      	ldr	r0, [pc, #56]	; (201700 <sdStart+0x80>)
  2016c8:	f001 ffba 	bl	203640 <chSysHalt>
                "invalid state");

#if defined(SD_LLD_ENHANCED_API)
  msg = sd_lld_start(sdp, config);
#else
  sd_lld_start(sdp, config);
  2016cc:	9900      	ldr	r1, [sp, #0]
  2016ce:	9801      	ldr	r0, [sp, #4]
  2016d0:	f001 fd96 	bl	203200 <sd_lld_start>
  msg = HAL_RET_SUCCESS;
  2016d4:	2300      	movs	r3, #0
  2016d6:	9303      	str	r3, [sp, #12]
#endif
  if (msg == HAL_RET_SUCCESS) {
  2016d8:	9b03      	ldr	r3, [sp, #12]
  2016da:	2b00      	cmp	r3, #0
  2016dc:	d103      	bne.n	2016e6 <sdStart+0x66>
    sdp->state = SD_READY;
  2016de:	9b01      	ldr	r3, [sp, #4]
  2016e0:	2202      	movs	r2, #2
  2016e2:	721a      	strb	r2, [r3, #8]
  2016e4:	e002      	b.n	2016ec <sdStart+0x6c>
  }
  else {
    sdp->state = SD_STOP;
  2016e6:	9b01      	ldr	r3, [sp, #4]
  2016e8:	2201      	movs	r2, #1
  2016ea:	721a      	strb	r2, [r3, #8]
  }

  osalSysUnlock();
  2016ec:	f7ff fe98 	bl	201420 <osalSysUnlock.lto_priv.4>

  return msg;
  2016f0:	9b03      	ldr	r3, [sp, #12]
  2016f2:	bf00      	nop
  2016f4:	bf00      	nop
}
  2016f6:	4618      	mov	r0, r3
  2016f8:	b005      	add	sp, #20
  2016fa:	f85d fb04 	ldr.w	pc, [sp], #4
  2016fe:	bf00      	nop
  201700:	0800602c 	.word	0x0800602c
	...

00201710 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
  201710:	b500      	push	{lr}
  201712:	b083      	sub	sp, #12
  201714:	9001      	str	r0, [sp, #4]
  201716:	460b      	mov	r3, r1
  201718:	f88d 3003 	strb.w	r3, [sp, #3]

  osalDbgCheckClassI();
  20171c:	f002 f900 	bl	203920 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
  201720:	9b01      	ldr	r3, [sp, #4]
  201722:	2b00      	cmp	r3, #0
  201724:	bf0c      	ite	eq
  201726:	2301      	moveq	r3, #1
  201728:	2300      	movne	r3, #0
  20172a:	b2db      	uxtb	r3, r3
  20172c:	2b00      	cmp	r3, #0
  20172e:	d002      	beq.n	201736 <sdIncomingDataI+0x26>
  201730:	4811      	ldr	r0, [pc, #68]	; (201778 <sdIncomingDataI+0x68>)
  201732:	f001 ff85 	bl	203640 <chSysHalt>

  if (iqIsEmptyI(&sdp->iqueue))
  201736:	9b01      	ldr	r3, [sp, #4]
  201738:	695b      	ldr	r3, [r3, #20]
  20173a:	2b00      	cmp	r3, #0
  20173c:	d105      	bne.n	20174a <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  20173e:	9b01      	ldr	r3, [sp, #4]
  201740:	3304      	adds	r3, #4
  201742:	2104      	movs	r1, #4
  201744:	4618      	mov	r0, r3
  201746:	f7ff fe83 	bl	201450 <osalEventBroadcastFlagsI.lto_priv.1>
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
  20174a:	9b01      	ldr	r3, [sp, #4]
  20174c:	330c      	adds	r3, #12
  20174e:	f89d 2003 	ldrb.w	r2, [sp, #3]
  201752:	4611      	mov	r1, r2
  201754:	4618      	mov	r0, r3
  201756:	f7ff f9cb 	bl	200af0 <iqPutI>
  20175a:	4603      	mov	r3, r0
  20175c:	2b00      	cmp	r3, #0
  20175e:	da06      	bge.n	20176e <sdIncomingDataI+0x5e>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
  201760:	9b01      	ldr	r3, [sp, #4]
  201762:	3304      	adds	r3, #4
  201764:	f44f 6100 	mov.w	r1, #2048	; 0x800
  201768:	4618      	mov	r0, r3
  20176a:	f7ff fe71 	bl	201450 <osalEventBroadcastFlagsI.lto_priv.1>
}
  20176e:	bf00      	nop
  201770:	b003      	add	sp, #12
  201772:	f85d fb04 	ldr.w	pc, [sp], #4
  201776:	bf00      	nop
  201778:	08006040 	.word	0x08006040
  20177c:	00000000 	.word	0x00000000

00201780 <nvicEnableVector>:
 * @brief   Sets the priority of an interrupt handler and enables it.
 *
 * @param[in] n         the interrupt number
 * @param[in] prio      the interrupt priority
 */
void nvicEnableVector(uint32_t n, uint32_t prio) {
  201780:	b082      	sub	sp, #8
  201782:	9001      	str	r0, [sp, #4]
  201784:	9100      	str	r1, [sp, #0]
#if defined(__CORE_CM0_H_GENERIC) || defined(__CORE_CM0PLUS_H_GENERIC) ||   \
    defined(__CORE_CM23_H_GENERIC)
  NVIC->__IPR[_IP_IDX(n)] = (NVIC->__IPR[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                            (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->__IPR[n] = NVIC_PRIORITY_MASK(prio);
  201786:	9b00      	ldr	r3, [sp, #0]
  201788:	b2db      	uxtb	r3, r3
  20178a:	4a11      	ldr	r2, [pc, #68]	; (2017d0 <nvicEnableVector+0x50>)
  20178c:	011b      	lsls	r3, r3, #4
  20178e:	b2d9      	uxtb	r1, r3
  201790:	9b01      	ldr	r3, [sp, #4]
  201792:	4413      	add	r3, r2
  201794:	f503 7340 	add.w	r3, r3, #768	; 0x300
  201798:	460a      	mov	r2, r1
  20179a:	701a      	strb	r2, [r3, #0]
#endif
  NVIC->__ICPR[n >> 5U] = 1U << (n & 0x1FU);
  20179c:	9b01      	ldr	r3, [sp, #4]
  20179e:	f003 021f 	and.w	r2, r3, #31
  2017a2:	490b      	ldr	r1, [pc, #44]	; (2017d0 <nvicEnableVector+0x50>)
  2017a4:	9b01      	ldr	r3, [sp, #4]
  2017a6:	095b      	lsrs	r3, r3, #5
  2017a8:	2001      	movs	r0, #1
  2017aa:	fa00 f202 	lsl.w	r2, r0, r2
  2017ae:	3360      	adds	r3, #96	; 0x60
  2017b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  NVIC->__ISER[n >> 5U] = 1U << (n & 0x1FU);
  2017b4:	9b01      	ldr	r3, [sp, #4]
  2017b6:	f003 021f 	and.w	r2, r3, #31
  2017ba:	4905      	ldr	r1, [pc, #20]	; (2017d0 <nvicEnableVector+0x50>)
  2017bc:	9b01      	ldr	r3, [sp, #4]
  2017be:	095b      	lsrs	r3, r3, #5
  2017c0:	2001      	movs	r0, #1
  2017c2:	fa00 f202 	lsl.w	r2, r0, r2
  2017c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3)
  /* If the IRQ is enabled from secure mode then it is marked as secure
     interrupt in ITNS.*/
  NVIC->__ITNS[n >> 5U] &= ~(1U << (n & 0x1FU));
#endif
}
  2017ca:	bf00      	nop
  2017cc:	b002      	add	sp, #8
  2017ce:	4770      	bx	lr
  2017d0:	e000e100 	.word	0xe000e100
	...

002017e0 <exti0_irq_init>:

static inline void exti0_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI0_NUMBER, STM32_IRQ_EXTI0_PRIORITY);
#endif
}
  2017e0:	bf00      	nop
  2017e2:	4770      	bx	lr
	...

002017f0 <exti1_irq_init>:

static inline void exti1_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI1_NUMBER, STM32_IRQ_EXTI1_PRIORITY);
#endif
}
  2017f0:	bf00      	nop
  2017f2:	4770      	bx	lr
	...

00201800 <exti2_irq_init>:

static inline void exti2_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI2_NUMBER, STM32_IRQ_EXTI2_PRIORITY);
#endif
}
  201800:	bf00      	nop
  201802:	4770      	bx	lr
	...

00201810 <exti3_irq_init>:

static inline void exti3_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI3_NUMBER, STM32_IRQ_EXTI3_PRIORITY);
#endif
}
  201810:	bf00      	nop
  201812:	4770      	bx	lr
	...

00201820 <exti4_irq_init>:

static inline void exti4_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI4_NUMBER, STM32_IRQ_EXTI4_PRIORITY);
#endif
}
  201820:	bf00      	nop
  201822:	4770      	bx	lr
	...

00201830 <exti5_9_irq_init>:

static inline void exti5_9_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI5_9_NUMBER, STM32_IRQ_EXTI5_9_PRIORITY);
#endif
}
  201830:	bf00      	nop
  201832:	4770      	bx	lr
	...

00201840 <exti10_15_irq_init>:

static inline void exti10_15_irq_init(void) {
#if (HAL_USE_PAL && (PAL_USE_WAIT || PAL_USE_CALLBACKS))
  nvicEnableVector(STM32_EXTI10_15_NUMBER, STM32_IRQ_EXTI10_15_PRIORITY);
#endif
}
  201840:	bf00      	nop
  201842:	4770      	bx	lr
	...

00201850 <exti16_irq_init>:

static inline void exti16_irq_init(void) {
#if defined(STM32_EXTI16_IS_USED)
  nvicEnableVector(STM32_EXTI16_NUMBER, STM32_IRQ_EXTI16_PRIORITY);
#endif
}
  201850:	bf00      	nop
  201852:	4770      	bx	lr
	...

00201860 <exti17_irq_init>:

static inline void exti17_irq_init(void) {
#if defined(STM32_EXTI17_IS_USED)
  nvicEnableVector(STM32_EXTI17_NUMBER, STM32_IRQ_EXTI17_PRIORITY);
#endif
}
  201860:	bf00      	nop
  201862:	4770      	bx	lr
	...

00201870 <exti18_irq_init>:

static inline void exti18_irq_init(void) {
#if defined(STM32_EXTI18_IS_USED)
  nvicEnableVector(STM32_EXTI18_NUMBER, STM32_IRQ_EXTI18_PRIORITY);
#endif
}
  201870:	bf00      	nop
  201872:	4770      	bx	lr
	...

00201880 <exti19_irq_init>:

static inline void exti19_irq_init(void) {
#if defined(STM32_EXTI19_IS_USED)
  nvicEnableVector(STM32_EXTI19_NUMBER, STM32_IRQ_EXTI19_PRIORITY);
#endif
}
  201880:	bf00      	nop
  201882:	4770      	bx	lr
	...

00201890 <exti20_irq_init>:

static inline void exti20_irq_init(void) {
#if defined(STM32_EXTI20_IS_USED)
  nvicEnableVector(STM32_EXTI20_NUMBER, STM32_IRQ_EXTI20_PRIORITY);
#endif
}
  201890:	bf00      	nop
  201892:	4770      	bx	lr
	...

002018a0 <exti21_irq_init>:

static inline void exti21_irq_init(void) {
#if defined(STM32_EXTI21_IS_USED)
  nvicEnableVector(STM32_EXTI21_NUMBER, STM32_IRQ_EXTI21_PRIORITY);
#endif
}
  2018a0:	bf00      	nop
  2018a2:	4770      	bx	lr
	...

002018b0 <exti22_irq_init>:

static inline void exti22_irq_init(void) {
#if defined(STM32_EXTI22_IS_USED)
  nvicEnableVector(STM32_EXTI22_NUMBER, STM32_IRQ_EXTI22_PRIORITY);
#endif
}
  2018b0:	bf00      	nop
  2018b2:	4770      	bx	lr
	...

002018c0 <exti23_irq_init>:

static inline void exti23_irq_init(void) {
#if defined(STM32_EXTI23_IS_USED)
  nvicEnableVector(STM32_EXTI23_NUMBER, STM32_IRQ_EXTI23_PRIORITY);
#endif
}
  2018c0:	bf00      	nop
  2018c2:	4770      	bx	lr
	...

002018d0 <usart1_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void usart1_irq_init(void) {
  2018d0:	b508      	push	{r3, lr}
#if defined(STM32_USART1_IS_USED)
  nvicEnableVector(STM32_USART1_NUMBER, STM32_IRQ_USART1_PRIORITY);
  2018d2:	210c      	movs	r1, #12
  2018d4:	2025      	movs	r0, #37	; 0x25
  2018d6:	f7ff ff53 	bl	201780 <nvicEnableVector>
#endif
}
  2018da:	bf00      	nop
  2018dc:	bd08      	pop	{r3, pc}
  2018de:	bf00      	nop

002018e0 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
  2018e0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  2018e2:	4808      	ldr	r0, [pc, #32]	; (201904 <VectorD4+0x24>)
  2018e4:	f002 f93c 	bl	203b60 <__trace_isr_enter>
  2018e8:	f001 ff9a 	bl	203820 <__dbg_check_enter_isr>

#if HAL_USE_SERIAL
#if STM32_SERIAL_USE_USART1
  sd_lld_serve_interrupt(&SD1);
  2018ec:	4806      	ldr	r0, [pc, #24]	; (201908 <VectorD4+0x28>)
  2018ee:	f001 fcb7 	bl	203260 <sd_lld_serve_interrupt>
#if STM32_UART_USE_USART1
  uart_lld_serve_interrupt(&UARTD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  2018f2:	f001 ffd5 	bl	2038a0 <__dbg_check_leave_isr>
  2018f6:	4803      	ldr	r0, [pc, #12]	; (201904 <VectorD4+0x24>)
  2018f8:	f002 f972 	bl	203be0 <__trace_isr_leave>
  2018fc:	f004 fa00 	bl	205d00 <__port_irq_epilogue>
}
  201900:	bf00      	nop
  201902:	bd08      	pop	{r3, pc}
  201904:	08006050 	.word	0x08006050
  201908:	200008c8 	.word	0x200008c8
  20190c:	00000000 	.word	0x00000000

00201910 <usart2_irq_init>:

static inline void usart2_irq_init(void) {
#if defined(STM32_USART2_IS_USED)
  nvicEnableVector(STM32_USART2_NUMBER, STM32_IRQ_USART2_PRIORITY);
#endif
}
  201910:	bf00      	nop
  201912:	4770      	bx	lr
	...

00201920 <usart3_irq_init>:

static inline void usart3_irq_init(void) {
#if defined(STM32_USART3_IS_USED)
  nvicEnableVector(STM32_USART3_NUMBER, STM32_IRQ_USART3_PRIORITY);
#endif
}
  201920:	bf00      	nop
  201922:	4770      	bx	lr
	...

00201930 <uart4_irq_init>:

static inline void uart4_irq_init(void) {
#if defined(STM32_UART4_IS_USED)
  nvicEnableVector(STM32_UART4_NUMBER, STM32_IRQ_UART4_PRIORITY);
#endif
}
  201930:	bf00      	nop
  201932:	4770      	bx	lr
	...

00201940 <uart5_irq_init>:

static inline void uart5_irq_init(void) {
#if defined(STM32_UART5_IS_USED)
  nvicEnableVector(STM32_UART5_NUMBER, STM32_IRQ_UART5_PRIORITY);
#endif
}
  201940:	bf00      	nop
  201942:	4770      	bx	lr
	...

00201950 <usart6_irq_init>:

static inline void usart6_irq_init(void) {
#if defined(STM32_USART6_IS_USED)
  nvicEnableVector(STM32_USART6_NUMBER, STM32_IRQ_USART6_PRIORITY);
#endif
}
  201950:	bf00      	nop
  201952:	4770      	bx	lr
	...

00201960 <uart7_irq_init>:

static inline void uart7_irq_init(void) {
#if defined(STM32_UART7_IS_USED)
  nvicEnableVector(STM32_UART7_NUMBER, STM32_IRQ_UART7_PRIORITY);
#endif
}
  201960:	bf00      	nop
  201962:	4770      	bx	lr
	...

00201970 <uart8_irq_init>:

static inline void uart8_irq_init(void) {
#if defined(STM32_UART8_IS_USED)
  nvicEnableVector(STM32_UART8_NUMBER, STM32_IRQ_UART8_PRIORITY);
#endif
}
  201970:	bf00      	nop
  201972:	4770      	bx	lr
	...

00201980 <tim1_tim9_tim10_tim11_irq_init>:
#endif
#if defined(STM32_TIM1_IS_USED)
  nvicEnableVector(STM32_TIM1_CC_NUMBER,
                   STM32_IRQ_TIM1_CC_PRIORITY);
#endif
}
  201980:	bf00      	nop
  201982:	4770      	bx	lr
	...

00201990 <tim2_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim2_irq_init(void) {
  201990:	b508      	push	{r3, lr}
#if defined(STM32_TIM2_IS_USED)
  nvicEnableVector(STM32_TIM2_NUMBER, STM32_IRQ_TIM2_PRIORITY);
  201992:	2107      	movs	r1, #7
  201994:	201c      	movs	r0, #28
  201996:	f7ff fef3 	bl	201780 <nvicEnableVector>
#endif
}
  20199a:	bf00      	nop
  20199c:	bd08      	pop	{r3, pc}
  20199e:	bf00      	nop

002019a0 <VectorB0>:
/**
 * @brief   TIM2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
  2019a0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  2019a2:	4808      	ldr	r0, [pc, #32]	; (2019c4 <VectorB0+0x24>)
  2019a4:	f002 f8dc 	bl	203b60 <__trace_isr_enter>
  2019a8:	f001 ff3a 	bl	203820 <__dbg_check_enter_isr>
  pwm_lld_serve_interrupt(&PWMD2);
#endif
#endif
#if 1
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
  2019ac:	f001 f9c0 	bl	202d30 <st_lld_serve_interrupt>
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  2019b0:	f001 ff76 	bl	2038a0 <__dbg_check_leave_isr>
  2019b4:	4803      	ldr	r0, [pc, #12]	; (2019c4 <VectorB0+0x24>)
  2019b6:	f002 f913 	bl	203be0 <__trace_isr_leave>
  2019ba:	f004 f9a1 	bl	205d00 <__port_irq_epilogue>
}
  2019be:	bf00      	nop
  2019c0:	bd08      	pop	{r3, pc}
  2019c2:	bf00      	nop
  2019c4:	0800605c 	.word	0x0800605c
	...

002019d0 <tim3_irq_init>:

static inline void tim3_irq_init(void) {
#if defined(STM32_TIM3_IS_USED)
  nvicEnableVector(STM32_TIM3_NUMBER, STM32_IRQ_TIM3_PRIORITY);
#endif
}
  2019d0:	bf00      	nop
  2019d2:	4770      	bx	lr
	...

002019e0 <tim4_irq_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static inline void tim4_irq_init(void) {
  2019e0:	b508      	push	{r3, lr}
#if defined(STM32_TIM4_IS_USED)
  nvicEnableVector(STM32_TIM4_NUMBER, STM32_IRQ_TIM4_PRIORITY);
  2019e2:	2107      	movs	r1, #7
  2019e4:	201e      	movs	r0, #30
  2019e6:	f7ff fecb 	bl	201780 <nvicEnableVector>
#endif
}
  2019ea:	bf00      	nop
  2019ec:	bd08      	pop	{r3, pc}
  2019ee:	bf00      	nop

002019f0 <VectorB8>:
/**
 * @brief   TIM4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM4_HANDLER) {
  2019f0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
  2019f2:	4808      	ldr	r0, [pc, #32]	; (201a14 <VectorB8+0x24>)
  2019f4:	f002 f8b4 	bl	203b60 <__trace_isr_enter>
  2019f8:	f001 ff12 	bl	203820 <__dbg_check_enter_isr>

#if HAL_USE_GPT
#if STM32_GPT_USE_TIM4
  gpt_lld_serve_interrupt(&GPTD4);
  2019fc:	4806      	ldr	r0, [pc, #24]	; (201a18 <VectorB8+0x28>)
  2019fe:	f001 fa97 	bl	202f30 <gpt_lld_serve_interrupt>
#if STM32_ST_USE_TIM4
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
  201a02:	f001 ff4d 	bl	2038a0 <__dbg_check_leave_isr>
  201a06:	4803      	ldr	r0, [pc, #12]	; (201a14 <VectorB8+0x24>)
  201a08:	f002 f8ea 	bl	203be0 <__trace_isr_leave>
  201a0c:	f004 f978 	bl	205d00 <__port_irq_epilogue>
}
  201a10:	bf00      	nop
  201a12:	bd08      	pop	{r3, pc}
  201a14:	08006068 	.word	0x08006068
  201a18:	200008b8 	.word	0x200008b8
  201a1c:	00000000 	.word	0x00000000

00201a20 <tim5_irq_init>:

static inline void tim5_irq_init(void) {
#if defined(STM32_TIM5_IS_USED)
  nvicEnableVector(STM32_TIM5_NUMBER, STM32_IRQ_TIM5_PRIORITY);
#endif
}
  201a20:	bf00      	nop
  201a22:	4770      	bx	lr
	...

00201a30 <tim6_irq_init>:

static inline void tim6_irq_init(void) {
#if defined(STM32_TIM6_IS_USED)
  nvicEnableVector(STM32_TIM6_NUMBER, STM32_IRQ_TIM6_PRIORITY);
#endif
}
  201a30:	bf00      	nop
  201a32:	4770      	bx	lr
	...

00201a40 <tim7_irq_init>:

static inline void tim7_irq_init(void) {
#if defined(STM32_TIM7_IS_USED)
  nvicEnableVector(STM32_TIM7_NUMBER, STM32_IRQ_TIM7_PRIORITY);
#endif
}
  201a40:	bf00      	nop
  201a42:	4770      	bx	lr
	...

00201a50 <tim8_tim12_tim13_tim14_irq_init>:
#endif
#if defined(STM32_TIM8_IS_USED)
  nvicEnableVector(STM32_TIM8_CC_NUMBER,
                   STM32_IRQ_TIM8_CC_PRIORITY);
#endif
}
  201a50:	bf00      	nop
  201a52:	4770      	bx	lr
	...

00201a60 <irqInit>:
/**
 * @brief   Enables IRQ sources.
 *
 * @notapi
 */
void irqInit(void) {
  201a60:	b508      	push	{r3, lr}

  exti0_irq_init();
  201a62:	f7ff febd 	bl	2017e0 <exti0_irq_init>
  exti1_irq_init();
  201a66:	f7ff fec3 	bl	2017f0 <exti1_irq_init>
  exti2_irq_init();
  201a6a:	f7ff fec9 	bl	201800 <exti2_irq_init>
  exti3_irq_init();
  201a6e:	f7ff fecf 	bl	201810 <exti3_irq_init>
  exti4_irq_init();
  201a72:	f7ff fed5 	bl	201820 <exti4_irq_init>
  exti5_9_irq_init();
  201a76:	f7ff fedb 	bl	201830 <exti5_9_irq_init>
  exti10_15_irq_init();
  201a7a:	f7ff fee1 	bl	201840 <exti10_15_irq_init>
  exti16_irq_init();
  201a7e:	f7ff fee7 	bl	201850 <exti16_irq_init>
  exti17_irq_init();
  201a82:	f7ff feed 	bl	201860 <exti17_irq_init>
  exti18_irq_init();
  201a86:	f7ff fef3 	bl	201870 <exti18_irq_init>
  exti19_irq_init();
  201a8a:	f7ff fef9 	bl	201880 <exti19_irq_init>
  exti20_irq_init();
  201a8e:	f7ff feff 	bl	201890 <exti20_irq_init>
  exti21_irq_init();
  201a92:	f7ff ff05 	bl	2018a0 <exti21_irq_init>
  exti22_irq_init();
  201a96:	f7ff ff0b 	bl	2018b0 <exti22_irq_init>
  exti23_irq_init();
  201a9a:	f7ff ff11 	bl	2018c0 <exti23_irq_init>

  tim1_tim9_tim10_tim11_irq_init();
  201a9e:	f7ff ff6f 	bl	201980 <tim1_tim9_tim10_tim11_irq_init>
  tim2_irq_init();
  201aa2:	f7ff ff75 	bl	201990 <tim2_irq_init>
  tim3_irq_init();
  201aa6:	f7ff ff93 	bl	2019d0 <tim3_irq_init>
  tim4_irq_init();
  201aaa:	f7ff ff99 	bl	2019e0 <tim4_irq_init>
  tim5_irq_init();
  201aae:	f7ff ffb7 	bl	201a20 <tim5_irq_init>
  tim6_irq_init();
  201ab2:	f7ff ffbd 	bl	201a30 <tim6_irq_init>
  tim7_irq_init();
  201ab6:	f7ff ffc3 	bl	201a40 <tim7_irq_init>
  tim8_tim12_tim13_tim14_irq_init();
  201aba:	f7ff ffc9 	bl	201a50 <tim8_tim12_tim13_tim14_irq_init>

  usart1_irq_init();
  201abe:	f7ff ff07 	bl	2018d0 <usart1_irq_init>
  usart2_irq_init();
  201ac2:	f7ff ff25 	bl	201910 <usart2_irq_init>
  usart3_irq_init();
  201ac6:	f7ff ff2b 	bl	201920 <usart3_irq_init>
  uart4_irq_init();
  201aca:	f7ff ff31 	bl	201930 <uart4_irq_init>
  uart5_irq_init();
  201ace:	f7ff ff37 	bl	201940 <uart5_irq_init>
  usart6_irq_init();
  201ad2:	f7ff ff3d 	bl	201950 <usart6_irq_init>
  uart7_irq_init();
  201ad6:	f7ff ff43 	bl	201960 <uart7_irq_init>
  uart8_irq_init();
  201ada:	f7ff ff49 	bl	201970 <uart8_irq_init>
}
  201ade:	bf00      	nop
  201ae0:	bd08      	pop	{r3, pc}
  201ae2:	bf00      	nop
	...

00201af0 <hal_lld_backup_domain_init>:
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR1 |= PWR_CR1_DBP;
  201af0:	4b14      	ldr	r3, [pc, #80]	; (201b44 <hal_lld_backup_domain_init+0x54>)
  201af2:	681b      	ldr	r3, [r3, #0]
  201af4:	4a13      	ldr	r2, [pc, #76]	; (201b44 <hal_lld_backup_domain_init+0x54>)
  201af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  201afa:	6013      	str	r3, [r2, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
  201afc:	4b12      	ldr	r3, [pc, #72]	; (201b48 <hal_lld_backup_domain_init+0x58>)
  201afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  201b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
  201b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
  201b08:	d006      	beq.n	201b18 <hal_lld_backup_domain_init+0x28>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
  201b0a:	4b0f      	ldr	r3, [pc, #60]	; (201b48 <hal_lld_backup_domain_init+0x58>)
  201b0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  201b10:	671a      	str	r2, [r3, #112]	; 0x70
    RCC->BDCR = 0;
  201b12:	4b0d      	ldr	r3, [pc, #52]	; (201b48 <hal_lld_backup_domain_init+0x58>)
  201b14:	2200      	movs	r2, #0
  201b16:	671a      	str	r2, [r3, #112]	; 0x70
#if defined(STM32_LSE_BYPASS)
  /* LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON | RCC_BDCR_LSEBYP;
#else
  /* No LSE Bypass.*/
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
  201b18:	4b0b      	ldr	r3, [pc, #44]	; (201b48 <hal_lld_backup_domain_init+0x58>)
  201b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  201b1c:	4a0a      	ldr	r2, [pc, #40]	; (201b48 <hal_lld_backup_domain_init+0x58>)
  201b1e:	f043 0319 	orr.w	r3, r3, #25
  201b22:	6713      	str	r3, [r2, #112]	; 0x70
#endif
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
  201b24:	bf00      	nop
  201b26:	4b08      	ldr	r3, [pc, #32]	; (201b48 <hal_lld_backup_domain_init+0x58>)
  201b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  201b2a:	f003 0302 	and.w	r3, r3, #2
  201b2e:	2b00      	cmp	r3, #0
  201b30:	d0f9      	beq.n	201b26 <hal_lld_backup_domain_init+0x36>

  PWR->CSR1 |= PWR_CSR1_BRE;
  while ((PWR->CSR1 & PWR_CSR1_BRR) == 0)
    ;                                /* Waits until the regulator is stable */
#else
  PWR->CSR1 &= ~PWR_CSR1_BRE;
  201b32:	4b04      	ldr	r3, [pc, #16]	; (201b44 <hal_lld_backup_domain_init+0x54>)
  201b34:	685b      	ldr	r3, [r3, #4]
  201b36:	4a03      	ldr	r2, [pc, #12]	; (201b44 <hal_lld_backup_domain_init+0x54>)
  201b38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  201b3c:	6053      	str	r3, [r2, #4]
#endif /* STM32_BKPRAM_ENABLE */
}
  201b3e:	bf00      	nop
  201b40:	4770      	bx	lr
  201b42:	bf00      	nop
  201b44:	40007000 	.word	0x40007000
  201b48:	40023800 	.word	0x40023800
  201b4c:	00000000 	.word	0x00000000

00201b50 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
  201b50:	b508      	push	{r3, lr}

  /* Reset of all peripherals. AHB3 is not reseted because it could have
     been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~STM32_GPIO_EN_MASK);
  201b52:	4b1f      	ldr	r3, [pc, #124]	; (201bd0 <hal_lld_init+0x80>)
  201b54:	691a      	ldr	r2, [r3, #16]
  201b56:	491e      	ldr	r1, [pc, #120]	; (201bd0 <hal_lld_init+0x80>)
  201b58:	4b1e      	ldr	r3, [pc, #120]	; (201bd4 <hal_lld_init+0x84>)
  201b5a:	4313      	orrs	r3, r2
  201b5c:	610b      	str	r3, [r1, #16]
  201b5e:	4b1c      	ldr	r3, [pc, #112]	; (201bd0 <hal_lld_init+0x80>)
  201b60:	691b      	ldr	r3, [r3, #16]
  201b62:	4a1b      	ldr	r2, [pc, #108]	; (201bd0 <hal_lld_init+0x80>)
  201b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
  201b68:	6113      	str	r3, [r2, #16]
  201b6a:	4b19      	ldr	r3, [pc, #100]	; (201bd0 <hal_lld_init+0x80>)
  201b6c:	691b      	ldr	r3, [r3, #16]
  rccResetAHB2(~0);
  201b6e:	4b18      	ldr	r3, [pc, #96]	; (201bd0 <hal_lld_init+0x80>)
  201b70:	695b      	ldr	r3, [r3, #20]
  201b72:	4b17      	ldr	r3, [pc, #92]	; (201bd0 <hal_lld_init+0x80>)
  201b74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  201b78:	615a      	str	r2, [r3, #20]
  201b7a:	4b15      	ldr	r3, [pc, #84]	; (201bd0 <hal_lld_init+0x80>)
  201b7c:	695b      	ldr	r3, [r3, #20]
  201b7e:	4b14      	ldr	r3, [pc, #80]	; (201bd0 <hal_lld_init+0x80>)
  201b80:	2200      	movs	r2, #0
  201b82:	615a      	str	r2, [r3, #20]
  201b84:	4b12      	ldr	r3, [pc, #72]	; (201bd0 <hal_lld_init+0x80>)
  201b86:	695b      	ldr	r3, [r3, #20]
  rccResetAPB1(~RCC_APB1RSTR_PWRRST);
  201b88:	4b11      	ldr	r3, [pc, #68]	; (201bd0 <hal_lld_init+0x80>)
  201b8a:	6a1b      	ldr	r3, [r3, #32]
  201b8c:	4a10      	ldr	r2, [pc, #64]	; (201bd0 <hal_lld_init+0x80>)
  201b8e:	f063 5380 	orn	r3, r3, #268435456	; 0x10000000
  201b92:	6213      	str	r3, [r2, #32]
  201b94:	4b0e      	ldr	r3, [pc, #56]	; (201bd0 <hal_lld_init+0x80>)
  201b96:	6a1b      	ldr	r3, [r3, #32]
  201b98:	4a0d      	ldr	r2, [pc, #52]	; (201bd0 <hal_lld_init+0x80>)
  201b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  201b9e:	6213      	str	r3, [r2, #32]
  201ba0:	4b0b      	ldr	r3, [pc, #44]	; (201bd0 <hal_lld_init+0x80>)
  201ba2:	6a1b      	ldr	r3, [r3, #32]
  rccResetAPB2(~0);
  201ba4:	4b0a      	ldr	r3, [pc, #40]	; (201bd0 <hal_lld_init+0x80>)
  201ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201ba8:	4b09      	ldr	r3, [pc, #36]	; (201bd0 <hal_lld_init+0x80>)
  201baa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  201bae:	625a      	str	r2, [r3, #36]	; 0x24
  201bb0:	4b07      	ldr	r3, [pc, #28]	; (201bd0 <hal_lld_init+0x80>)
  201bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  201bb4:	4b06      	ldr	r3, [pc, #24]	; (201bd0 <hal_lld_init+0x80>)
  201bb6:	2200      	movs	r2, #0
  201bb8:	625a      	str	r2, [r3, #36]	; 0x24
  201bba:	4b05      	ldr	r3, [pc, #20]	; (201bd0 <hal_lld_init+0x80>)
  201bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  /* Initializes the backup domain.*/
  hal_lld_backup_domain_init();
  201bbe:	f7ff ff97 	bl	201af0 <hal_lld_backup_domain_init>

  /* DMA subsystems initialization.*/
#if defined(STM32_DMA_REQUIRED)
  dmaInit();
  201bc2:	f000 fe95 	bl	2028f0 <dmaInit>
#endif

  /* IRQ subsystem initialization.*/
  irqInit();
  201bc6:	f7ff ff4b 	bl	201a60 <irqInit>

  /* Programmable voltage detector enable.*/
#if STM32_PVD_ENABLE
  PWR->CR1 |= PWR_CR1_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */
}
  201bca:	bf00      	nop
  201bcc:	bd08      	pop	{r3, pc}
  201bce:	bf00      	nop
  201bd0:	40023800 	.word	0x40023800
  201bd4:	fffff800 	.word	0xfffff800
	...

00201be0 <stm32_clock_init>:
 * @note    All the involved constants come from the file @p board.h.
 * @note    This function should be invoked just after the system reset.
 *
 * @special
 */
void stm32_clock_init(void) {
  201be0:	b082      	sub	sp, #8
#if !STM32_NO_INIT
  /* PWR clock enabled.*/
#if defined(HAL_USE_RTC) && defined(RCC_APB1ENR_RTCEN)
  RCC->APB1ENR = RCC_APB1ENR_PWREN | RCC_APB1ENR_RTCEN;
#else
  RCC->APB1ENR = RCC_APB1ENR_PWREN;
  201be2:	4b50      	ldr	r3, [pc, #320]	; (201d24 <stm32_clock_init+0x144>)
  201be4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  201be8:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* PWR initialization.*/
  PWR->CR1 = STM32_VOS;
  201bea:	4b4f      	ldr	r3, [pc, #316]	; (201d28 <stm32_clock_init+0x148>)
  201bec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  201bf0:	601a      	str	r2, [r3, #0]

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
  201bf2:	4b4c      	ldr	r3, [pc, #304]	; (201d24 <stm32_clock_init+0x144>)
  201bf4:	681b      	ldr	r3, [r3, #0]
  201bf6:	4a4b      	ldr	r2, [pc, #300]	; (201d24 <stm32_clock_init+0x144>)
  201bf8:	f043 0301 	orr.w	r3, r3, #1
  201bfc:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
  201bfe:	bf00      	nop
  201c00:	4b48      	ldr	r3, [pc, #288]	; (201d24 <stm32_clock_init+0x144>)
  201c02:	681b      	ldr	r3, [r3, #0]
  201c04:	f003 0302 	and.w	r3, r3, #2
  201c08:	2b00      	cmp	r3, #0
  201c0a:	d0f9      	beq.n	201c00 <stm32_clock_init+0x20>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
  201c0c:	4b45      	ldr	r3, [pc, #276]	; (201d24 <stm32_clock_init+0x144>)
  201c0e:	689b      	ldr	r3, [r3, #8]
  201c10:	4a44      	ldr	r2, [pc, #272]	; (201d24 <stm32_clock_init+0x144>)
  201c12:	f023 0303 	bic.w	r3, r3, #3
  201c16:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
  201c18:	bf00      	nop
  201c1a:	4b42      	ldr	r3, [pc, #264]	; (201d24 <stm32_clock_init+0x144>)
  201c1c:	689b      	ldr	r3, [r3, #8]
  201c1e:	f003 030c 	and.w	r3, r3, #12
  201c22:	2b00      	cmp	r3, #0
  201c24:	d1f9      	bne.n	201c1a <stm32_clock_init+0x3a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  201c26:	4b3f      	ldr	r3, [pc, #252]	; (201d24 <stm32_clock_init+0x144>)
  201c28:	681b      	ldr	r3, [r3, #0]
  201c2a:	4a3e      	ldr	r2, [pc, #248]	; (201d24 <stm32_clock_init+0x144>)
  201c2c:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
  201c30:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
  201c32:	4b3c      	ldr	r3, [pc, #240]	; (201d24 <stm32_clock_init+0x144>)
  201c34:	2200      	movs	r2, #0
  201c36:	609a      	str	r2, [r3, #8]

#if STM32_HSE_ENABLED
  /* HSE activation.*/
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
  201c38:	4b3a      	ldr	r3, [pc, #232]	; (201d24 <stm32_clock_init+0x144>)
  201c3a:	681b      	ldr	r3, [r3, #0]
  201c3c:	4a39      	ldr	r2, [pc, #228]	; (201d24 <stm32_clock_init+0x144>)
  201c3e:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
  201c42:	6013      	str	r3, [r2, #0]
#else
  /* No HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
  201c44:	bf00      	nop
  201c46:	4b37      	ldr	r3, [pc, #220]	; (201d24 <stm32_clock_init+0x144>)
  201c48:	681b      	ldr	r3, [r3, #0]
  201c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  201c4e:	2b00      	cmp	r3, #0
  201c50:	d0f9      	beq.n	201c46 <stm32_clock_init+0x66>
    ;                           /* Waits until LSI is stable.               */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->PLLCFGR = STM32_PLLQ | STM32_PLLSRC | STM32_PLLP | STM32_PLLN |
  201c52:	4b34      	ldr	r3, [pc, #208]	; (201d24 <stm32_clock_init+0x144>)
  201c54:	4a35      	ldr	r2, [pc, #212]	; (201d2c <stm32_clock_init+0x14c>)
  201c56:	605a      	str	r2, [r3, #4]
                 STM32_PLLM;
  RCC->CR |= RCC_CR_PLLON;
  201c58:	4b32      	ldr	r3, [pc, #200]	; (201d24 <stm32_clock_init+0x144>)
  201c5a:	681b      	ldr	r3, [r3, #0]
  201c5c:	4a31      	ldr	r2, [pc, #196]	; (201d24 <stm32_clock_init+0x144>)
  201c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  201c62:	6013      	str	r3, [r2, #0]

  /* Synchronization with voltage regulator stabilization.*/
  while ((PWR->CSR1 & PWR_CSR1_VOSRDY) == 0)
  201c64:	bf00      	nop
  201c66:	4b30      	ldr	r3, [pc, #192]	; (201d28 <stm32_clock_init+0x148>)
  201c68:	685b      	ldr	r3, [r3, #4]
  201c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  201c6e:	2b00      	cmp	r3, #0
  201c70:	d0f9      	beq.n	201c66 <stm32_clock_init+0x86>
    ;                           /* Waits until power regulator is stable.   */

#if STM32_OVERDRIVE_REQUIRED
  /* Overdrive activation performed after activating the PLL in order to save
     time as recommended in RM in "Entering Over-drive mode" paragraph.*/
  PWR->CR1 |= PWR_CR1_ODEN;
  201c72:	4b2d      	ldr	r3, [pc, #180]	; (201d28 <stm32_clock_init+0x148>)
  201c74:	681b      	ldr	r3, [r3, #0]
  201c76:	4a2c      	ldr	r2, [pc, #176]	; (201d28 <stm32_clock_init+0x148>)
  201c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  201c7c:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODRDY))
  201c7e:	bf00      	nop
  201c80:	4b29      	ldr	r3, [pc, #164]	; (201d28 <stm32_clock_init+0x148>)
  201c82:	685b      	ldr	r3, [r3, #4]
  201c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
  201c88:	2b00      	cmp	r3, #0
  201c8a:	d0f9      	beq.n	201c80 <stm32_clock_init+0xa0>
      ;
  PWR->CR1 |= PWR_CR1_ODSWEN;
  201c8c:	4b26      	ldr	r3, [pc, #152]	; (201d28 <stm32_clock_init+0x148>)
  201c8e:	681b      	ldr	r3, [r3, #0]
  201c90:	4a25      	ldr	r2, [pc, #148]	; (201d28 <stm32_clock_init+0x148>)
  201c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  201c96:	6013      	str	r3, [r2, #0]
  while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY))
  201c98:	bf00      	nop
  201c9a:	4b23      	ldr	r3, [pc, #140]	; (201d28 <stm32_clock_init+0x148>)
  201c9c:	685b      	ldr	r3, [r3, #4]
  201c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  201ca2:	2b00      	cmp	r3, #0
  201ca4:	d0f9      	beq.n	201c9a <stm32_clock_init+0xba>
      ;
#endif /* STM32_OVERDRIVE_REQUIRED */

  /* Waiting for PLL lock.*/
  while (!(RCC->CR & RCC_CR_PLLRDY))
  201ca6:	bf00      	nop
  201ca8:	4b1e      	ldr	r3, [pc, #120]	; (201d24 <stm32_clock_init+0x144>)
  201caa:	681b      	ldr	r3, [r3, #0]
  201cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
  201cb0:	2b00      	cmp	r3, #0
  201cb2:	d0f9      	beq.n	201ca8 <stm32_clock_init+0xc8>
  while (!(RCC->CR & RCC_CR_PLLSAIRDY))
    ;
#endif

  /* Other clock-related settings (dividers, MCO etc).*/
  RCC->CFGR = STM32_MCO2SEL | STM32_MCO2PRE | STM32_MCO1PRE | STM32_I2SSRC |
  201cb4:	4b1b      	ldr	r3, [pc, #108]	; (201d24 <stm32_clock_init+0x144>)
  201cb6:	4a1e      	ldr	r2, [pc, #120]	; (201d30 <stm32_clock_init+0x150>)
  201cb8:	609a      	str	r2, [r3, #8]
              STM32_HPRE;

  /* DCKCFGR1 register initialization, note, must take care of the _OFF
     pseudo settings.*/
  {
    uint32_t dckcfgr1 = STM32_PLLI2SDIVQ | STM32_PLLSAIDIVQ | STM32_PLLSAIDIVR;
  201cba:	f240 1301 	movw	r3, #257	; 0x101
  201cbe:	9301      	str	r3, [sp, #4]
    dckcfgr1 |= STM32_SAI1SEL;
#endif
#if STM32_TIMPRE_ENABLE == TRUE
    dckcfgr1 |= RCC_DCKCFGR1_TIMPRE;
#endif
    RCC->DCKCFGR1 = dckcfgr1;
  201cc0:	4a18      	ldr	r2, [pc, #96]	; (201d24 <stm32_clock_init+0x144>)
  201cc2:	9b01      	ldr	r3, [sp, #4]
  201cc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }

  /* Peripheral clock sources.*/
  RCC->DCKCFGR2 = STM32_SDMMC2SEL | STM32_SDMMC1SEL | STM32_CK48MSEL  |
  201cc8:	4b16      	ldr	r3, [pc, #88]	; (201d24 <stm32_clock_init+0x144>)
  201cca:	2200      	movs	r2, #0
  201ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                  STM32_UART8SEL  | STM32_UART7SEL  | STM32_USART6SEL |
                  STM32_UART5SEL  | STM32_UART4SEL  | STM32_USART3SEL |
                  STM32_USART2SEL | STM32_USART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_ARTEN | FLASH_ACR_PRFTEN | STM32_FLASHBITS;
  201cd0:	4b18      	ldr	r3, [pc, #96]	; (201d34 <stm32_clock_init+0x154>)
  201cd2:	f240 3207 	movw	r2, #775	; 0x307
  201cd6:	601a      	str	r2, [r3, #0]
  while ((FLASH->ACR & FLASH_ACR_LATENCY_Msk) !=
  201cd8:	bf00      	nop
  201cda:	4b16      	ldr	r3, [pc, #88]	; (201d34 <stm32_clock_init+0x154>)
  201cdc:	681b      	ldr	r3, [r3, #0]
  201cde:	f003 030f 	and.w	r3, r3, #15
  201ce2:	2b07      	cmp	r3, #7
  201ce4:	d1f9      	bne.n	201cda <stm32_clock_init+0xfa>
         (STM32_FLASHBITS & FLASH_ACR_LATENCY_Msk)) {
  }

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
  201ce6:	4b0f      	ldr	r3, [pc, #60]	; (201d24 <stm32_clock_init+0x144>)
  201ce8:	689b      	ldr	r3, [r3, #8]
  201cea:	4a0e      	ldr	r2, [pc, #56]	; (201d24 <stm32_clock_init+0x144>)
  201cec:	f043 0302 	orr.w	r3, r3, #2
  201cf0:	6093      	str	r3, [r2, #8]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
  201cf2:	bf00      	nop
  201cf4:	4b0b      	ldr	r3, [pc, #44]	; (201d24 <stm32_clock_init+0x144>)
  201cf6:	689b      	ldr	r3, [r3, #8]
  201cf8:	f003 030c 	and.w	r3, r3, #12
  201cfc:	2b08      	cmp	r3, #8
  201cfe:	d1f9      	bne.n	201cf4 <stm32_clock_init+0x114>
#endif
#endif /* STM32_NO_INIT */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
  201d00:	4b08      	ldr	r3, [pc, #32]	; (201d24 <stm32_clock_init+0x144>)
  201d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  201d04:	4a07      	ldr	r2, [pc, #28]	; (201d24 <stm32_clock_init+0x144>)
  201d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201d0a:	6453      	str	r3, [r2, #68]	; 0x44
  201d0c:	4b05      	ldr	r3, [pc, #20]	; (201d24 <stm32_clock_init+0x144>)
  201d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  201d10:	4a04      	ldr	r2, [pc, #16]	; (201d24 <stm32_clock_init+0x144>)
  201d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  201d16:	6653      	str	r3, [r2, #100]	; 0x64
  201d18:	4b02      	ldr	r3, [pc, #8]	; (201d24 <stm32_clock_init+0x144>)
  201d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
  201d1c:	bf00      	nop
  201d1e:	b002      	add	sp, #8
  201d20:	4770      	bx	lr
  201d22:	bf00      	nop
  201d24:	40023800 	.word	0x40023800
  201d28:	40007000 	.word	0x40007000
  201d2c:	09406c19 	.word	0x09406c19
  201d30:	30999400 	.word	0x30999400
  201d34:	40023c00 	.word	0x40023c00
	...

00201d40 <chSysLockFromISR.lto_priv.0>:
 *          not be limited to disabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysLockFromISR(void) {
  201d40:	b500      	push	{lr}
  201d42:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  201d44:	b672      	cpsid	i
}
  201d46:	bf00      	nop
  201d48:	2330      	movs	r3, #48	; 0x30
  201d4a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  201d4c:	9b01      	ldr	r3, [sp, #4]
  201d4e:	f383 8811 	msr	BASEPRI, r3
}
  201d52:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  201d54:	b662      	cpsie	i
}
  201d56:	bf00      	nop
}
  201d58:	bf00      	nop
 * @note    Same as @p port_lock() in this port.
 */
__STATIC_FORCEINLINE void port_lock_from_isr(void) {

  port_lock();
}
  201d5a:	bf00      	nop

  port_lock_from_isr();
  __stats_start_measure_crit_isr();
  __dbg_check_lock_from_isr();
  201d5c:	f001 fd10 	bl	203780 <__dbg_check_lock_from_isr>
}
  201d60:	bf00      	nop
  201d62:	b003      	add	sp, #12
  201d64:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201d70 <chSysUnlockFromISR.lto_priv.0>:
 *          not be limited to enabling interrupts.
 * @note    This API must be invoked exclusively from interrupt handlers.
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {
  201d70:	b500      	push	{lr}
  201d72:	b083      	sub	sp, #12

  __dbg_check_unlock_from_isr();
  201d74:	f001 fd2c 	bl	2037d0 <__dbg_check_unlock_from_isr>
  201d78:	2300      	movs	r3, #0
  201d7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  201d7c:	9b01      	ldr	r3, [sp, #4]
  201d7e:	f383 8811 	msr	BASEPRI, r3
}
  201d82:	bf00      	nop
}
  201d84:	bf00      	nop
 * @note    Same as @p port_unlock() in this port.
 */
__STATIC_FORCEINLINE void port_unlock_from_isr(void) {

  port_unlock();
}
  201d86:	bf00      	nop
  __stats_stop_measure_crit_isr();
  port_unlock_from_isr();
}
  201d88:	bf00      	nop
  201d8a:	b003      	add	sp, #12
  201d8c:	f85d fb04 	ldr.w	pc, [sp], #4

00201d90 <osalSysLockFromISR.lto_priv.0>:
static inline void osalSysLockFromISR(void) {
  201d90:	b508      	push	{r3, lr}
  chSysLockFromISR();
  201d92:	f7ff ffd5 	bl	201d40 <chSysLockFromISR.lto_priv.0>
}
  201d96:	bf00      	nop
  201d98:	bd08      	pop	{r3, pc}
  201d9a:	bf00      	nop
  201d9c:	0000      	movs	r0, r0
	...

00201da0 <osalSysUnlockFromISR.lto_priv.0>:
static inline void osalSysUnlockFromISR(void) {
  201da0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  201da2:	f7ff ffe5 	bl	201d70 <chSysUnlockFromISR.lto_priv.0>
}
  201da6:	bf00      	nop
  201da8:	bd08      	pop	{r3, pc}
  201daa:	bf00      	nop
  201dac:	0000      	movs	r0, r0
	...

00201db0 <osalThreadResumeI.lto_priv.1>:
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
  201db0:	b500      	push	{lr}
  201db2:	b083      	sub	sp, #12
  201db4:	9001      	str	r0, [sp, #4]
  201db6:	9100      	str	r1, [sp, #0]
  chThdResumeI(trp, msg);
  201db8:	9900      	ldr	r1, [sp, #0]
  201dba:	9801      	ldr	r0, [sp, #4]
  201dbc:	f003 fad0 	bl	205360 <chThdResumeI>
}
  201dc0:	bf00      	nop
  201dc2:	b003      	add	sp, #12
  201dc4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201dd0 <adc_lld_serve_rx_interrupt>:
 * @brief   ADC DMA service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_rx_interrupt(ADCDriver *adcp, uint32_t flags) {
  201dd0:	b500      	push	{lr}
  201dd2:	b083      	sub	sp, #12
  201dd4:	9001      	str	r0, [sp, #4]
  201dd6:	9100      	str	r1, [sp, #0]

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
  201dd8:	9b00      	ldr	r3, [sp, #0]
  201dda:	f003 030c 	and.w	r3, r3, #12
  201dde:	2b00      	cmp	r3, #0
  201de0:	d02d      	beq.n	201e3e <adc_lld_serve_rx_interrupt+0x6e>
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  201de2:	9801      	ldr	r0, [sp, #4]
  201de4:	f000 fa3c 	bl	202260 <adc_lld_stop_conversion>
  201de8:	9b01      	ldr	r3, [sp, #4]
  201dea:	691b      	ldr	r3, [r3, #16]
  201dec:	689b      	ldr	r3, [r3, #8]
  201dee:	2b00      	cmp	r3, #0
  201df0:	d013      	beq.n	201e1a <adc_lld_serve_rx_interrupt+0x4a>
  201df2:	9b01      	ldr	r3, [sp, #4]
  201df4:	2205      	movs	r2, #5
  201df6:	701a      	strb	r2, [r3, #0]
  201df8:	9b01      	ldr	r3, [sp, #4]
  201dfa:	691b      	ldr	r3, [r3, #16]
  201dfc:	689b      	ldr	r3, [r3, #8]
  201dfe:	2101      	movs	r1, #1
  201e00:	9801      	ldr	r0, [sp, #4]
  201e02:	4798      	blx	r3
  201e04:	9b01      	ldr	r3, [sp, #4]
  201e06:	781b      	ldrb	r3, [r3, #0]
  201e08:	2b05      	cmp	r3, #5
  201e0a:	d10c      	bne.n	201e26 <adc_lld_serve_rx_interrupt+0x56>
  201e0c:	9b01      	ldr	r3, [sp, #4]
  201e0e:	2202      	movs	r2, #2
  201e10:	701a      	strb	r2, [r3, #0]
  201e12:	9b01      	ldr	r3, [sp, #4]
  201e14:	2200      	movs	r2, #0
  201e16:	611a      	str	r2, [r3, #16]
  201e18:	e005      	b.n	201e26 <adc_lld_serve_rx_interrupt+0x56>
  201e1a:	9b01      	ldr	r3, [sp, #4]
  201e1c:	2202      	movs	r2, #2
  201e1e:	701a      	strb	r2, [r3, #0]
  201e20:	9b01      	ldr	r3, [sp, #4]
  201e22:	2200      	movs	r2, #0
  201e24:	611a      	str	r2, [r3, #16]
  201e26:	f7ff ffb3 	bl	201d90 <osalSysLockFromISR.lto_priv.0>
  201e2a:	9b01      	ldr	r3, [sp, #4]
  201e2c:	3314      	adds	r3, #20
  201e2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  201e32:	4618      	mov	r0, r3
  201e34:	f7ff ffbc 	bl	201db0 <osalThreadResumeI.lto_priv.1>
  201e38:	f7ff ffb2 	bl	201da0 <osalSysUnlockFromISR.lto_priv.0>
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
  201e3c:	e05d      	b.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
    if (adcp->grpp != NULL) {
  201e3e:	9b01      	ldr	r3, [sp, #4]
  201e40:	691b      	ldr	r3, [r3, #16]
  201e42:	2b00      	cmp	r3, #0
  201e44:	d059      	beq.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
  201e46:	9b00      	ldr	r3, [sp, #0]
  201e48:	f003 0320 	and.w	r3, r3, #32
  201e4c:	2b00      	cmp	r3, #0
  201e4e:	d045      	beq.n	201edc <adc_lld_serve_rx_interrupt+0x10c>
        _adc_isr_full_code(adcp);
  201e50:	9b01      	ldr	r3, [sp, #4]
  201e52:	691b      	ldr	r3, [r3, #16]
  201e54:	781b      	ldrb	r3, [r3, #0]
  201e56:	2b00      	cmp	r3, #0
  201e58:	d014      	beq.n	201e84 <adc_lld_serve_rx_interrupt+0xb4>
  201e5a:	9b01      	ldr	r3, [sp, #4]
  201e5c:	691b      	ldr	r3, [r3, #16]
  201e5e:	685b      	ldr	r3, [r3, #4]
  201e60:	2b00      	cmp	r3, #0
  201e62:	d04a      	beq.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
  201e64:	9b01      	ldr	r3, [sp, #4]
  201e66:	2204      	movs	r2, #4
  201e68:	701a      	strb	r2, [r3, #0]
  201e6a:	9b01      	ldr	r3, [sp, #4]
  201e6c:	691b      	ldr	r3, [r3, #16]
  201e6e:	685b      	ldr	r3, [r3, #4]
  201e70:	9801      	ldr	r0, [sp, #4]
  201e72:	4798      	blx	r3
  201e74:	9b01      	ldr	r3, [sp, #4]
  201e76:	781b      	ldrb	r3, [r3, #0]
  201e78:	2b04      	cmp	r3, #4
  201e7a:	d13e      	bne.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
  201e7c:	9b01      	ldr	r3, [sp, #4]
  201e7e:	2203      	movs	r2, #3
  201e80:	701a      	strb	r2, [r3, #0]
}
  201e82:	e03a      	b.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
        _adc_isr_full_code(adcp);
  201e84:	9801      	ldr	r0, [sp, #4]
  201e86:	f000 f9eb 	bl	202260 <adc_lld_stop_conversion>
  201e8a:	9b01      	ldr	r3, [sp, #4]
  201e8c:	691b      	ldr	r3, [r3, #16]
  201e8e:	685b      	ldr	r3, [r3, #4]
  201e90:	2b00      	cmp	r3, #0
  201e92:	d012      	beq.n	201eba <adc_lld_serve_rx_interrupt+0xea>
  201e94:	9b01      	ldr	r3, [sp, #4]
  201e96:	2204      	movs	r2, #4
  201e98:	701a      	strb	r2, [r3, #0]
  201e9a:	9b01      	ldr	r3, [sp, #4]
  201e9c:	691b      	ldr	r3, [r3, #16]
  201e9e:	685b      	ldr	r3, [r3, #4]
  201ea0:	9801      	ldr	r0, [sp, #4]
  201ea2:	4798      	blx	r3
  201ea4:	9b01      	ldr	r3, [sp, #4]
  201ea6:	781b      	ldrb	r3, [r3, #0]
  201ea8:	2b04      	cmp	r3, #4
  201eaa:	d10c      	bne.n	201ec6 <adc_lld_serve_rx_interrupt+0xf6>
  201eac:	9b01      	ldr	r3, [sp, #4]
  201eae:	2202      	movs	r2, #2
  201eb0:	701a      	strb	r2, [r3, #0]
  201eb2:	9b01      	ldr	r3, [sp, #4]
  201eb4:	2200      	movs	r2, #0
  201eb6:	611a      	str	r2, [r3, #16]
  201eb8:	e005      	b.n	201ec6 <adc_lld_serve_rx_interrupt+0xf6>
  201eba:	9b01      	ldr	r3, [sp, #4]
  201ebc:	2202      	movs	r2, #2
  201ebe:	701a      	strb	r2, [r3, #0]
  201ec0:	9b01      	ldr	r3, [sp, #4]
  201ec2:	2200      	movs	r2, #0
  201ec4:	611a      	str	r2, [r3, #16]
  201ec6:	f7ff ff63 	bl	201d90 <osalSysLockFromISR.lto_priv.0>
  201eca:	9b01      	ldr	r3, [sp, #4]
  201ecc:	3314      	adds	r3, #20
  201ece:	2100      	movs	r1, #0
  201ed0:	4618      	mov	r0, r3
  201ed2:	f7ff ff6d 	bl	201db0 <osalThreadResumeI.lto_priv.1>
  201ed6:	f7ff ff63 	bl	201da0 <osalSysUnlockFromISR.lto_priv.0>
}
  201eda:	e00e      	b.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
  201edc:	9b00      	ldr	r3, [sp, #0]
  201ede:	f003 0310 	and.w	r3, r3, #16
  201ee2:	2b00      	cmp	r3, #0
  201ee4:	d009      	beq.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
        _adc_isr_half_code(adcp);
  201ee6:	9b01      	ldr	r3, [sp, #4]
  201ee8:	691b      	ldr	r3, [r3, #16]
  201eea:	685b      	ldr	r3, [r3, #4]
  201eec:	2b00      	cmp	r3, #0
  201eee:	d004      	beq.n	201efa <adc_lld_serve_rx_interrupt+0x12a>
  201ef0:	9b01      	ldr	r3, [sp, #4]
  201ef2:	691b      	ldr	r3, [r3, #16]
  201ef4:	685b      	ldr	r3, [r3, #4]
  201ef6:	9801      	ldr	r0, [sp, #4]
  201ef8:	4798      	blx	r3
}
  201efa:	bf00      	nop
  201efc:	b003      	add	sp, #12
  201efe:	f85d fb04 	ldr.w	pc, [sp], #4
  201f02:	bf00      	nop
	...

00201f10 <adc_lld_serve_interrupt>:
 * @brief   ADC IRQ service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] sr        content of the SR register
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t sr) {
  201f10:	b500      	push	{lr}
  201f12:	b085      	sub	sp, #20
  201f14:	9001      	str	r0, [sp, #4]
  201f16:	9100      	str	r1, [sp, #0]

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
  201f18:	9b01      	ldr	r3, [sp, #4]
  201f1a:	691b      	ldr	r3, [r3, #16]
  201f1c:	2b00      	cmp	r3, #0
  201f1e:	d047      	beq.n	201fb0 <adc_lld_serve_interrupt+0xa0>
    adcerror_t emask = 0U;
  201f20:	2300      	movs	r3, #0
  201f22:	9303      	str	r3, [sp, #12]

    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the state is checked too.*/
    if ((sr & ADC_SR_OVR) && (adcp->state == ADC_ACTIVE)) {
  201f24:	9b00      	ldr	r3, [sp, #0]
  201f26:	f003 0320 	and.w	r3, r3, #32
  201f2a:	2b00      	cmp	r3, #0
  201f2c:	d007      	beq.n	201f3e <adc_lld_serve_interrupt+0x2e>
  201f2e:	9b01      	ldr	r3, [sp, #4]
  201f30:	781b      	ldrb	r3, [r3, #0]
  201f32:	2b03      	cmp	r3, #3
  201f34:	d103      	bne.n	201f3e <adc_lld_serve_interrupt+0x2e>
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      emask |= ADC_ERR_OVERFLOW;
  201f36:	9b03      	ldr	r3, [sp, #12]
  201f38:	f043 0302 	orr.w	r3, r3, #2
  201f3c:	9303      	str	r3, [sp, #12]
    }
    if (sr & ADC_SR_AWD) {
  201f3e:	9b00      	ldr	r3, [sp, #0]
  201f40:	f003 0301 	and.w	r3, r3, #1
  201f44:	2b00      	cmp	r3, #0
  201f46:	d003      	beq.n	201f50 <adc_lld_serve_interrupt+0x40>
      /* Analog watchdog 1 error.*/
      emask |= ADC_ERR_AWD;
  201f48:	9b03      	ldr	r3, [sp, #12]
  201f4a:	f043 0304 	orr.w	r3, r3, #4
  201f4e:	9303      	str	r3, [sp, #12]
    }
    if (emask != 0U) {
  201f50:	9b03      	ldr	r3, [sp, #12]
  201f52:	2b00      	cmp	r3, #0
  201f54:	d02c      	beq.n	201fb0 <adc_lld_serve_interrupt+0xa0>
      _adc_isr_error_code(adcp, emask);
  201f56:	9801      	ldr	r0, [sp, #4]
  201f58:	f000 f982 	bl	202260 <adc_lld_stop_conversion>
  201f5c:	9b01      	ldr	r3, [sp, #4]
  201f5e:	691b      	ldr	r3, [r3, #16]
  201f60:	689b      	ldr	r3, [r3, #8]
  201f62:	2b00      	cmp	r3, #0
  201f64:	d013      	beq.n	201f8e <adc_lld_serve_interrupt+0x7e>
  201f66:	9b01      	ldr	r3, [sp, #4]
  201f68:	2205      	movs	r2, #5
  201f6a:	701a      	strb	r2, [r3, #0]
  201f6c:	9b01      	ldr	r3, [sp, #4]
  201f6e:	691b      	ldr	r3, [r3, #16]
  201f70:	689b      	ldr	r3, [r3, #8]
  201f72:	9903      	ldr	r1, [sp, #12]
  201f74:	9801      	ldr	r0, [sp, #4]
  201f76:	4798      	blx	r3
  201f78:	9b01      	ldr	r3, [sp, #4]
  201f7a:	781b      	ldrb	r3, [r3, #0]
  201f7c:	2b05      	cmp	r3, #5
  201f7e:	d10c      	bne.n	201f9a <adc_lld_serve_interrupt+0x8a>
  201f80:	9b01      	ldr	r3, [sp, #4]
  201f82:	2202      	movs	r2, #2
  201f84:	701a      	strb	r2, [r3, #0]
  201f86:	9b01      	ldr	r3, [sp, #4]
  201f88:	2200      	movs	r2, #0
  201f8a:	611a      	str	r2, [r3, #16]
  201f8c:	e005      	b.n	201f9a <adc_lld_serve_interrupt+0x8a>
  201f8e:	9b01      	ldr	r3, [sp, #4]
  201f90:	2202      	movs	r2, #2
  201f92:	701a      	strb	r2, [r3, #0]
  201f94:	9b01      	ldr	r3, [sp, #4]
  201f96:	2200      	movs	r2, #0
  201f98:	611a      	str	r2, [r3, #16]
  201f9a:	f7ff fef9 	bl	201d90 <osalSysLockFromISR.lto_priv.0>
  201f9e:	9b01      	ldr	r3, [sp, #4]
  201fa0:	3314      	adds	r3, #20
  201fa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  201fa6:	4618      	mov	r0, r3
  201fa8:	f7ff ff02 	bl	201db0 <osalThreadResumeI.lto_priv.1>
  201fac:	f7ff fef8 	bl	201da0 <osalSysUnlockFromISR.lto_priv.0>
    }
  }
}
  201fb0:	bf00      	nop
  201fb2:	b005      	add	sp, #20
  201fb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00201fc0 <Vector88>:
/**
 * @brief   ADC interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC_HANDLER) {
  201fc0:	b500      	push	{lr}
  201fc2:	b083      	sub	sp, #12
  uint32_t sr;

  OSAL_IRQ_PROLOGUE();
  201fc4:	480c      	ldr	r0, [pc, #48]	; (201ff8 <Vector88+0x38>)
  201fc6:	f001 fdcb 	bl	203b60 <__trace_isr_enter>
  201fca:	f001 fc29 	bl	203820 <__dbg_check_enter_isr>

#if STM32_ADC_USE_ADC1
  sr = ADC1->SR;
  201fce:	4b0b      	ldr	r3, [pc, #44]	; (201ffc <Vector88+0x3c>)
  201fd0:	681b      	ldr	r3, [r3, #0]
  201fd2:	9301      	str	r3, [sp, #4]
  ADC1->SR = 0;
  201fd4:	4b09      	ldr	r3, [pc, #36]	; (201ffc <Vector88+0x3c>)
  201fd6:	2200      	movs	r2, #0
  201fd8:	601a      	str	r2, [r3, #0]
#if defined(STM32_ADC_ADC1_IRQ_HOOK)
  STM32_ADC_ADC1_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD1, sr);
  201fda:	9901      	ldr	r1, [sp, #4]
  201fdc:	4808      	ldr	r0, [pc, #32]	; (202000 <Vector88+0x40>)
  201fde:	f7ff ff97 	bl	201f10 <adc_lld_serve_interrupt>
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, sr);
#endif /* STM32_ADC_USE_ADC3 */

  OSAL_IRQ_EPILOGUE();
  201fe2:	f001 fc5d 	bl	2038a0 <__dbg_check_leave_isr>
  201fe6:	4804      	ldr	r0, [pc, #16]	; (201ff8 <Vector88+0x38>)
  201fe8:	f001 fdfa 	bl	203be0 <__trace_isr_leave>
  201fec:	f003 fe88 	bl	205d00 <__port_irq_epilogue>
}
  201ff0:	bf00      	nop
  201ff2:	b003      	add	sp, #12
  201ff4:	f85d fb04 	ldr.w	pc, [sp], #4
  201ff8:	08006074 	.word	0x08006074
  201ffc:	40012000 	.word	0x40012000
  202000:	20000800 	.word	0x20000800
	...

00202010 <adc_lld_init>:
/**
 * @brief   Low level ADC driver initialization.
 *
 * @notapi
 */
void adc_lld_init(void) {
  202010:	b508      	push	{r3, lr}

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
  202012:	4810      	ldr	r0, [pc, #64]	; (202054 <adc_lld_init+0x44>)
  202014:	f7fe ffb4 	bl	200f80 <adcObjectInit>
  ADCD1.adc     = ADC1;
  202018:	4b0e      	ldr	r3, [pc, #56]	; (202054 <adc_lld_init+0x44>)
  20201a:	4a0f      	ldr	r2, [pc, #60]	; (202058 <adc_lld_init+0x48>)
  20201c:	629a      	str	r2, [r3, #40]	; 0x28
  ADCD1.dmastp  = NULL;
  20201e:	4b0d      	ldr	r3, [pc, #52]	; (202054 <adc_lld_init+0x44>)
  202020:	2200      	movs	r2, #0
  202022:	62da      	str	r2, [r3, #44]	; 0x2c
  ADCD1.dmamode = STM32_DMA_CR_CHSEL(ADC1_DMA_CHANNEL) |
  202024:	4b0b      	ldr	r3, [pc, #44]	; (202054 <adc_lld_init+0x44>)
  202026:	4a0d      	ldr	r2, [pc, #52]	; (20205c <adc_lld_init+0x4c>)
  202028:	631a      	str	r2, [r3, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif

#if defined(rccResetADC)
  /* Shared reset case.*/
  rccResetADC();
  20202a:	4b0d      	ldr	r3, [pc, #52]	; (202060 <adc_lld_init+0x50>)
  20202c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20202e:	4a0c      	ldr	r2, [pc, #48]	; (202060 <adc_lld_init+0x50>)
  202030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  202034:	6253      	str	r3, [r2, #36]	; 0x24
  202036:	4b0a      	ldr	r3, [pc, #40]	; (202060 <adc_lld_init+0x50>)
  202038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20203a:	4a09      	ldr	r2, [pc, #36]	; (202060 <adc_lld_init+0x50>)
  20203c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  202040:	6253      	str	r3, [r2, #36]	; 0x24
  202042:	4b07      	ldr	r3, [pc, #28]	; (202060 <adc_lld_init+0x50>)
  202044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
#endif

  /* The shared vector is initialized on driver initialization and never
     disabled because sharing.*/
  nvicEnableVector(STM32_ADC_NUMBER, STM32_ADC_IRQ_PRIORITY);
  202046:	2106      	movs	r1, #6
  202048:	2012      	movs	r0, #18
  20204a:	f7ff fb99 	bl	201780 <nvicEnableVector>
}
  20204e:	bf00      	nop
  202050:	bd08      	pop	{r3, pc}
  202052:	bf00      	nop
  202054:	20000800 	.word	0x20000800
  202058:	40012000 	.word	0x40012000
  20205c:	00022c16 	.word	0x00022c16
  202060:	40023800 	.word	0x40023800
	...

00202070 <adc_lld_start>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start(ADCDriver *adcp) {
  202070:	b500      	push	{lr}
  202072:	b083      	sub	sp, #12
  202074:	9001      	str	r0, [sp, #4]

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
  202076:	9b01      	ldr	r3, [sp, #4]
  202078:	781b      	ldrb	r3, [r3, #0]
  20207a:	2b01      	cmp	r3, #1
  20207c:	d13f      	bne.n	2020fe <adc_lld_start+0x8e>
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
  20207e:	9b01      	ldr	r3, [sp, #4]
  202080:	4a21      	ldr	r2, [pc, #132]	; (202108 <adc_lld_start+0x98>)
  202082:	4293      	cmp	r3, r2
  202084:	d127      	bne.n	2020d6 <adc_lld_start+0x66>
      adcp->dmastp = dmaStreamAllocI(STM32_ADC_ADC1_DMA_STREAM,
  202086:	9b01      	ldr	r3, [sp, #4]
  202088:	4a20      	ldr	r2, [pc, #128]	; (20210c <adc_lld_start+0x9c>)
  20208a:	2106      	movs	r1, #6
  20208c:	200c      	movs	r0, #12
  20208e:	f000 fc67 	bl	202960 <dmaStreamAllocI>
  202092:	4602      	mov	r2, r0
  202094:	9b01      	ldr	r3, [sp, #4]
  202096:	62da      	str	r2, [r3, #44]	; 0x2c
                                     STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                                     (stm32_dmaisr_t)adc_lld_serve_rx_interrupt,
                                     (void *)adcp);
      osalDbgAssert(adcp->dmastp != NULL, "unable to allocate stream");
  202098:	9b01      	ldr	r3, [sp, #4]
  20209a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  20209c:	2b00      	cmp	r3, #0
  20209e:	bf0c      	ite	eq
  2020a0:	2301      	moveq	r3, #1
  2020a2:	2300      	movne	r3, #0
  2020a4:	b2db      	uxtb	r3, r3
  2020a6:	2b00      	cmp	r3, #0
  2020a8:	d002      	beq.n	2020b0 <adc_lld_start+0x40>
  2020aa:	4819      	ldr	r0, [pc, #100]	; (202110 <adc_lld_start+0xa0>)
  2020ac:	f001 fac8 	bl	203640 <chSysHalt>
      dmaStreamSetPeripheral(adcp->dmastp, &ADC1->DR);
  2020b0:	9b01      	ldr	r3, [sp, #4]
  2020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  2020b4:	681b      	ldr	r3, [r3, #0]
  2020b6:	4a17      	ldr	r2, [pc, #92]	; (202114 <adc_lld_start+0xa4>)
  2020b8:	609a      	str	r2, [r3, #8]
#if defined(rccResetADC1)
      rccResetADC1();
#endif
      rccEnableADC1(true);
  2020ba:	4b17      	ldr	r3, [pc, #92]	; (202118 <adc_lld_start+0xa8>)
  2020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  2020be:	4a16      	ldr	r2, [pc, #88]	; (202118 <adc_lld_start+0xa8>)
  2020c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  2020c4:	6453      	str	r3, [r2, #68]	; 0x44
  2020c6:	4b14      	ldr	r3, [pc, #80]	; (202118 <adc_lld_start+0xa8>)
  2020c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  2020ca:	4a13      	ldr	r2, [pc, #76]	; (202118 <adc_lld_start+0xa8>)
  2020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  2020d0:	6653      	str	r3, [r2, #100]	; 0x64
  2020d2:	4b11      	ldr	r3, [pc, #68]	; (202118 <adc_lld_start+0xa8>)
  2020d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    }
#endif /* STM32_ADC_USE_ADC3 */

    /* This is a common register but apparently it requires that at least one
       of the ADCs is clocked in order to allow writing, see bug 3575297.*/
    ADC->CCR = (ADC->CCR & (ADC_CCR_TSVREFE | ADC_CCR_VBATE)) |
  2020d6:	4b11      	ldr	r3, [pc, #68]	; (20211c <adc_lld_start+0xac>)
  2020d8:	685b      	ldr	r3, [r3, #4]
  2020da:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
  2020de:	4a0f      	ldr	r2, [pc, #60]	; (20211c <adc_lld_start+0xac>)
  2020e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  2020e4:	6053      	str	r3, [r2, #4]
               (STM32_ADC_ADCPRE << 16);

    /* ADC initial setup, starting the analog part here in order to reduce
       the latency when starting a conversion.*/
    adcp->adc->CR1 = 0;
  2020e6:	9b01      	ldr	r3, [sp, #4]
  2020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2020ea:	2200      	movs	r2, #0
  2020ec:	605a      	str	r2, [r3, #4]
    adcp->adc->CR2 = 0;
  2020ee:	9b01      	ldr	r3, [sp, #4]
  2020f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2020f2:	2200      	movs	r2, #0
  2020f4:	609a      	str	r2, [r3, #8]
    adcp->adc->CR2 = ADC_CR2_ADON;
  2020f6:	9b01      	ldr	r3, [sp, #4]
  2020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2020fa:	2201      	movs	r2, #1
  2020fc:	609a      	str	r2, [r3, #8]
  }
}
  2020fe:	bf00      	nop
  202100:	b003      	add	sp, #12
  202102:	f85d fb04 	ldr.w	pc, [sp], #4
  202106:	bf00      	nop
  202108:	20000800 	.word	0x20000800
  20210c:	00201dd1 	.word	0x00201dd1
  202110:	08006080 	.word	0x08006080
  202114:	4001204c 	.word	0x4001204c
  202118:	40023800 	.word	0x40023800
  20211c:	40012300 	.word	0x40012300

00202120 <adc_lld_start_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_start_conversion(ADCDriver *adcp) {
  202120:	b086      	sub	sp, #24
  202122:	9001      	str	r0, [sp, #4]
  uint32_t mode;
  uint32_t cr2;
  const ADCConversionGroup *grpp = adcp->grpp;
  202124:	9b01      	ldr	r3, [sp, #4]
  202126:	691b      	ldr	r3, [r3, #16]
  202128:	9303      	str	r3, [sp, #12]

  /* DMA setup.*/
  mode = adcp->dmamode;
  20212a:	9b01      	ldr	r3, [sp, #4]
  20212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  20212e:	9305      	str	r3, [sp, #20]
  if (grpp->circular) {
  202130:	9b03      	ldr	r3, [sp, #12]
  202132:	781b      	ldrb	r3, [r3, #0]
  202134:	2b00      	cmp	r3, #0
  202136:	d00f      	beq.n	202158 <adc_lld_start_conversion+0x38>
    mode |= STM32_DMA_CR_CIRC;
  202138:	9b05      	ldr	r3, [sp, #20]
  20213a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  20213e:	9305      	str	r3, [sp, #20]
    if (adcp->depth > 1) {
  202140:	9b01      	ldr	r3, [sp, #4]
  202142:	68db      	ldr	r3, [r3, #12]
  202144:	2b01      	cmp	r3, #1
  202146:	d903      	bls.n	202150 <adc_lld_start_conversion+0x30>
      /* If circular buffer depth > 1, then the half transfer interrupt
         is enabled in order to allow streaming processing.*/
      mode |= STM32_DMA_CR_HTIE;
  202148:	9b05      	ldr	r3, [sp, #20]
  20214a:	f043 0308 	orr.w	r3, r3, #8
  20214e:	9305      	str	r3, [sp, #20]
    }
    cr2 = ADC_CR2_DDS;
  202150:	f44f 7300 	mov.w	r3, #512	; 0x200
  202154:	9304      	str	r3, [sp, #16]
  202156:	e001      	b.n	20215c <adc_lld_start_conversion+0x3c>
  }
  else {
    cr2 = 0U;
  202158:	2300      	movs	r3, #0
  20215a:	9304      	str	r3, [sp, #16]
  }
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
  20215c:	9b01      	ldr	r3, [sp, #4]
  20215e:	689a      	ldr	r2, [r3, #8]
  202160:	9b01      	ldr	r3, [sp, #4]
  202162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202164:	681b      	ldr	r3, [r3, #0]
  202166:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
  202168:	9b03      	ldr	r3, [sp, #12]
  20216a:	885b      	ldrh	r3, [r3, #2]
  20216c:	4619      	mov	r1, r3
  20216e:	9b01      	ldr	r3, [sp, #4]
  202170:	68da      	ldr	r2, [r3, #12]
  202172:	9b01      	ldr	r3, [sp, #4]
  202174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202176:	681b      	ldr	r3, [r3, #0]
  202178:	fb01 f202 	mul.w	r2, r1, r2
  20217c:	605a      	str	r2, [r3, #4]
                                            (uint32_t)adcp->depth);
  dmaStreamSetMode(adcp->dmastp, mode);
  20217e:	9b01      	ldr	r3, [sp, #4]
  202180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202182:	681b      	ldr	r3, [r3, #0]
  202184:	9a05      	ldr	r2, [sp, #20]
  202186:	601a      	str	r2, [r3, #0]
  dmaStreamEnable(adcp->dmastp);
  202188:	9b01      	ldr	r3, [sp, #4]
  20218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  20218c:	681b      	ldr	r3, [r3, #0]
  20218e:	681a      	ldr	r2, [r3, #0]
  202190:	9b01      	ldr	r3, [sp, #4]
  202192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202194:	681b      	ldr	r3, [r3, #0]
  202196:	f042 0201 	orr.w	r2, r2, #1
  20219a:	601a      	str	r2, [r3, #0]

  /* ADC setup.*/
  adcp->adc->SR    = 0;
  20219c:	9b01      	ldr	r3, [sp, #4]
  20219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021a0:	2200      	movs	r2, #0
  2021a2:	601a      	str	r2, [r3, #0]
  adcp->adc->SMPR1 = grpp->smpr1;
  2021a4:	9b01      	ldr	r3, [sp, #4]
  2021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021a8:	9a03      	ldr	r2, [sp, #12]
  2021aa:	6952      	ldr	r2, [r2, #20]
  2021ac:	60da      	str	r2, [r3, #12]
  adcp->adc->SMPR2 = grpp->smpr2;
  2021ae:	9b01      	ldr	r3, [sp, #4]
  2021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021b2:	9a03      	ldr	r2, [sp, #12]
  2021b4:	6992      	ldr	r2, [r2, #24]
  2021b6:	611a      	str	r2, [r3, #16]
  adcp->adc->HTR   = grpp->htr;
  2021b8:	9b03      	ldr	r3, [sp, #12]
  2021ba:	8b9a      	ldrh	r2, [r3, #28]
  2021bc:	9b01      	ldr	r3, [sp, #4]
  2021be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021c0:	625a      	str	r2, [r3, #36]	; 0x24
  adcp->adc->LTR   = grpp->ltr;
  2021c2:	9b03      	ldr	r3, [sp, #12]
  2021c4:	8bda      	ldrh	r2, [r3, #30]
  2021c6:	9b01      	ldr	r3, [sp, #4]
  2021c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021ca:	629a      	str	r2, [r3, #40]	; 0x28
  adcp->adc->SQR1  = grpp->sqr1 | ADC_SQR1_NUM_CH(grpp->num_channels);
  2021cc:	9b03      	ldr	r3, [sp, #12]
  2021ce:	6a1a      	ldr	r2, [r3, #32]
  2021d0:	9b03      	ldr	r3, [sp, #12]
  2021d2:	885b      	ldrh	r3, [r3, #2]
  2021d4:	3b01      	subs	r3, #1
  2021d6:	051b      	lsls	r3, r3, #20
  2021d8:	4619      	mov	r1, r3
  2021da:	9b01      	ldr	r3, [sp, #4]
  2021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021de:	430a      	orrs	r2, r1
  2021e0:	62da      	str	r2, [r3, #44]	; 0x2c
  adcp->adc->SQR2  = grpp->sqr2;
  2021e2:	9b01      	ldr	r3, [sp, #4]
  2021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021e6:	9a03      	ldr	r2, [sp, #12]
  2021e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
  2021ea:	631a      	str	r2, [r3, #48]	; 0x30
  adcp->adc->SQR3  = grpp->sqr3;
  2021ec:	9b01      	ldr	r3, [sp, #4]
  2021ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2021f0:	9a03      	ldr	r2, [sp, #12]
  2021f2:	6a92      	ldr	r2, [r2, #40]	; 0x28
  2021f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* ADC configuration and start.*/
  adcp->adc->CR1   = grpp->cr1 | ADC_CR1_OVRIE | ADC_CR1_SCAN;
  2021f6:	9b03      	ldr	r3, [sp, #12]
  2021f8:	68d9      	ldr	r1, [r3, #12]
  2021fa:	9b01      	ldr	r3, [sp, #4]
  2021fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  2021fe:	4b13      	ldr	r3, [pc, #76]	; (20224c <adc_lld_start_conversion+0x12c>)
  202200:	430b      	orrs	r3, r1
  202202:	6053      	str	r3, [r2, #4]

  /* Enforcing the mandatory bits in CR2.*/
  cr2 |= grpp->cr2 | ADC_CR2_DMA | ADC_CR2_ADON;
  202204:	9b03      	ldr	r3, [sp, #12]
  202206:	691a      	ldr	r2, [r3, #16]
  202208:	9b04      	ldr	r3, [sp, #16]
  20220a:	431a      	orrs	r2, r3
  20220c:	f240 1301 	movw	r3, #257	; 0x101
  202210:	4313      	orrs	r3, r2
  202212:	9304      	str	r3, [sp, #16]

  /* The start method is different depending if HW or SW triggered, the
     start is performed using the method specified in the CR2 configuration.*/
  if ((cr2 & ADC_CR2_SWSTART) != 0) {
  202214:	9b04      	ldr	r3, [sp, #16]
  202216:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
  20221a:	2b00      	cmp	r3, #0
  20221c:	d00e      	beq.n	20223c <adc_lld_start_conversion+0x11c>
    /* Initializing CR2 while keeping ADC_CR2_SWSTART at zero.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT) & ~ADC_CR2_SWSTART;
  20221e:	9a04      	ldr	r2, [sp, #16]
  202220:	4b0b      	ldr	r3, [pc, #44]	; (202250 <adc_lld_start_conversion+0x130>)
  202222:	4013      	ands	r3, r2
  202224:	9a01      	ldr	r2, [sp, #4]
  202226:	6a92      	ldr	r2, [r2, #40]	; 0x28
  202228:	f043 0302 	orr.w	r3, r3, #2
  20222c:	6093      	str	r3, [r2, #8]

    /* Finally enabling ADC_CR2_SWSTART.*/
    adcp->adc->CR2 = (cr2 | ADC_CR2_CONT);
  20222e:	9b01      	ldr	r3, [sp, #4]
  202230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  202232:	9a04      	ldr	r2, [sp, #16]
  202234:	f042 0202 	orr.w	r2, r2, #2
  202238:	609a      	str	r2, [r3, #8]
  }
  else {
    adcp->adc->CR2 = cr2;
  }
}
  20223a:	e003      	b.n	202244 <adc_lld_start_conversion+0x124>
    adcp->adc->CR2 = cr2;
  20223c:	9b01      	ldr	r3, [sp, #4]
  20223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  202240:	9a04      	ldr	r2, [sp, #16]
  202242:	609a      	str	r2, [r3, #8]
}
  202244:	bf00      	nop
  202246:	b006      	add	sp, #24
  202248:	4770      	bx	lr
  20224a:	bf00      	nop
  20224c:	04000100 	.word	0x04000100
  202250:	bffffffd 	.word	0xbffffffd
	...

00202260 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
  202260:	b082      	sub	sp, #8
  202262:	9001      	str	r0, [sp, #4]

  dmaStreamDisable(adcp->dmastp);
  202264:	9b01      	ldr	r3, [sp, #4]
  202266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202268:	681b      	ldr	r3, [r3, #0]
  20226a:	681a      	ldr	r2, [r3, #0]
  20226c:	9b01      	ldr	r3, [sp, #4]
  20226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202270:	681b      	ldr	r3, [r3, #0]
  202272:	f022 021f 	bic.w	r2, r2, #31
  202276:	601a      	str	r2, [r3, #0]
  202278:	9b01      	ldr	r3, [sp, #4]
  20227a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  20227c:	681b      	ldr	r3, [r3, #0]
  20227e:	681b      	ldr	r3, [r3, #0]
  202280:	f003 0301 	and.w	r3, r3, #1
  202284:	2b00      	cmp	r3, #0
  202286:	d1f7      	bne.n	202278 <adc_lld_stop_conversion+0x18>
  202288:	9b01      	ldr	r3, [sp, #4]
  20228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  20228c:	7a5b      	ldrb	r3, [r3, #9]
  20228e:	4619      	mov	r1, r3
  202290:	9b01      	ldr	r3, [sp, #4]
  202292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  202294:	685b      	ldr	r3, [r3, #4]
  202296:	223d      	movs	r2, #61	; 0x3d
  202298:	408a      	lsls	r2, r1
  20229a:	601a      	str	r2, [r3, #0]
  adcp->adc->CR1 = 0U;
  20229c:	9b01      	ldr	r3, [sp, #4]
  20229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2022a0:	2200      	movs	r2, #0
  2022a2:	605a      	str	r2, [r3, #4]
  if ((adcp->adc->CR2 & ADC_CR2_CONT) != 0U) {
  2022a4:	9b01      	ldr	r3, [sp, #4]
  2022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2022a8:	689b      	ldr	r3, [r3, #8]
  2022aa:	f003 0302 	and.w	r3, r3, #2
  2022ae:	2b00      	cmp	r3, #0
  2022b0:	d003      	beq.n	2022ba <adc_lld_stop_conversion+0x5a>
    adcp->adc->CR2 = 0U;
  2022b2:	9b01      	ldr	r3, [sp, #4]
  2022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2022b6:	2200      	movs	r2, #0
  2022b8:	609a      	str	r2, [r3, #8]
  }
  adcp->adc->CR2 = ADC_CR2_ADON;
  2022ba:	9b01      	ldr	r3, [sp, #4]
  2022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  2022be:	2201      	movs	r2, #1
  2022c0:	609a      	str	r2, [r3, #8]
}
  2022c2:	bf00      	nop
  2022c4:	b002      	add	sp, #8
  2022c6:	4770      	bx	lr
	...

002022d0 <adcSTM32EnableTSVREFE>:
 *          temperature sensor and internal reference voltage.
 * @note    This is an STM32-only functionality.
 */
void adcSTM32EnableTSVREFE(void) {

  ADC->CCR |= ADC_CCR_TSVREFE;
  2022d0:	4b03      	ldr	r3, [pc, #12]	; (2022e0 <adcSTM32EnableTSVREFE+0x10>)
  2022d2:	685b      	ldr	r3, [r3, #4]
  2022d4:	4a02      	ldr	r2, [pc, #8]	; (2022e0 <adcSTM32EnableTSVREFE+0x10>)
  2022d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
  2022da:	6053      	str	r3, [r2, #4]
}
  2022dc:	bf00      	nop
  2022de:	4770      	bx	lr
  2022e0:	40012300 	.word	0x40012300
	...

002022f0 <Vector6C>:
/**
 * @brief   DMA1 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
  2022f0:	b500      	push	{lr}
  2022f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  2022f4:	4811      	ldr	r0, [pc, #68]	; (20233c <Vector6C+0x4c>)
  2022f6:	f001 fc33 	bl	203b60 <__trace_isr_enter>
  2022fa:	f001 fa91 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2022fe:	4b10      	ldr	r3, [pc, #64]	; (202340 <Vector6C+0x50>)
  202300:	681b      	ldr	r3, [r3, #0]
  202302:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202306:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 0U;
  202308:	4a0d      	ldr	r2, [pc, #52]	; (202340 <Vector6C+0x50>)
  20230a:	9b01      	ldr	r3, [sp, #4]
  20230c:	6093      	str	r3, [r2, #8]
  if (dma.streams[0].func)
  20230e:	4b0d      	ldr	r3, [pc, #52]	; (202344 <Vector6C+0x54>)
  202310:	685b      	ldr	r3, [r3, #4]
  202312:	2b00      	cmp	r3, #0
  202314:	d006      	beq.n	202324 <Vector6C+0x34>
    dma.streams[0].func(dma.streams[0].param, flags);
  202316:	4b0b      	ldr	r3, [pc, #44]	; (202344 <Vector6C+0x54>)
  202318:	685b      	ldr	r3, [r3, #4]
  20231a:	4a0a      	ldr	r2, [pc, #40]	; (202344 <Vector6C+0x54>)
  20231c:	6892      	ldr	r2, [r2, #8]
  20231e:	9901      	ldr	r1, [sp, #4]
  202320:	4610      	mov	r0, r2
  202322:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202324:	f001 fabc 	bl	2038a0 <__dbg_check_leave_isr>
  202328:	4804      	ldr	r0, [pc, #16]	; (20233c <Vector6C+0x4c>)
  20232a:	f001 fc59 	bl	203be0 <__trace_isr_leave>
  20232e:	f003 fce7 	bl	205d00 <__port_irq_epilogue>
}
  202332:	bf00      	nop
  202334:	b003      	add	sp, #12
  202336:	f85d fb04 	ldr.w	pc, [sp], #4
  20233a:	bf00      	nop
  20233c:	08006150 	.word	0x08006150
  202340:	40026000 	.word	0x40026000
  202344:	20000834 	.word	0x20000834
	...

00202350 <Vector70>:
/**
 * @brief   DMA1 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
  202350:	b500      	push	{lr}
  202352:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202354:	4812      	ldr	r0, [pc, #72]	; (2023a0 <Vector70+0x50>)
  202356:	f001 fc03 	bl	203b60 <__trace_isr_enter>
  20235a:	f001 fa61 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
  20235e:	4b11      	ldr	r3, [pc, #68]	; (2023a4 <Vector70+0x54>)
  202360:	681b      	ldr	r3, [r3, #0]
  202362:	099b      	lsrs	r3, r3, #6
  202364:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202368:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 6U;
  20236a:	4a0e      	ldr	r2, [pc, #56]	; (2023a4 <Vector70+0x54>)
  20236c:	9b01      	ldr	r3, [sp, #4]
  20236e:	019b      	lsls	r3, r3, #6
  202370:	6093      	str	r3, [r2, #8]
  if (dma.streams[1].func)
  202372:	4b0d      	ldr	r3, [pc, #52]	; (2023a8 <Vector70+0x58>)
  202374:	68db      	ldr	r3, [r3, #12]
  202376:	2b00      	cmp	r3, #0
  202378:	d006      	beq.n	202388 <Vector70+0x38>
    dma.streams[1].func(dma.streams[1].param, flags);
  20237a:	4b0b      	ldr	r3, [pc, #44]	; (2023a8 <Vector70+0x58>)
  20237c:	68db      	ldr	r3, [r3, #12]
  20237e:	4a0a      	ldr	r2, [pc, #40]	; (2023a8 <Vector70+0x58>)
  202380:	6912      	ldr	r2, [r2, #16]
  202382:	9901      	ldr	r1, [sp, #4]
  202384:	4610      	mov	r0, r2
  202386:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202388:	f001 fa8a 	bl	2038a0 <__dbg_check_leave_isr>
  20238c:	4804      	ldr	r0, [pc, #16]	; (2023a0 <Vector70+0x50>)
  20238e:	f001 fc27 	bl	203be0 <__trace_isr_leave>
  202392:	f003 fcb5 	bl	205d00 <__port_irq_epilogue>
}
  202396:	bf00      	nop
  202398:	b003      	add	sp, #12
  20239a:	f85d fb04 	ldr.w	pc, [sp], #4
  20239e:	bf00      	nop
  2023a0:	0800615c 	.word	0x0800615c
  2023a4:	40026000 	.word	0x40026000
  2023a8:	20000834 	.word	0x20000834
  2023ac:	00000000 	.word	0x00000000

002023b0 <Vector74>:
/**
 * @brief   DMA1 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
  2023b0:	b500      	push	{lr}
  2023b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  2023b4:	4812      	ldr	r0, [pc, #72]	; (202400 <Vector74+0x50>)
  2023b6:	f001 fbd3 	bl	203b60 <__trace_isr_enter>
  2023ba:	f001 fa31 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2023be:	4b11      	ldr	r3, [pc, #68]	; (202404 <Vector74+0x54>)
  2023c0:	681b      	ldr	r3, [r3, #0]
  2023c2:	0c1b      	lsrs	r3, r3, #16
  2023c4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  2023c8:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 16U;
  2023ca:	4a0e      	ldr	r2, [pc, #56]	; (202404 <Vector74+0x54>)
  2023cc:	9b01      	ldr	r3, [sp, #4]
  2023ce:	041b      	lsls	r3, r3, #16
  2023d0:	6093      	str	r3, [r2, #8]
  if (dma.streams[2].func)
  2023d2:	4b0d      	ldr	r3, [pc, #52]	; (202408 <Vector74+0x58>)
  2023d4:	695b      	ldr	r3, [r3, #20]
  2023d6:	2b00      	cmp	r3, #0
  2023d8:	d006      	beq.n	2023e8 <Vector74+0x38>
    dma.streams[2].func(dma.streams[2].param, flags);
  2023da:	4b0b      	ldr	r3, [pc, #44]	; (202408 <Vector74+0x58>)
  2023dc:	695b      	ldr	r3, [r3, #20]
  2023de:	4a0a      	ldr	r2, [pc, #40]	; (202408 <Vector74+0x58>)
  2023e0:	6992      	ldr	r2, [r2, #24]
  2023e2:	9901      	ldr	r1, [sp, #4]
  2023e4:	4610      	mov	r0, r2
  2023e6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  2023e8:	f001 fa5a 	bl	2038a0 <__dbg_check_leave_isr>
  2023ec:	4804      	ldr	r0, [pc, #16]	; (202400 <Vector74+0x50>)
  2023ee:	f001 fbf7 	bl	203be0 <__trace_isr_leave>
  2023f2:	f003 fc85 	bl	205d00 <__port_irq_epilogue>
}
  2023f6:	bf00      	nop
  2023f8:	b003      	add	sp, #12
  2023fa:	f85d fb04 	ldr.w	pc, [sp], #4
  2023fe:	bf00      	nop
  202400:	08006168 	.word	0x08006168
  202404:	40026000 	.word	0x40026000
  202408:	20000834 	.word	0x20000834
  20240c:	00000000 	.word	0x00000000

00202410 <Vector78>:
/**
 * @brief   DMA1 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
  202410:	b500      	push	{lr}
  202412:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202414:	4812      	ldr	r0, [pc, #72]	; (202460 <Vector78+0x50>)
  202416:	f001 fba3 	bl	203b60 <__trace_isr_enter>
  20241a:	f001 fa01 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
  20241e:	4b11      	ldr	r3, [pc, #68]	; (202464 <Vector78+0x54>)
  202420:	681b      	ldr	r3, [r3, #0]
  202422:	0d9b      	lsrs	r3, r3, #22
  202424:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202428:	9301      	str	r3, [sp, #4]
  DMA1->LIFCR = flags << 22U;
  20242a:	4a0e      	ldr	r2, [pc, #56]	; (202464 <Vector78+0x54>)
  20242c:	9b01      	ldr	r3, [sp, #4]
  20242e:	059b      	lsls	r3, r3, #22
  202430:	6093      	str	r3, [r2, #8]
  if (dma.streams[3].func)
  202432:	4b0d      	ldr	r3, [pc, #52]	; (202468 <Vector78+0x58>)
  202434:	69db      	ldr	r3, [r3, #28]
  202436:	2b00      	cmp	r3, #0
  202438:	d006      	beq.n	202448 <Vector78+0x38>
    dma.streams[3].func(dma.streams[3].param, flags);
  20243a:	4b0b      	ldr	r3, [pc, #44]	; (202468 <Vector78+0x58>)
  20243c:	69db      	ldr	r3, [r3, #28]
  20243e:	4a0a      	ldr	r2, [pc, #40]	; (202468 <Vector78+0x58>)
  202440:	6a12      	ldr	r2, [r2, #32]
  202442:	9901      	ldr	r1, [sp, #4]
  202444:	4610      	mov	r0, r2
  202446:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202448:	f001 fa2a 	bl	2038a0 <__dbg_check_leave_isr>
  20244c:	4804      	ldr	r0, [pc, #16]	; (202460 <Vector78+0x50>)
  20244e:	f001 fbc7 	bl	203be0 <__trace_isr_leave>
  202452:	f003 fc55 	bl	205d00 <__port_irq_epilogue>
}
  202456:	bf00      	nop
  202458:	b003      	add	sp, #12
  20245a:	f85d fb04 	ldr.w	pc, [sp], #4
  20245e:	bf00      	nop
  202460:	08006174 	.word	0x08006174
  202464:	40026000 	.word	0x40026000
  202468:	20000834 	.word	0x20000834
  20246c:	00000000 	.word	0x00000000

00202470 <Vector7C>:
/**
 * @brief   DMA1 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
  202470:	b500      	push	{lr}
  202472:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202474:	4811      	ldr	r0, [pc, #68]	; (2024bc <Vector7C+0x4c>)
  202476:	f001 fb73 	bl	203b60 <__trace_isr_enter>
  20247a:	f001 f9d1 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20247e:	4b10      	ldr	r3, [pc, #64]	; (2024c0 <Vector7C+0x50>)
  202480:	685b      	ldr	r3, [r3, #4]
  202482:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202486:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 0U;
  202488:	4a0d      	ldr	r2, [pc, #52]	; (2024c0 <Vector7C+0x50>)
  20248a:	9b01      	ldr	r3, [sp, #4]
  20248c:	60d3      	str	r3, [r2, #12]
  if (dma.streams[4].func)
  20248e:	4b0d      	ldr	r3, [pc, #52]	; (2024c4 <Vector7C+0x54>)
  202490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  202492:	2b00      	cmp	r3, #0
  202494:	d006      	beq.n	2024a4 <Vector7C+0x34>
    dma.streams[4].func(dma.streams[4].param, flags);
  202496:	4b0b      	ldr	r3, [pc, #44]	; (2024c4 <Vector7C+0x54>)
  202498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20249a:	4a0a      	ldr	r2, [pc, #40]	; (2024c4 <Vector7C+0x54>)
  20249c:	6a92      	ldr	r2, [r2, #40]	; 0x28
  20249e:	9901      	ldr	r1, [sp, #4]
  2024a0:	4610      	mov	r0, r2
  2024a2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  2024a4:	f001 f9fc 	bl	2038a0 <__dbg_check_leave_isr>
  2024a8:	4804      	ldr	r0, [pc, #16]	; (2024bc <Vector7C+0x4c>)
  2024aa:	f001 fb99 	bl	203be0 <__trace_isr_leave>
  2024ae:	f003 fc27 	bl	205d00 <__port_irq_epilogue>
}
  2024b2:	bf00      	nop
  2024b4:	b003      	add	sp, #12
  2024b6:	f85d fb04 	ldr.w	pc, [sp], #4
  2024ba:	bf00      	nop
  2024bc:	08006180 	.word	0x08006180
  2024c0:	40026000 	.word	0x40026000
  2024c4:	20000834 	.word	0x20000834
	...

002024d0 <Vector80>:
/**
 * @brief   DMA1 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
  2024d0:	b500      	push	{lr}
  2024d2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  2024d4:	4812      	ldr	r0, [pc, #72]	; (202520 <Vector80+0x50>)
  2024d6:	f001 fb43 	bl	203b60 <__trace_isr_enter>
  2024da:	f001 f9a1 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2024de:	4b11      	ldr	r3, [pc, #68]	; (202524 <Vector80+0x54>)
  2024e0:	685b      	ldr	r3, [r3, #4]
  2024e2:	099b      	lsrs	r3, r3, #6
  2024e4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  2024e8:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 6U;
  2024ea:	4a0e      	ldr	r2, [pc, #56]	; (202524 <Vector80+0x54>)
  2024ec:	9b01      	ldr	r3, [sp, #4]
  2024ee:	019b      	lsls	r3, r3, #6
  2024f0:	60d3      	str	r3, [r2, #12]
  if (dma.streams[5].func)
  2024f2:	4b0d      	ldr	r3, [pc, #52]	; (202528 <Vector80+0x58>)
  2024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  2024f6:	2b00      	cmp	r3, #0
  2024f8:	d006      	beq.n	202508 <Vector80+0x38>
    dma.streams[5].func(dma.streams[5].param, flags);
  2024fa:	4b0b      	ldr	r3, [pc, #44]	; (202528 <Vector80+0x58>)
  2024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  2024fe:	4a0a      	ldr	r2, [pc, #40]	; (202528 <Vector80+0x58>)
  202500:	6b12      	ldr	r2, [r2, #48]	; 0x30
  202502:	9901      	ldr	r1, [sp, #4]
  202504:	4610      	mov	r0, r2
  202506:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202508:	f001 f9ca 	bl	2038a0 <__dbg_check_leave_isr>
  20250c:	4804      	ldr	r0, [pc, #16]	; (202520 <Vector80+0x50>)
  20250e:	f001 fb67 	bl	203be0 <__trace_isr_leave>
  202512:	f003 fbf5 	bl	205d00 <__port_irq_epilogue>
}
  202516:	bf00      	nop
  202518:	b003      	add	sp, #12
  20251a:	f85d fb04 	ldr.w	pc, [sp], #4
  20251e:	bf00      	nop
  202520:	0800618c 	.word	0x0800618c
  202524:	40026000 	.word	0x40026000
  202528:	20000834 	.word	0x20000834
  20252c:	00000000 	.word	0x00000000

00202530 <Vector84>:
/**
 * @brief   DMA1 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
  202530:	b500      	push	{lr}
  202532:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202534:	4812      	ldr	r0, [pc, #72]	; (202580 <Vector84+0x50>)
  202536:	f001 fb13 	bl	203b60 <__trace_isr_enter>
  20253a:	f001 f971 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
  20253e:	4b11      	ldr	r3, [pc, #68]	; (202584 <Vector84+0x54>)
  202540:	685b      	ldr	r3, [r3, #4]
  202542:	0c1b      	lsrs	r3, r3, #16
  202544:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202548:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 16U;
  20254a:	4a0e      	ldr	r2, [pc, #56]	; (202584 <Vector84+0x54>)
  20254c:	9b01      	ldr	r3, [sp, #4]
  20254e:	041b      	lsls	r3, r3, #16
  202550:	60d3      	str	r3, [r2, #12]
  if (dma.streams[6].func)
  202552:	4b0d      	ldr	r3, [pc, #52]	; (202588 <Vector84+0x58>)
  202554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  202556:	2b00      	cmp	r3, #0
  202558:	d006      	beq.n	202568 <Vector84+0x38>
    dma.streams[6].func(dma.streams[6].param, flags);
  20255a:	4b0b      	ldr	r3, [pc, #44]	; (202588 <Vector84+0x58>)
  20255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20255e:	4a0a      	ldr	r2, [pc, #40]	; (202588 <Vector84+0x58>)
  202560:	6b92      	ldr	r2, [r2, #56]	; 0x38
  202562:	9901      	ldr	r1, [sp, #4]
  202564:	4610      	mov	r0, r2
  202566:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202568:	f001 f99a 	bl	2038a0 <__dbg_check_leave_isr>
  20256c:	4804      	ldr	r0, [pc, #16]	; (202580 <Vector84+0x50>)
  20256e:	f001 fb37 	bl	203be0 <__trace_isr_leave>
  202572:	f003 fbc5 	bl	205d00 <__port_irq_epilogue>
}
  202576:	bf00      	nop
  202578:	b003      	add	sp, #12
  20257a:	f85d fb04 	ldr.w	pc, [sp], #4
  20257e:	bf00      	nop
  202580:	08006198 	.word	0x08006198
  202584:	40026000 	.word	0x40026000
  202588:	20000834 	.word	0x20000834
  20258c:	00000000 	.word	0x00000000

00202590 <VectorFC>:
/**
 * @brief   DMA1 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
  202590:	b500      	push	{lr}
  202592:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202594:	4812      	ldr	r0, [pc, #72]	; (2025e0 <VectorFC+0x50>)
  202596:	f001 fae3 	bl	203b60 <__trace_isr_enter>
  20259a:	f001 f941 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
  20259e:	4b11      	ldr	r3, [pc, #68]	; (2025e4 <VectorFC+0x54>)
  2025a0:	685b      	ldr	r3, [r3, #4]
  2025a2:	0d9b      	lsrs	r3, r3, #22
  2025a4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  2025a8:	9301      	str	r3, [sp, #4]
  DMA1->HIFCR = flags << 22U;
  2025aa:	4a0e      	ldr	r2, [pc, #56]	; (2025e4 <VectorFC+0x54>)
  2025ac:	9b01      	ldr	r3, [sp, #4]
  2025ae:	059b      	lsls	r3, r3, #22
  2025b0:	60d3      	str	r3, [r2, #12]
  if (dma.streams[7].func)
  2025b2:	4b0d      	ldr	r3, [pc, #52]	; (2025e8 <VectorFC+0x58>)
  2025b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  2025b6:	2b00      	cmp	r3, #0
  2025b8:	d006      	beq.n	2025c8 <VectorFC+0x38>
    dma.streams[7].func(dma.streams[7].param, flags);
  2025ba:	4b0b      	ldr	r3, [pc, #44]	; (2025e8 <VectorFC+0x58>)
  2025bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  2025be:	4a0a      	ldr	r2, [pc, #40]	; (2025e8 <VectorFC+0x58>)
  2025c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
  2025c2:	9901      	ldr	r1, [sp, #4]
  2025c4:	4610      	mov	r0, r2
  2025c6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  2025c8:	f001 f96a 	bl	2038a0 <__dbg_check_leave_isr>
  2025cc:	4804      	ldr	r0, [pc, #16]	; (2025e0 <VectorFC+0x50>)
  2025ce:	f001 fb07 	bl	203be0 <__trace_isr_leave>
  2025d2:	f003 fb95 	bl	205d00 <__port_irq_epilogue>
}
  2025d6:	bf00      	nop
  2025d8:	b003      	add	sp, #12
  2025da:	f85d fb04 	ldr.w	pc, [sp], #4
  2025de:	bf00      	nop
  2025e0:	080061a4 	.word	0x080061a4
  2025e4:	40026000 	.word	0x40026000
  2025e8:	20000834 	.word	0x20000834
  2025ec:	00000000 	.word	0x00000000

002025f0 <Vector120>:
/**
 * @brief   DMA2 stream 0 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
  2025f0:	b500      	push	{lr}
  2025f2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  2025f4:	4811      	ldr	r0, [pc, #68]	; (20263c <Vector120+0x4c>)
  2025f6:	f001 fab3 	bl	203b60 <__trace_isr_enter>
  2025fa:	f001 f911 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
  2025fe:	4b10      	ldr	r3, [pc, #64]	; (202640 <Vector120+0x50>)
  202600:	681b      	ldr	r3, [r3, #0]
  202602:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202606:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 0U;
  202608:	4a0d      	ldr	r2, [pc, #52]	; (202640 <Vector120+0x50>)
  20260a:	9b01      	ldr	r3, [sp, #4]
  20260c:	6093      	str	r3, [r2, #8]
  if (dma.streams[8].func)
  20260e:	4b0d      	ldr	r3, [pc, #52]	; (202644 <Vector120+0x54>)
  202610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  202612:	2b00      	cmp	r3, #0
  202614:	d006      	beq.n	202624 <Vector120+0x34>
    dma.streams[8].func(dma.streams[8].param, flags);
  202616:	4b0b      	ldr	r3, [pc, #44]	; (202644 <Vector120+0x54>)
  202618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  20261a:	4a0a      	ldr	r2, [pc, #40]	; (202644 <Vector120+0x54>)
  20261c:	6c92      	ldr	r2, [r2, #72]	; 0x48
  20261e:	9901      	ldr	r1, [sp, #4]
  202620:	4610      	mov	r0, r2
  202622:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202624:	f001 f93c 	bl	2038a0 <__dbg_check_leave_isr>
  202628:	4804      	ldr	r0, [pc, #16]	; (20263c <Vector120+0x4c>)
  20262a:	f001 fad9 	bl	203be0 <__trace_isr_leave>
  20262e:	f003 fb67 	bl	205d00 <__port_irq_epilogue>
}
  202632:	bf00      	nop
  202634:	b003      	add	sp, #12
  202636:	f85d fb04 	ldr.w	pc, [sp], #4
  20263a:	bf00      	nop
  20263c:	080061b0 	.word	0x080061b0
  202640:	40026400 	.word	0x40026400
  202644:	20000834 	.word	0x20000834
	...

00202650 <Vector124>:
/**
 * @brief   DMA2 stream 1 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
  202650:	b500      	push	{lr}
  202652:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202654:	4812      	ldr	r0, [pc, #72]	; (2026a0 <Vector124+0x50>)
  202656:	f001 fa83 	bl	203b60 <__trace_isr_enter>
  20265a:	f001 f8e1 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
  20265e:	4b11      	ldr	r3, [pc, #68]	; (2026a4 <Vector124+0x54>)
  202660:	681b      	ldr	r3, [r3, #0]
  202662:	099b      	lsrs	r3, r3, #6
  202664:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202668:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 6U;
  20266a:	4a0e      	ldr	r2, [pc, #56]	; (2026a4 <Vector124+0x54>)
  20266c:	9b01      	ldr	r3, [sp, #4]
  20266e:	019b      	lsls	r3, r3, #6
  202670:	6093      	str	r3, [r2, #8]
  if (dma.streams[9].func)
  202672:	4b0d      	ldr	r3, [pc, #52]	; (2026a8 <Vector124+0x58>)
  202674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  202676:	2b00      	cmp	r3, #0
  202678:	d006      	beq.n	202688 <Vector124+0x38>
    dma.streams[9].func(dma.streams[9].param, flags);
  20267a:	4b0b      	ldr	r3, [pc, #44]	; (2026a8 <Vector124+0x58>)
  20267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  20267e:	4a0a      	ldr	r2, [pc, #40]	; (2026a8 <Vector124+0x58>)
  202680:	6d12      	ldr	r2, [r2, #80]	; 0x50
  202682:	9901      	ldr	r1, [sp, #4]
  202684:	4610      	mov	r0, r2
  202686:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202688:	f001 f90a 	bl	2038a0 <__dbg_check_leave_isr>
  20268c:	4804      	ldr	r0, [pc, #16]	; (2026a0 <Vector124+0x50>)
  20268e:	f001 faa7 	bl	203be0 <__trace_isr_leave>
  202692:	f003 fb35 	bl	205d00 <__port_irq_epilogue>
}
  202696:	bf00      	nop
  202698:	b003      	add	sp, #12
  20269a:	f85d fb04 	ldr.w	pc, [sp], #4
  20269e:	bf00      	nop
  2026a0:	080061bc 	.word	0x080061bc
  2026a4:	40026400 	.word	0x40026400
  2026a8:	20000834 	.word	0x20000834
  2026ac:	00000000 	.word	0x00000000

002026b0 <Vector128>:
/**
 * @brief   DMA2 stream 2 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
  2026b0:	b500      	push	{lr}
  2026b2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  2026b4:	4812      	ldr	r0, [pc, #72]	; (202700 <Vector128+0x50>)
  2026b6:	f001 fa53 	bl	203b60 <__trace_isr_enter>
  2026ba:	f001 f8b1 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
  2026be:	4b11      	ldr	r3, [pc, #68]	; (202704 <Vector128+0x54>)
  2026c0:	681b      	ldr	r3, [r3, #0]
  2026c2:	0c1b      	lsrs	r3, r3, #16
  2026c4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  2026c8:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 16U;
  2026ca:	4a0e      	ldr	r2, [pc, #56]	; (202704 <Vector128+0x54>)
  2026cc:	9b01      	ldr	r3, [sp, #4]
  2026ce:	041b      	lsls	r3, r3, #16
  2026d0:	6093      	str	r3, [r2, #8]
  if (dma.streams[10].func)
  2026d2:	4b0d      	ldr	r3, [pc, #52]	; (202708 <Vector128+0x58>)
  2026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  2026d6:	2b00      	cmp	r3, #0
  2026d8:	d006      	beq.n	2026e8 <Vector128+0x38>
    dma.streams[10].func(dma.streams[10].param, flags);
  2026da:	4b0b      	ldr	r3, [pc, #44]	; (202708 <Vector128+0x58>)
  2026dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  2026de:	4a0a      	ldr	r2, [pc, #40]	; (202708 <Vector128+0x58>)
  2026e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
  2026e2:	9901      	ldr	r1, [sp, #4]
  2026e4:	4610      	mov	r0, r2
  2026e6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  2026e8:	f001 f8da 	bl	2038a0 <__dbg_check_leave_isr>
  2026ec:	4804      	ldr	r0, [pc, #16]	; (202700 <Vector128+0x50>)
  2026ee:	f001 fa77 	bl	203be0 <__trace_isr_leave>
  2026f2:	f003 fb05 	bl	205d00 <__port_irq_epilogue>
}
  2026f6:	bf00      	nop
  2026f8:	b003      	add	sp, #12
  2026fa:	f85d fb04 	ldr.w	pc, [sp], #4
  2026fe:	bf00      	nop
  202700:	080061c8 	.word	0x080061c8
  202704:	40026400 	.word	0x40026400
  202708:	20000834 	.word	0x20000834
  20270c:	00000000 	.word	0x00000000

00202710 <Vector12C>:
/**
 * @brief   DMA2 stream 3 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
  202710:	b500      	push	{lr}
  202712:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202714:	4812      	ldr	r0, [pc, #72]	; (202760 <Vector12C+0x50>)
  202716:	f001 fa23 	bl	203b60 <__trace_isr_enter>
  20271a:	f001 f881 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
  20271e:	4b11      	ldr	r3, [pc, #68]	; (202764 <Vector12C+0x54>)
  202720:	681b      	ldr	r3, [r3, #0]
  202722:	0d9b      	lsrs	r3, r3, #22
  202724:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202728:	9301      	str	r3, [sp, #4]
  DMA2->LIFCR = flags << 22U;
  20272a:	4a0e      	ldr	r2, [pc, #56]	; (202764 <Vector12C+0x54>)
  20272c:	9b01      	ldr	r3, [sp, #4]
  20272e:	059b      	lsls	r3, r3, #22
  202730:	6093      	str	r3, [r2, #8]
  if (dma.streams[11].func)
  202732:	4b0d      	ldr	r3, [pc, #52]	; (202768 <Vector12C+0x58>)
  202734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  202736:	2b00      	cmp	r3, #0
  202738:	d006      	beq.n	202748 <Vector12C+0x38>
    dma.streams[11].func(dma.streams[11].param, flags);
  20273a:	4b0b      	ldr	r3, [pc, #44]	; (202768 <Vector12C+0x58>)
  20273c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  20273e:	4a0a      	ldr	r2, [pc, #40]	; (202768 <Vector12C+0x58>)
  202740:	6e12      	ldr	r2, [r2, #96]	; 0x60
  202742:	9901      	ldr	r1, [sp, #4]
  202744:	4610      	mov	r0, r2
  202746:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202748:	f001 f8aa 	bl	2038a0 <__dbg_check_leave_isr>
  20274c:	4804      	ldr	r0, [pc, #16]	; (202760 <Vector12C+0x50>)
  20274e:	f001 fa47 	bl	203be0 <__trace_isr_leave>
  202752:	f003 fad5 	bl	205d00 <__port_irq_epilogue>
}
  202756:	bf00      	nop
  202758:	b003      	add	sp, #12
  20275a:	f85d fb04 	ldr.w	pc, [sp], #4
  20275e:	bf00      	nop
  202760:	080061d4 	.word	0x080061d4
  202764:	40026400 	.word	0x40026400
  202768:	20000834 	.word	0x20000834
  20276c:	00000000 	.word	0x00000000

00202770 <Vector130>:
/**
 * @brief   DMA2 stream 4 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
  202770:	b500      	push	{lr}
  202772:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202774:	4811      	ldr	r0, [pc, #68]	; (2027bc <Vector130+0x4c>)
  202776:	f001 f9f3 	bl	203b60 <__trace_isr_enter>
  20277a:	f001 f851 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
  20277e:	4b10      	ldr	r3, [pc, #64]	; (2027c0 <Vector130+0x50>)
  202780:	685b      	ldr	r3, [r3, #4]
  202782:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202786:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 0U;
  202788:	4a0d      	ldr	r2, [pc, #52]	; (2027c0 <Vector130+0x50>)
  20278a:	9b01      	ldr	r3, [sp, #4]
  20278c:	60d3      	str	r3, [r2, #12]
  if (dma.streams[12].func)
  20278e:	4b0d      	ldr	r3, [pc, #52]	; (2027c4 <Vector130+0x54>)
  202790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  202792:	2b00      	cmp	r3, #0
  202794:	d006      	beq.n	2027a4 <Vector130+0x34>
    dma.streams[12].func(dma.streams[12].param, flags);
  202796:	4b0b      	ldr	r3, [pc, #44]	; (2027c4 <Vector130+0x54>)
  202798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  20279a:	4a0a      	ldr	r2, [pc, #40]	; (2027c4 <Vector130+0x54>)
  20279c:	6e92      	ldr	r2, [r2, #104]	; 0x68
  20279e:	9901      	ldr	r1, [sp, #4]
  2027a0:	4610      	mov	r0, r2
  2027a2:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  2027a4:	f001 f87c 	bl	2038a0 <__dbg_check_leave_isr>
  2027a8:	4804      	ldr	r0, [pc, #16]	; (2027bc <Vector130+0x4c>)
  2027aa:	f001 fa19 	bl	203be0 <__trace_isr_leave>
  2027ae:	f003 faa7 	bl	205d00 <__port_irq_epilogue>
}
  2027b2:	bf00      	nop
  2027b4:	b003      	add	sp, #12
  2027b6:	f85d fb04 	ldr.w	pc, [sp], #4
  2027ba:	bf00      	nop
  2027bc:	080061e0 	.word	0x080061e0
  2027c0:	40026400 	.word	0x40026400
  2027c4:	20000834 	.word	0x20000834
	...

002027d0 <Vector150>:
/**
 * @brief   DMA2 stream 5 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
  2027d0:	b500      	push	{lr}
  2027d2:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  2027d4:	4812      	ldr	r0, [pc, #72]	; (202820 <Vector150+0x50>)
  2027d6:	f001 f9c3 	bl	203b60 <__trace_isr_enter>
  2027da:	f001 f821 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
  2027de:	4b11      	ldr	r3, [pc, #68]	; (202824 <Vector150+0x54>)
  2027e0:	685b      	ldr	r3, [r3, #4]
  2027e2:	099b      	lsrs	r3, r3, #6
  2027e4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  2027e8:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 6U;
  2027ea:	4a0e      	ldr	r2, [pc, #56]	; (202824 <Vector150+0x54>)
  2027ec:	9b01      	ldr	r3, [sp, #4]
  2027ee:	019b      	lsls	r3, r3, #6
  2027f0:	60d3      	str	r3, [r2, #12]
  if (dma.streams[13].func)
  2027f2:	4b0d      	ldr	r3, [pc, #52]	; (202828 <Vector150+0x58>)
  2027f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  2027f6:	2b00      	cmp	r3, #0
  2027f8:	d006      	beq.n	202808 <Vector150+0x38>
    dma.streams[13].func(dma.streams[13].param, flags);
  2027fa:	4b0b      	ldr	r3, [pc, #44]	; (202828 <Vector150+0x58>)
  2027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
  2027fe:	4a0a      	ldr	r2, [pc, #40]	; (202828 <Vector150+0x58>)
  202800:	6f12      	ldr	r2, [r2, #112]	; 0x70
  202802:	9901      	ldr	r1, [sp, #4]
  202804:	4610      	mov	r0, r2
  202806:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202808:	f001 f84a 	bl	2038a0 <__dbg_check_leave_isr>
  20280c:	4804      	ldr	r0, [pc, #16]	; (202820 <Vector150+0x50>)
  20280e:	f001 f9e7 	bl	203be0 <__trace_isr_leave>
  202812:	f003 fa75 	bl	205d00 <__port_irq_epilogue>
}
  202816:	bf00      	nop
  202818:	b003      	add	sp, #12
  20281a:	f85d fb04 	ldr.w	pc, [sp], #4
  20281e:	bf00      	nop
  202820:	080061ec 	.word	0x080061ec
  202824:	40026400 	.word	0x40026400
  202828:	20000834 	.word	0x20000834
  20282c:	00000000 	.word	0x00000000

00202830 <Vector154>:
/**
 * @brief   DMA2 stream 6 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
  202830:	b500      	push	{lr}
  202832:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202834:	4812      	ldr	r0, [pc, #72]	; (202880 <Vector154+0x50>)
  202836:	f001 f993 	bl	203b60 <__trace_isr_enter>
  20283a:	f000 fff1 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
  20283e:	4b11      	ldr	r3, [pc, #68]	; (202884 <Vector154+0x54>)
  202840:	685b      	ldr	r3, [r3, #4]
  202842:	0c1b      	lsrs	r3, r3, #16
  202844:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  202848:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 16U;
  20284a:	4a0e      	ldr	r2, [pc, #56]	; (202884 <Vector154+0x54>)
  20284c:	9b01      	ldr	r3, [sp, #4]
  20284e:	041b      	lsls	r3, r3, #16
  202850:	60d3      	str	r3, [r2, #12]
  if (dma.streams[14].func)
  202852:	4b0d      	ldr	r3, [pc, #52]	; (202888 <Vector154+0x58>)
  202854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  202856:	2b00      	cmp	r3, #0
  202858:	d006      	beq.n	202868 <Vector154+0x38>
    dma.streams[14].func(dma.streams[14].param, flags);
  20285a:	4b0b      	ldr	r3, [pc, #44]	; (202888 <Vector154+0x58>)
  20285c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  20285e:	4a0a      	ldr	r2, [pc, #40]	; (202888 <Vector154+0x58>)
  202860:	6f92      	ldr	r2, [r2, #120]	; 0x78
  202862:	9901      	ldr	r1, [sp, #4]
  202864:	4610      	mov	r0, r2
  202866:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  202868:	f001 f81a 	bl	2038a0 <__dbg_check_leave_isr>
  20286c:	4804      	ldr	r0, [pc, #16]	; (202880 <Vector154+0x50>)
  20286e:	f001 f9b7 	bl	203be0 <__trace_isr_leave>
  202872:	f003 fa45 	bl	205d00 <__port_irq_epilogue>
}
  202876:	bf00      	nop
  202878:	b003      	add	sp, #12
  20287a:	f85d fb04 	ldr.w	pc, [sp], #4
  20287e:	bf00      	nop
  202880:	080061f8 	.word	0x080061f8
  202884:	40026400 	.word	0x40026400
  202888:	20000834 	.word	0x20000834
  20288c:	00000000 	.word	0x00000000

00202890 <Vector158>:
/**
 * @brief   DMA2 stream 7 shared interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
  202890:	b500      	push	{lr}
  202892:	b083      	sub	sp, #12
  uint32_t flags;

  OSAL_IRQ_PROLOGUE();
  202894:	4812      	ldr	r0, [pc, #72]	; (2028e0 <Vector158+0x50>)
  202896:	f001 f963 	bl	203b60 <__trace_isr_enter>
  20289a:	f000 ffc1 	bl	203820 <__dbg_check_enter_isr>

  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
  20289e:	4b11      	ldr	r3, [pc, #68]	; (2028e4 <Vector158+0x54>)
  2028a0:	685b      	ldr	r3, [r3, #4]
  2028a2:	0d9b      	lsrs	r3, r3, #22
  2028a4:	f003 033d 	and.w	r3, r3, #61	; 0x3d
  2028a8:	9301      	str	r3, [sp, #4]
  DMA2->HIFCR = flags << 22U;
  2028aa:	4a0e      	ldr	r2, [pc, #56]	; (2028e4 <Vector158+0x54>)
  2028ac:	9b01      	ldr	r3, [sp, #4]
  2028ae:	059b      	lsls	r3, r3, #22
  2028b0:	60d3      	str	r3, [r2, #12]
  if (dma.streams[15].func)
  2028b2:	4b0d      	ldr	r3, [pc, #52]	; (2028e8 <Vector158+0x58>)
  2028b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  2028b6:	2b00      	cmp	r3, #0
  2028b8:	d007      	beq.n	2028ca <Vector158+0x3a>
    dma.streams[15].func(dma.streams[15].param, flags);
  2028ba:	4b0b      	ldr	r3, [pc, #44]	; (2028e8 <Vector158+0x58>)
  2028bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  2028be:	4a0a      	ldr	r2, [pc, #40]	; (2028e8 <Vector158+0x58>)
  2028c0:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
  2028c4:	9901      	ldr	r1, [sp, #4]
  2028c6:	4610      	mov	r0, r2
  2028c8:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
  2028ca:	f000 ffe9 	bl	2038a0 <__dbg_check_leave_isr>
  2028ce:	4804      	ldr	r0, [pc, #16]	; (2028e0 <Vector158+0x50>)
  2028d0:	f001 f986 	bl	203be0 <__trace_isr_leave>
  2028d4:	f003 fa14 	bl	205d00 <__port_irq_epilogue>
}
  2028d8:	bf00      	nop
  2028da:	b003      	add	sp, #12
  2028dc:	f85d fb04 	ldr.w	pc, [sp], #4
  2028e0:	08006204 	.word	0x08006204
  2028e4:	40026400 	.word	0x40026400
  2028e8:	20000834 	.word	0x20000834
  2028ec:	00000000 	.word	0x00000000

002028f0 <dmaInit>:
/**
 * @brief   STM32 DMA helper initialization.
 *
 * @init
 */
void dmaInit(void) {
  2028f0:	b082      	sub	sp, #8
  unsigned i;

  dma.allocated_mask = 0U;
  2028f2:	4b17      	ldr	r3, [pc, #92]	; (202950 <dmaInit+0x60>)
  2028f4:	2200      	movs	r2, #0
  2028f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  2028f8:	2300      	movs	r3, #0
  2028fa:	9301      	str	r3, [sp, #4]
  2028fc:	e012      	b.n	202924 <dmaInit+0x34>
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
  2028fe:	4915      	ldr	r1, [pc, #84]	; (202954 <dmaInit+0x64>)
  202900:	9a01      	ldr	r2, [sp, #4]
  202902:	4613      	mov	r3, r2
  202904:	005b      	lsls	r3, r3, #1
  202906:	4413      	add	r3, r2
  202908:	009b      	lsls	r3, r3, #2
  20290a:	440b      	add	r3, r1
  20290c:	681b      	ldr	r3, [r3, #0]
  20290e:	2200      	movs	r2, #0
  202910:	601a      	str	r2, [r3, #0]
    dma.streams[i].func = NULL;
  202912:	4a0f      	ldr	r2, [pc, #60]	; (202950 <dmaInit+0x60>)
  202914:	9b01      	ldr	r3, [sp, #4]
  202916:	00db      	lsls	r3, r3, #3
  202918:	4413      	add	r3, r2
  20291a:	2200      	movs	r2, #0
  20291c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
  20291e:	9b01      	ldr	r3, [sp, #4]
  202920:	3301      	adds	r3, #1
  202922:	9301      	str	r3, [sp, #4]
  202924:	9b01      	ldr	r3, [sp, #4]
  202926:	2b0f      	cmp	r3, #15
  202928:	d9e9      	bls.n	2028fe <dmaInit+0xe>
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
  20292a:	4b0b      	ldr	r3, [pc, #44]	; (202958 <dmaInit+0x68>)
  20292c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202930:	609a      	str	r2, [r3, #8]
  DMA1->HIFCR = 0xFFFFFFFFU;
  202932:	4b09      	ldr	r3, [pc, #36]	; (202958 <dmaInit+0x68>)
  202934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202938:	60da      	str	r2, [r3, #12]
  DMA2->LIFCR = 0xFFFFFFFFU;
  20293a:	4b08      	ldr	r3, [pc, #32]	; (20295c <dmaInit+0x6c>)
  20293c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202940:	609a      	str	r2, [r3, #8]
  DMA2->HIFCR = 0xFFFFFFFFU;
  202942:	4b06      	ldr	r3, [pc, #24]	; (20295c <dmaInit+0x6c>)
  202944:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202948:	60da      	str	r2, [r3, #12]
}
  20294a:	bf00      	nop
  20294c:	b002      	add	sp, #8
  20294e:	4770      	bx	lr
  202950:	20000834 	.word	0x20000834
  202954:	08006090 	.word	0x08006090
  202958:	40026000 	.word	0x40026000
  20295c:	40026400 	.word	0x40026400

00202960 <dmaStreamAllocI>:
 * @iclass
 */
const stm32_dma_stream_t *dmaStreamAllocI(uint32_t id,
                                          uint32_t priority,
                                          stm32_dmaisr_t func,
                                          void *param) {
  202960:	b500      	push	{lr}
  202962:	b08b      	sub	sp, #44	; 0x2c
  202964:	9003      	str	r0, [sp, #12]
  202966:	9102      	str	r1, [sp, #8]
  202968:	9201      	str	r2, [sp, #4]
  20296a:	9300      	str	r3, [sp, #0]
  uint32_t i, startid, endid;

  osalDbgCheckClassI();
  20296c:	f000 ffd8 	bl	203920 <chDbgCheckClassI>

  if (id < STM32_DMA_STREAMS) {
  202970:	9b03      	ldr	r3, [sp, #12]
  202972:	2b0f      	cmp	r3, #15
  202974:	d806      	bhi.n	202984 <dmaStreamAllocI+0x24>
    startid = id;
  202976:	9b03      	ldr	r3, [sp, #12]
  202978:	9308      	str	r3, [sp, #32]
    endid   = id;
  20297a:	9b03      	ldr	r3, [sp, #12]
  20297c:	9307      	str	r3, [sp, #28]
  else {
    osalDbgCheck(false);
    return NULL;
  }

  for (i = startid; i <= endid; i++) {
  20297e:	9b08      	ldr	r3, [sp, #32]
  202980:	9309      	str	r3, [sp, #36]	; 0x24
  202982:	e07c      	b.n	202a7e <dmaStreamAllocI+0x11e>
    osalDbgCheck(false);
  202984:	4843      	ldr	r0, [pc, #268]	; (202a94 <dmaStreamAllocI+0x134>)
  202986:	f000 fe5b 	bl	203640 <chSysHalt>
    return NULL;
  20298a:	2300      	movs	r3, #0
  20298c:	e07d      	b.n	202a8a <dmaStreamAllocI+0x12a>
    uint32_t mask = (1U << i);
  20298e:	2201      	movs	r2, #1
  202990:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202992:	fa02 f303 	lsl.w	r3, r2, r3
  202996:	9306      	str	r3, [sp, #24]
    if ((dma.allocated_mask & mask) == 0U) {
  202998:	4b3f      	ldr	r3, [pc, #252]	; (202a98 <dmaStreamAllocI+0x138>)
  20299a:	681a      	ldr	r2, [r3, #0]
  20299c:	9b06      	ldr	r3, [sp, #24]
  20299e:	4013      	ands	r3, r2
  2029a0:	2b00      	cmp	r3, #0
  2029a2:	d169      	bne.n	202a78 <dmaStreamAllocI+0x118>
      const stm32_dma_stream_t *dmastp = STM32_DMA_STREAM(i);
  2029a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
  2029a6:	4613      	mov	r3, r2
  2029a8:	005b      	lsls	r3, r3, #1
  2029aa:	4413      	add	r3, r2
  2029ac:	009b      	lsls	r3, r3, #2
  2029ae:	4a3b      	ldr	r2, [pc, #236]	; (202a9c <dmaStreamAllocI+0x13c>)
  2029b0:	4413      	add	r3, r2
  2029b2:	9305      	str	r3, [sp, #20]

      /* Installs the DMA handler.*/
      dma.streams[i].func  = func;
  2029b4:	4a38      	ldr	r2, [pc, #224]	; (202a98 <dmaStreamAllocI+0x138>)
  2029b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2029b8:	00db      	lsls	r3, r3, #3
  2029ba:	4413      	add	r3, r2
  2029bc:	9a01      	ldr	r2, [sp, #4]
  2029be:	605a      	str	r2, [r3, #4]
      dma.streams[i].param = param;
  2029c0:	4a35      	ldr	r2, [pc, #212]	; (202a98 <dmaStreamAllocI+0x138>)
  2029c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  2029c4:	00db      	lsls	r3, r3, #3
  2029c6:	4413      	add	r3, r2
  2029c8:	9a00      	ldr	r2, [sp, #0]
  2029ca:	609a      	str	r2, [r3, #8]
      dma.allocated_mask  |= mask;
  2029cc:	4b32      	ldr	r3, [pc, #200]	; (202a98 <dmaStreamAllocI+0x138>)
  2029ce:	681a      	ldr	r2, [r3, #0]
  2029d0:	9b06      	ldr	r3, [sp, #24]
  2029d2:	4313      	orrs	r3, r2
  2029d4:	4a30      	ldr	r2, [pc, #192]	; (202a98 <dmaStreamAllocI+0x138>)
  2029d6:	6013      	str	r3, [r2, #0]

      /* Enabling DMA clocks required by the current streams set.*/
      if ((STM32_DMA1_STREAMS_MASK & mask) != 0U) {
  2029d8:	9b06      	ldr	r3, [sp, #24]
  2029da:	b2db      	uxtb	r3, r3
  2029dc:	2b00      	cmp	r3, #0
  2029de:	d00d      	beq.n	2029fc <dmaStreamAllocI+0x9c>
        rccEnableDMA1(true);
  2029e0:	4b2f      	ldr	r3, [pc, #188]	; (202aa0 <dmaStreamAllocI+0x140>)
  2029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2029e4:	4a2e      	ldr	r2, [pc, #184]	; (202aa0 <dmaStreamAllocI+0x140>)
  2029e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  2029ea:	6313      	str	r3, [r2, #48]	; 0x30
  2029ec:	4b2c      	ldr	r3, [pc, #176]	; (202aa0 <dmaStreamAllocI+0x140>)
  2029ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  2029f0:	4a2b      	ldr	r2, [pc, #172]	; (202aa0 <dmaStreamAllocI+0x140>)
  2029f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  2029f6:	6513      	str	r3, [r2, #80]	; 0x50
  2029f8:	4b29      	ldr	r3, [pc, #164]	; (202aa0 <dmaStreamAllocI+0x140>)
  2029fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
      }
      if ((STM32_DMA2_STREAMS_MASK & mask) != 0U) {
  2029fc:	9b06      	ldr	r3, [sp, #24]
  2029fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
  202a02:	2b00      	cmp	r3, #0
  202a04:	d00d      	beq.n	202a22 <dmaStreamAllocI+0xc2>
        rccEnableDMA2(true);
  202a06:	4b26      	ldr	r3, [pc, #152]	; (202aa0 <dmaStreamAllocI+0x140>)
  202a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  202a0a:	4a25      	ldr	r2, [pc, #148]	; (202aa0 <dmaStreamAllocI+0x140>)
  202a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  202a10:	6313      	str	r3, [r2, #48]	; 0x30
  202a12:	4b23      	ldr	r3, [pc, #140]	; (202aa0 <dmaStreamAllocI+0x140>)
  202a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  202a16:	4a22      	ldr	r2, [pc, #136]	; (202aa0 <dmaStreamAllocI+0x140>)
  202a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  202a1c:	6513      	str	r3, [r2, #80]	; 0x50
  202a1e:	4b20      	ldr	r3, [pc, #128]	; (202aa0 <dmaStreamAllocI+0x140>)
  202a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
        rccEnableDMAMUX(true);
      }
#endif

      /* Putting the stream in a safe state.*/
      dmaStreamDisable(dmastp);
  202a22:	9b05      	ldr	r3, [sp, #20]
  202a24:	681b      	ldr	r3, [r3, #0]
  202a26:	681a      	ldr	r2, [r3, #0]
  202a28:	9b05      	ldr	r3, [sp, #20]
  202a2a:	681b      	ldr	r3, [r3, #0]
  202a2c:	f022 021f 	bic.w	r2, r2, #31
  202a30:	601a      	str	r2, [r3, #0]
  202a32:	bf00      	nop
  202a34:	9b05      	ldr	r3, [sp, #20]
  202a36:	681b      	ldr	r3, [r3, #0]
  202a38:	681b      	ldr	r3, [r3, #0]
  202a3a:	f003 0301 	and.w	r3, r3, #1
  202a3e:	2b00      	cmp	r3, #0
  202a40:	d1f8      	bne.n	202a34 <dmaStreamAllocI+0xd4>
  202a42:	9b05      	ldr	r3, [sp, #20]
  202a44:	7a5b      	ldrb	r3, [r3, #9]
  202a46:	4619      	mov	r1, r3
  202a48:	9b05      	ldr	r3, [sp, #20]
  202a4a:	685b      	ldr	r3, [r3, #4]
  202a4c:	223d      	movs	r2, #61	; 0x3d
  202a4e:	408a      	lsls	r2, r1
  202a50:	601a      	str	r2, [r3, #0]
      dmastp->stream->CR = STM32_DMA_CR_RESET_VALUE;
  202a52:	9b05      	ldr	r3, [sp, #20]
  202a54:	681b      	ldr	r3, [r3, #0]
  202a56:	2200      	movs	r2, #0
  202a58:	601a      	str	r2, [r3, #0]
      dmastp->stream->FCR = STM32_DMA_FCR_RESET_VALUE;
  202a5a:	9b05      	ldr	r3, [sp, #20]
  202a5c:	681b      	ldr	r3, [r3, #0]
  202a5e:	2221      	movs	r2, #33	; 0x21
  202a60:	615a      	str	r2, [r3, #20]

      /* Enables the associated IRQ vector if a callback is defined.*/
      if (func != NULL) {
  202a62:	9b01      	ldr	r3, [sp, #4]
  202a64:	2b00      	cmp	r3, #0
  202a66:	d005      	beq.n	202a74 <dmaStreamAllocI+0x114>
        nvicEnableVector(dmastp->vector, priority);
  202a68:	9b05      	ldr	r3, [sp, #20]
  202a6a:	7adb      	ldrb	r3, [r3, #11]
  202a6c:	9902      	ldr	r1, [sp, #8]
  202a6e:	4618      	mov	r0, r3
  202a70:	f7fe fe86 	bl	201780 <nvicEnableVector>
      }

      return dmastp;
  202a74:	9b05      	ldr	r3, [sp, #20]
  202a76:	e008      	b.n	202a8a <dmaStreamAllocI+0x12a>
  for (i = startid; i <= endid; i++) {
  202a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202a7a:	3301      	adds	r3, #1
  202a7c:	9309      	str	r3, [sp, #36]	; 0x24
  202a7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  202a80:	9b07      	ldr	r3, [sp, #28]
  202a82:	429a      	cmp	r2, r3
  202a84:	d983      	bls.n	20298e <dmaStreamAllocI+0x2e>
    }
  }

  return NULL;
  202a86:	2300      	movs	r3, #0
  202a88:	bf00      	nop
}
  202a8a:	4618      	mov	r0, r3
  202a8c:	b00b      	add	sp, #44	; 0x2c
  202a8e:	f85d fb04 	ldr.w	pc, [sp], #4
  202a92:	bf00      	nop
  202a94:	08006210 	.word	0x08006210
  202a98:	20000834 	.word	0x20000834
  202a9c:	08006090 	.word	0x08006090
  202aa0:	40023800 	.word	0x40023800
	...

00202ab0 <_pal_lld_init>:

  for (i = 0; i < 16; i++) {
    _pal_init_event(i);
  }
#endif
}
  202ab0:	bf00      	nop
  202ab2:	4770      	bx	lr
	...

00202ac0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
  202ac0:	b08e      	sub	sp, #56	; 0x38
  202ac2:	9003      	str	r0, [sp, #12]
  202ac4:	9102      	str	r1, [sp, #8]
  202ac6:	9201      	str	r2, [sp, #4]

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
  202ac8:	9b01      	ldr	r3, [sp, #4]
  202aca:	f003 0303 	and.w	r3, r3, #3
  202ace:	930d      	str	r3, [sp, #52]	; 0x34
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  202ad0:	9b01      	ldr	r3, [sp, #4]
  202ad2:	089b      	lsrs	r3, r3, #2
  202ad4:	f003 0301 	and.w	r3, r3, #1
  202ad8:	930c      	str	r3, [sp, #48]	; 0x30
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  202ada:	9b01      	ldr	r3, [sp, #4]
  202adc:	08db      	lsrs	r3, r3, #3
  202ade:	f003 0303 	and.w	r3, r3, #3
  202ae2:	930b      	str	r3, [sp, #44]	; 0x2c
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  202ae4:	9b01      	ldr	r3, [sp, #4]
  202ae6:	095b      	lsrs	r3, r3, #5
  202ae8:	f003 0303 	and.w	r3, r3, #3
  202aec:	930a      	str	r3, [sp, #40]	; 0x28
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  202aee:	9b01      	ldr	r3, [sp, #4]
  202af0:	09db      	lsrs	r3, r3, #7
  202af2:	f003 030f 	and.w	r3, r3, #15
  202af6:	9308      	str	r3, [sp, #32]
  uint32_t bit     = 0;
  202af8:	2300      	movs	r3, #0
  202afa:	9309      	str	r3, [sp, #36]	; 0x24
  while (true) {
    if ((mask & 1) != 0) {
  202afc:	9b02      	ldr	r3, [sp, #8]
  202afe:	f003 0301 	and.w	r3, r3, #1
  202b02:	2b00      	cmp	r3, #0
  202b04:	d079      	beq.n	202bfa <_pal_lld_setgroupmode+0x13a>
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
  202b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b08:	f003 0307 	and.w	r3, r3, #7
  202b0c:	009b      	lsls	r3, r3, #2
  202b0e:	9a08      	ldr	r2, [sp, #32]
  202b10:	fa02 f303 	lsl.w	r3, r2, r3
  202b14:	9307      	str	r3, [sp, #28]
      m1 = 1 << bit;
  202b16:	2201      	movs	r2, #1
  202b18:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b1a:	fa02 f303 	lsl.w	r3, r2, r3
  202b1e:	9306      	str	r3, [sp, #24]
      m2 = 3 << (bit * 2);
  202b20:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b22:	005b      	lsls	r3, r3, #1
  202b24:	2203      	movs	r2, #3
  202b26:	fa02 f303 	lsl.w	r3, r2, r3
  202b2a:	9305      	str	r3, [sp, #20]
      m4 = 15 << ((bit & 7) * 4);
  202b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b2e:	f003 0307 	and.w	r3, r3, #7
  202b32:	009b      	lsls	r3, r3, #2
  202b34:	220f      	movs	r2, #15
  202b36:	fa02 f303 	lsl.w	r3, r2, r3
  202b3a:	9304      	str	r3, [sp, #16]
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
  202b3c:	9b03      	ldr	r3, [sp, #12]
  202b3e:	685a      	ldr	r2, [r3, #4]
  202b40:	9b06      	ldr	r3, [sp, #24]
  202b42:	43db      	mvns	r3, r3
  202b44:	401a      	ands	r2, r3
  202b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  202b48:	431a      	orrs	r2, r3
  202b4a:	9b03      	ldr	r3, [sp, #12]
  202b4c:	605a      	str	r2, [r3, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
  202b4e:	9b03      	ldr	r3, [sp, #12]
  202b50:	689a      	ldr	r2, [r3, #8]
  202b52:	9b05      	ldr	r3, [sp, #20]
  202b54:	43db      	mvns	r3, r3
  202b56:	401a      	ands	r2, r3
  202b58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  202b5a:	431a      	orrs	r2, r3
  202b5c:	9b03      	ldr	r3, [sp, #12]
  202b5e:	609a      	str	r2, [r3, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
  202b60:	9b03      	ldr	r3, [sp, #12]
  202b62:	68da      	ldr	r2, [r3, #12]
  202b64:	9b05      	ldr	r3, [sp, #20]
  202b66:	43db      	mvns	r3, r3
  202b68:	401a      	ands	r2, r3
  202b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  202b6c:	431a      	orrs	r2, r3
  202b6e:	9b03      	ldr	r3, [sp, #12]
  202b70:	60da      	str	r2, [r3, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
  202b72:	9b01      	ldr	r3, [sp, #4]
  202b74:	f003 0303 	and.w	r3, r3, #3
  202b78:	2b02      	cmp	r3, #2
  202b7a:	d11f      	bne.n	202bbc <_pal_lld_setgroupmode+0xfc>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
  202b7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202b7e:	2b07      	cmp	r3, #7
  202b80:	d809      	bhi.n	202b96 <_pal_lld_setgroupmode+0xd6>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  202b82:	9b03      	ldr	r3, [sp, #12]
  202b84:	6a1a      	ldr	r2, [r3, #32]
  202b86:	9b04      	ldr	r3, [sp, #16]
  202b88:	43db      	mvns	r3, r3
  202b8a:	401a      	ands	r2, r3
  202b8c:	9b07      	ldr	r3, [sp, #28]
  202b8e:	431a      	orrs	r2, r3
  202b90:	9b03      	ldr	r3, [sp, #12]
  202b92:	621a      	str	r2, [r3, #32]
  202b94:	e008      	b.n	202ba8 <_pal_lld_setgroupmode+0xe8>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  202b96:	9b03      	ldr	r3, [sp, #12]
  202b98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  202b9a:	9b04      	ldr	r3, [sp, #16]
  202b9c:	43db      	mvns	r3, r3
  202b9e:	401a      	ands	r2, r3
  202ba0:	9b07      	ldr	r3, [sp, #28]
  202ba2:	431a      	orrs	r2, r3
  202ba4:	9b03      	ldr	r3, [sp, #12]
  202ba6:	625a      	str	r2, [r3, #36]	; 0x24
        port->MODER   = (port->MODER & ~m2) | moder;
  202ba8:	9b03      	ldr	r3, [sp, #12]
  202baa:	681a      	ldr	r2, [r3, #0]
  202bac:	9b05      	ldr	r3, [sp, #20]
  202bae:	43db      	mvns	r3, r3
  202bb0:	401a      	ands	r2, r3
  202bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  202bb4:	431a      	orrs	r2, r3
  202bb6:	9b03      	ldr	r3, [sp, #12]
  202bb8:	601a      	str	r2, [r3, #0]
  202bba:	e01e      	b.n	202bfa <_pal_lld_setgroupmode+0x13a>
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
  202bbc:	9b03      	ldr	r3, [sp, #12]
  202bbe:	681a      	ldr	r2, [r3, #0]
  202bc0:	9b05      	ldr	r3, [sp, #20]
  202bc2:	43db      	mvns	r3, r3
  202bc4:	401a      	ands	r2, r3
  202bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  202bc8:	431a      	orrs	r2, r3
  202bca:	9b03      	ldr	r3, [sp, #12]
  202bcc:	601a      	str	r2, [r3, #0]
        if (bit < 8)
  202bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202bd0:	2b07      	cmp	r3, #7
  202bd2:	d809      	bhi.n	202be8 <_pal_lld_setgroupmode+0x128>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
  202bd4:	9b03      	ldr	r3, [sp, #12]
  202bd6:	6a1a      	ldr	r2, [r3, #32]
  202bd8:	9b04      	ldr	r3, [sp, #16]
  202bda:	43db      	mvns	r3, r3
  202bdc:	401a      	ands	r2, r3
  202bde:	9b07      	ldr	r3, [sp, #28]
  202be0:	431a      	orrs	r2, r3
  202be2:	9b03      	ldr	r3, [sp, #12]
  202be4:	621a      	str	r2, [r3, #32]
  202be6:	e008      	b.n	202bfa <_pal_lld_setgroupmode+0x13a>
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
  202be8:	9b03      	ldr	r3, [sp, #12]
  202bea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
  202bec:	9b04      	ldr	r3, [sp, #16]
  202bee:	43db      	mvns	r3, r3
  202bf0:	401a      	ands	r2, r3
  202bf2:	9b07      	ldr	r3, [sp, #28]
  202bf4:	431a      	orrs	r2, r3
  202bf6:	9b03      	ldr	r3, [sp, #12]
  202bf8:	625a      	str	r2, [r3, #36]	; 0x24
      }
    }
    mask >>= 1;
  202bfa:	9b02      	ldr	r3, [sp, #8]
  202bfc:	085b      	lsrs	r3, r3, #1
  202bfe:	9302      	str	r3, [sp, #8]
    if (!mask)
  202c00:	9b02      	ldr	r3, [sp, #8]
  202c02:	2b00      	cmp	r3, #0
  202c04:	d00f      	beq.n	202c26 <_pal_lld_setgroupmode+0x166>
      return;
    otyper <<= 1;
  202c06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  202c08:	005b      	lsls	r3, r3, #1
  202c0a:	930c      	str	r3, [sp, #48]	; 0x30
    ospeedr <<= 2;
  202c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  202c0e:	009b      	lsls	r3, r3, #2
  202c10:	930b      	str	r3, [sp, #44]	; 0x2c
    pupdr <<= 2;
  202c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  202c14:	009b      	lsls	r3, r3, #2
  202c16:	930a      	str	r3, [sp, #40]	; 0x28
    moder <<= 2;
  202c18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  202c1a:	009b      	lsls	r3, r3, #2
  202c1c:	930d      	str	r3, [sp, #52]	; 0x34
    bit++;
  202c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  202c20:	3301      	adds	r3, #1
  202c22:	9309      	str	r3, [sp, #36]	; 0x24
    if ((mask & 1) != 0) {
  202c24:	e76a      	b.n	202afc <_pal_lld_setgroupmode+0x3c>
      return;
  202c26:	bf00      	nop
  }
}
  202c28:	b00e      	add	sp, #56	; 0x38
  202c2a:	4770      	bx	lr
  202c2c:	0000      	movs	r0, r0
	...

00202c30 <chSysLockFromISR.lto_priv.1>:
static inline void chSysLockFromISR(void) {
  202c30:	b500      	push	{lr}
  202c32:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  202c34:	b672      	cpsid	i
}
  202c36:	bf00      	nop
  202c38:	2330      	movs	r3, #48	; 0x30
  202c3a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202c3c:	9b01      	ldr	r3, [sp, #4]
  202c3e:	f383 8811 	msr	BASEPRI, r3
}
  202c42:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  202c44:	b662      	cpsie	i
}
  202c46:	bf00      	nop
}
  202c48:	bf00      	nop
}
  202c4a:	bf00      	nop
  __dbg_check_lock_from_isr();
  202c4c:	f000 fd98 	bl	203780 <__dbg_check_lock_from_isr>
}
  202c50:	bf00      	nop
  202c52:	b003      	add	sp, #12
  202c54:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202c60 <chSysUnlockFromISR.lto_priv.1>:
static inline void chSysUnlockFromISR(void) {
  202c60:	b500      	push	{lr}
  202c62:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  202c64:	f000 fdb4 	bl	2037d0 <__dbg_check_unlock_from_isr>
  202c68:	2300      	movs	r3, #0
  202c6a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202c6c:	9b01      	ldr	r3, [sp, #4]
  202c6e:	f383 8811 	msr	BASEPRI, r3
}
  202c72:	bf00      	nop
}
  202c74:	bf00      	nop
}
  202c76:	bf00      	nop
}
  202c78:	bf00      	nop
  202c7a:	b003      	add	sp, #12
  202c7c:	f85d fb04 	ldr.w	pc, [sp], #4

00202c80 <osalSysLockFromISR.lto_priv.1>:
static inline void osalSysLockFromISR(void) {
  202c80:	b508      	push	{r3, lr}
  chSysLockFromISR();
  202c82:	f7ff ffd5 	bl	202c30 <chSysLockFromISR.lto_priv.1>
}
  202c86:	bf00      	nop
  202c88:	bd08      	pop	{r3, pc}
  202c8a:	bf00      	nop
  202c8c:	0000      	movs	r0, r0
	...

00202c90 <osalSysUnlockFromISR.lto_priv.1>:
static inline void osalSysUnlockFromISR(void) {
  202c90:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  202c92:	f7ff ffe5 	bl	202c60 <chSysUnlockFromISR.lto_priv.1>
}
  202c96:	bf00      	nop
  202c98:	bd08      	pop	{r3, pc}
  202c9a:	bf00      	nop
  202c9c:	0000      	movs	r0, r0
	...

00202ca0 <osalOsTimerHandlerI>:
static inline void osalOsTimerHandlerI(void) {
  202ca0:	b508      	push	{r3, lr}
  chSysTimerHandlerI();
  202ca2:	f000 fd05 	bl	2036b0 <chSysTimerHandlerI>
}
  202ca6:	bf00      	nop
  202ca8:	bd08      	pop	{r3, pc}
  202caa:	bf00      	nop
  202cac:	0000      	movs	r0, r0
	...

00202cb0 <st_lld_init>:
                "clock rounding error");
  osalDbgAssert(((ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1U) < 0x10000,
                "clock prescaler overflow");

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
  202cb0:	4b1b      	ldr	r3, [pc, #108]	; (202d20 <st_lld_init+0x70>)
  202cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  202cb4:	4a1a      	ldr	r2, [pc, #104]	; (202d20 <st_lld_init+0x70>)
  202cb6:	f043 0301 	orr.w	r3, r3, #1
  202cba:	6413      	str	r3, [r2, #64]	; 0x40
  202cbc:	4b18      	ldr	r3, [pc, #96]	; (202d20 <st_lld_init+0x70>)
  202cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  202cc0:	4a17      	ldr	r2, [pc, #92]	; (202d20 <st_lld_init+0x70>)
  202cc2:	f043 0301 	orr.w	r3, r3, #1
  202cc6:	6613      	str	r3, [r2, #96]	; 0x60
  202cc8:	4b15      	ldr	r3, [pc, #84]	; (202d20 <st_lld_init+0x70>)
  202cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
  202ccc:	4b15      	ldr	r3, [pc, #84]	; (202d24 <st_lld_init+0x74>)
  202cce:	689b      	ldr	r3, [r3, #8]
  202cd0:	4a14      	ldr	r2, [pc, #80]	; (202d24 <st_lld_init+0x74>)
  202cd2:	f043 0301 	orr.w	r3, r3, #1
  202cd6:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
  202cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202cdc:	f642 222f 	movw	r2, #10799	; 0x2a2f
  202ce0:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
  202ce2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202ce6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  202cea:	62da      	str	r2, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
  202cec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202cf0:	2200      	movs	r2, #0
  202cf2:	619a      	str	r2, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
  202cf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202cf8:	2200      	movs	r2, #0
  202cfa:	635a      	str	r2, [r3, #52]	; 0x34
  STM32_ST_TIM->CCR[2] = 0;
#endif
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  202cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202d00:	2200      	movs	r2, #0
  202d02:	60da      	str	r2, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
  202d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202d08:	2200      	movs	r2, #0
  202d0a:	605a      	str	r2, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
  202d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202d10:	2201      	movs	r2, #1
  202d12:	615a      	str	r2, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
  202d14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202d18:	2201      	movs	r2, #1
  202d1a:	601a      	str	r2, [r3, #0]
                  SysTick_CTRL_TICKINT_Msk;

  /* IRQ enabled.*/
  nvicSetSystemHandlerPriority(HANDLER_SYSTICK, STM32_ST_IRQ_PRIORITY);
#endif /* OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC */
}
  202d1c:	bf00      	nop
  202d1e:	4770      	bx	lr
  202d20:	40023800 	.word	0x40023800
  202d24:	e0042000 	.word	0xe0042000
	...

00202d30 <st_lld_serve_interrupt>:

/**
 * @brief   IRQ handling code.
 */
void st_lld_serve_interrupt(void) {
  202d30:	b500      	push	{lr}
  202d32:	b083      	sub	sp, #12
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;
  202d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  202d38:	9301      	str	r3, [sp, #4]

  sr  = timp->SR;
  202d3a:	9b01      	ldr	r3, [sp, #4]
  202d3c:	691b      	ldr	r3, [r3, #16]
  202d3e:	9300      	str	r3, [sp, #0]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
  202d40:	9b01      	ldr	r3, [sp, #4]
  202d42:	68db      	ldr	r3, [r3, #12]
  202d44:	b2db      	uxtb	r3, r3
  202d46:	9a00      	ldr	r2, [sp, #0]
  202d48:	4013      	ands	r3, r2
  202d4a:	9300      	str	r3, [sp, #0]
  timp->SR = ~sr;
  202d4c:	9b00      	ldr	r3, [sp, #0]
  202d4e:	43da      	mvns	r2, r3
  202d50:	9b01      	ldr	r3, [sp, #4]
  202d52:	611a      	str	r2, [r3, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
  202d54:	9b00      	ldr	r3, [sp, #0]
  202d56:	f003 0302 	and.w	r3, r3, #2
  202d5a:	2b00      	cmp	r3, #0
  202d5c:	d005      	beq.n	202d6a <st_lld_serve_interrupt+0x3a>
#endif
  {
    osalSysLockFromISR();
  202d5e:	f7ff ff8f 	bl	202c80 <osalSysLockFromISR.lto_priv.1>
    osalOsTimerHandlerI();
  202d62:	f7ff ff9d 	bl	202ca0 <osalOsTimerHandlerI>
    osalSysUnlockFromISR();
  202d66:	f7ff ff93 	bl	202c90 <osalSysUnlockFromISR.lto_priv.1>
      st_callbacks[3](3U);
    }
  }
#endif
#endif
}
  202d6a:	bf00      	nop
  202d6c:	b003      	add	sp, #12
  202d6e:	f85d fb04 	ldr.w	pc, [sp], #4
  202d72:	bf00      	nop
	...

00202d80 <gpt_lld_init>:
/**
 * @brief   Low level GPT driver initialization.
 *
 * @notapi
 */
void gpt_lld_init(void) {
  202d80:	b508      	push	{r3, lr}
  gptObjectInit(&GPTD3);
#endif

#if STM32_GPT_USE_TIM4
  /* Driver initialization.*/
  GPTD4.tim = STM32_TIM4;
  202d82:	4b04      	ldr	r3, [pc, #16]	; (202d94 <gpt_lld_init+0x14>)
  202d84:	4a04      	ldr	r2, [pc, #16]	; (202d98 <gpt_lld_init+0x18>)
  202d86:	60da      	str	r2, [r3, #12]
  gptObjectInit(&GPTD4);
  202d88:	4802      	ldr	r0, [pc, #8]	; (202d94 <gpt_lld_init+0x14>)
  202d8a:	f7fe fa59 	bl	201240 <gptObjectInit>
#if STM32_GPT_USE_TIM22
  /* Driver initialization.*/
  GPTD22.tim = STM32_TIM22;
  gptObjectInit(&GPTD22);
#endif
}
  202d8e:	bf00      	nop
  202d90:	bd08      	pop	{r3, pc}
  202d92:	bf00      	nop
  202d94:	200008b8 	.word	0x200008b8
  202d98:	40000800 	.word	0x40000800
  202d9c:	00000000 	.word	0x00000000

00202da0 <gpt_lld_start>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_start(GPTDriver *gptp) {
  202da0:	b500      	push	{lr}
  202da2:	b085      	sub	sp, #20
  202da4:	9001      	str	r0, [sp, #4]
  uint16_t psc;

  if (gptp->state == GPT_STOP) {
  202da6:	9b01      	ldr	r3, [sp, #4]
  202da8:	781b      	ldrb	r3, [r3, #0]
  202daa:	2b01      	cmp	r3, #1
  202dac:	d122      	bne.n	202df4 <gpt_lld_start+0x54>
#endif
    }
#endif

#if STM32_GPT_USE_TIM4
    if (&GPTD4 == gptp) {
  202dae:	9b01      	ldr	r3, [sp, #4]
  202db0:	4a30      	ldr	r2, [pc, #192]	; (202e74 <gpt_lld_start+0xd4>)
  202db2:	4293      	cmp	r3, r2
  202db4:	d11e      	bne.n	202df4 <gpt_lld_start+0x54>
      rccEnableTIM4(true);
  202db6:	4b30      	ldr	r3, [pc, #192]	; (202e78 <gpt_lld_start+0xd8>)
  202db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  202dba:	4a2f      	ldr	r2, [pc, #188]	; (202e78 <gpt_lld_start+0xd8>)
  202dbc:	f043 0304 	orr.w	r3, r3, #4
  202dc0:	6413      	str	r3, [r2, #64]	; 0x40
  202dc2:	4b2d      	ldr	r3, [pc, #180]	; (202e78 <gpt_lld_start+0xd8>)
  202dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  202dc6:	4a2c      	ldr	r2, [pc, #176]	; (202e78 <gpt_lld_start+0xd8>)
  202dc8:	f043 0304 	orr.w	r3, r3, #4
  202dcc:	6613      	str	r3, [r2, #96]	; 0x60
  202dce:	4b2a      	ldr	r3, [pc, #168]	; (202e78 <gpt_lld_start+0xd8>)
  202dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
      rccResetTIM4();
  202dd2:	4b29      	ldr	r3, [pc, #164]	; (202e78 <gpt_lld_start+0xd8>)
  202dd4:	6a1b      	ldr	r3, [r3, #32]
  202dd6:	4a28      	ldr	r2, [pc, #160]	; (202e78 <gpt_lld_start+0xd8>)
  202dd8:	f043 0304 	orr.w	r3, r3, #4
  202ddc:	6213      	str	r3, [r2, #32]
  202dde:	4b26      	ldr	r3, [pc, #152]	; (202e78 <gpt_lld_start+0xd8>)
  202de0:	6a1b      	ldr	r3, [r3, #32]
  202de2:	4a25      	ldr	r2, [pc, #148]	; (202e78 <gpt_lld_start+0xd8>)
  202de4:	f023 0304 	bic.w	r3, r3, #4
  202de8:	6213      	str	r3, [r2, #32]
  202dea:	4b23      	ldr	r3, [pc, #140]	; (202e78 <gpt_lld_start+0xd8>)
  202dec:	6a1b      	ldr	r3, [r3, #32]
      nvicEnableVector(STM32_TIM4_NUMBER, STM32_GPT_TIM4_IRQ_PRIORITY);
#endif
#if defined(STM32_TIM4CLK)
      gptp->clock = STM32_TIM4CLK;
#else
      gptp->clock = STM32_TIMCLK1;
  202dee:	9b01      	ldr	r3, [sp, #4]
  202df0:	4a22      	ldr	r2, [pc, #136]	; (202e7c <gpt_lld_start+0xdc>)
  202df2:	609a      	str	r2, [r3, #8]
    }
#endif
  }

  /* Prescaler value calculation.*/
  psc = (uint16_t)((gptp->clock / gptp->config->frequency) - 1);
  202df4:	9b01      	ldr	r3, [sp, #4]
  202df6:	689a      	ldr	r2, [r3, #8]
  202df8:	9b01      	ldr	r3, [sp, #4]
  202dfa:	685b      	ldr	r3, [r3, #4]
  202dfc:	681b      	ldr	r3, [r3, #0]
  202dfe:	fbb2 f3f3 	udiv	r3, r2, r3
  202e02:	b29b      	uxth	r3, r3
  202e04:	3b01      	subs	r3, #1
  202e06:	f8ad 300e 	strh.w	r3, [sp, #14]
  osalDbgAssert(((uint32_t)(psc + 1) * gptp->config->frequency) == gptp->clock,
  202e0a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  202e0e:	3301      	adds	r3, #1
  202e10:	461a      	mov	r2, r3
  202e12:	9b01      	ldr	r3, [sp, #4]
  202e14:	685b      	ldr	r3, [r3, #4]
  202e16:	681b      	ldr	r3, [r3, #0]
  202e18:	fb03 f202 	mul.w	r2, r3, r2
  202e1c:	9b01      	ldr	r3, [sp, #4]
  202e1e:	689b      	ldr	r3, [r3, #8]
  202e20:	429a      	cmp	r2, r3
  202e22:	bf14      	ite	ne
  202e24:	2301      	movne	r3, #1
  202e26:	2300      	moveq	r3, #0
  202e28:	b2db      	uxtb	r3, r3
  202e2a:	2b00      	cmp	r3, #0
  202e2c:	d002      	beq.n	202e34 <gpt_lld_start+0x94>
  202e2e:	4814      	ldr	r0, [pc, #80]	; (202e80 <gpt_lld_start+0xe0>)
  202e30:	f000 fc06 	bl	203640 <chSysHalt>
                "invalid frequency");

  /* Timer configuration.*/
  gptp->tim->CR1  = 0U;                         /* Initially stopped.       */
  202e34:	9b01      	ldr	r3, [sp, #4]
  202e36:	68db      	ldr	r3, [r3, #12]
  202e38:	2200      	movs	r2, #0
  202e3a:	601a      	str	r2, [r3, #0]
  gptp->tim->CR2  = gptp->config->cr2;
  202e3c:	9b01      	ldr	r3, [sp, #4]
  202e3e:	685a      	ldr	r2, [r3, #4]
  202e40:	9b01      	ldr	r3, [sp, #4]
  202e42:	68db      	ldr	r3, [r3, #12]
  202e44:	6892      	ldr	r2, [r2, #8]
  202e46:	605a      	str	r2, [r3, #4]
  gptp->tim->PSC  = psc;                        /* Prescaler value.         */
  202e48:	9b01      	ldr	r3, [sp, #4]
  202e4a:	68db      	ldr	r3, [r3, #12]
  202e4c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
  202e50:	629a      	str	r2, [r3, #40]	; 0x28
  gptp->tim->SR   = 0U;                         /* Clear pending IRQs.      */
  202e52:	9b01      	ldr	r3, [sp, #4]
  202e54:	68db      	ldr	r3, [r3, #12]
  202e56:	2200      	movs	r2, #0
  202e58:	611a      	str	r2, [r3, #16]
  gptp->tim->DIER = gptp->config->dier &        /* DMA-related DIER bits.   */
  202e5a:	9b01      	ldr	r3, [sp, #4]
  202e5c:	685b      	ldr	r3, [r3, #4]
  202e5e:	68da      	ldr	r2, [r3, #12]
  202e60:	9b01      	ldr	r3, [sp, #4]
  202e62:	68db      	ldr	r3, [r3, #12]
  202e64:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  202e68:	60da      	str	r2, [r3, #12]
                    ~STM32_TIM_DIER_IRQ_MASK;
}
  202e6a:	bf00      	nop
  202e6c:	b005      	add	sp, #20
  202e6e:	f85d fb04 	ldr.w	pc, [sp], #4
  202e72:	bf00      	nop
  202e74:	200008b8 	.word	0x200008b8
  202e78:	40023800 	.word	0x40023800
  202e7c:	066ff300 	.word	0x066ff300
  202e80:	08006220 	.word	0x08006220
	...

00202e90 <gpt_lld_start_timer>:
 * @param[in] gptp      pointer to the @p GPTDriver object
 * @param[in] interval  period in ticks
 *
 * @notapi
 */
void gpt_lld_start_timer(GPTDriver *gptp, gptcnt_t interval) {
  202e90:	b500      	push	{lr}
  202e92:	b083      	sub	sp, #12
  202e94:	9001      	str	r0, [sp, #4]
  202e96:	9100      	str	r1, [sp, #0]

  osalDbgAssert(interval > (gptcnt_t)0, "invalid interval");
  202e98:	9b00      	ldr	r3, [sp, #0]
  202e9a:	2b00      	cmp	r3, #0
  202e9c:	bf0c      	ite	eq
  202e9e:	2301      	moveq	r3, #1
  202ea0:	2300      	movne	r3, #0
  202ea2:	b2db      	uxtb	r3, r3
  202ea4:	2b00      	cmp	r3, #0
  202ea6:	d002      	beq.n	202eae <gpt_lld_start_timer+0x1e>
  202ea8:	4814      	ldr	r0, [pc, #80]	; (202efc <gpt_lld_start_timer+0x6c>)
  202eaa:	f000 fbc9 	bl	203640 <chSysHalt>

  gptp->tim->ARR = (uint32_t)(interval - 1U);   /* Time constant.           */
  202eae:	9b01      	ldr	r3, [sp, #4]
  202eb0:	68db      	ldr	r3, [r3, #12]
  202eb2:	9a00      	ldr	r2, [sp, #0]
  202eb4:	3a01      	subs	r2, #1
  202eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  gptp->tim->EGR = STM32_TIM_EGR_UG;            /* Update event.            */
  202eb8:	9b01      	ldr	r3, [sp, #4]
  202eba:	68db      	ldr	r3, [r3, #12]
  202ebc:	2201      	movs	r2, #1
  202ebe:	615a      	str	r2, [r3, #20]
  gptp->tim->CNT = 0U;                          /* Reset counter.           */
  202ec0:	9b01      	ldr	r3, [sp, #4]
  202ec2:	68db      	ldr	r3, [r3, #12]
  202ec4:	2200      	movs	r2, #0
  202ec6:	625a      	str	r2, [r3, #36]	; 0x24

  /* NOTE: After generating the UG event it takes several clock cycles before
     SR bit 0 goes to 1. This is why the clearing of CNT has been inserted
     before the clearing of SR, to give it some time.*/
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
  202ec8:	9b01      	ldr	r3, [sp, #4]
  202eca:	68db      	ldr	r3, [r3, #12]
  202ecc:	2200      	movs	r2, #0
  202ece:	611a      	str	r2, [r3, #16]
  if (NULL != gptp->config->callback)
  202ed0:	9b01      	ldr	r3, [sp, #4]
  202ed2:	685b      	ldr	r3, [r3, #4]
  202ed4:	685b      	ldr	r3, [r3, #4]
  202ed6:	2b00      	cmp	r3, #0
  202ed8:	d007      	beq.n	202eea <gpt_lld_start_timer+0x5a>
    gptp->tim->DIER |= STM32_TIM_DIER_UIE;      /* Update Event IRQ enabled.*/
  202eda:	9b01      	ldr	r3, [sp, #4]
  202edc:	68db      	ldr	r3, [r3, #12]
  202ede:	68da      	ldr	r2, [r3, #12]
  202ee0:	9b01      	ldr	r3, [sp, #4]
  202ee2:	68db      	ldr	r3, [r3, #12]
  202ee4:	f042 0201 	orr.w	r2, r2, #1
  202ee8:	60da      	str	r2, [r3, #12]
  gptp->tim->CR1 = STM32_TIM_CR1_ARPE | STM32_TIM_CR1_URS | STM32_TIM_CR1_CEN;
  202eea:	9b01      	ldr	r3, [sp, #4]
  202eec:	68db      	ldr	r3, [r3, #12]
  202eee:	2285      	movs	r2, #133	; 0x85
  202ef0:	601a      	str	r2, [r3, #0]
}
  202ef2:	bf00      	nop
  202ef4:	b003      	add	sp, #12
  202ef6:	f85d fb04 	ldr.w	pc, [sp], #4
  202efa:	bf00      	nop
  202efc:	08006230 	.word	0x08006230

00202f00 <gpt_lld_stop_timer>:
 *
 * @param[in] gptp      pointer to the @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {
  202f00:	b082      	sub	sp, #8
  202f02:	9001      	str	r0, [sp, #4]

  gptp->tim->CR1 = 0U;                          /* Initially stopped.       */
  202f04:	9b01      	ldr	r3, [sp, #4]
  202f06:	68db      	ldr	r3, [r3, #12]
  202f08:	2200      	movs	r2, #0
  202f0a:	601a      	str	r2, [r3, #0]
  gptp->tim->SR  = 0U;                          /* Clear pending IRQs.      */
  202f0c:	9b01      	ldr	r3, [sp, #4]
  202f0e:	68db      	ldr	r3, [r3, #12]
  202f10:	2200      	movs	r2, #0
  202f12:	611a      	str	r2, [r3, #16]

  /* All interrupts disabled.*/
  gptp->tim->DIER &= ~STM32_TIM_DIER_IRQ_MASK;
  202f14:	9b01      	ldr	r3, [sp, #4]
  202f16:	68db      	ldr	r3, [r3, #12]
  202f18:	68da      	ldr	r2, [r3, #12]
  202f1a:	9b01      	ldr	r3, [sp, #4]
  202f1c:	68db      	ldr	r3, [r3, #12]
  202f1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
  202f22:	60da      	str	r2, [r3, #12]
}
  202f24:	bf00      	nop
  202f26:	b002      	add	sp, #8
  202f28:	4770      	bx	lr
  202f2a:	bf00      	nop
  202f2c:	0000      	movs	r0, r0
	...

00202f30 <gpt_lld_serve_interrupt>:
 *
 * @param[in] gptp      pointer to a @p GPTDriver object
 *
 * @notapi
 */
void gpt_lld_serve_interrupt(GPTDriver *gptp) {
  202f30:	b500      	push	{lr}
  202f32:	b085      	sub	sp, #20
  202f34:	9001      	str	r0, [sp, #4]
  uint32_t sr;

  sr  = gptp->tim->SR;
  202f36:	9b01      	ldr	r3, [sp, #4]
  202f38:	68db      	ldr	r3, [r3, #12]
  202f3a:	691b      	ldr	r3, [r3, #16]
  202f3c:	9303      	str	r3, [sp, #12]
  sr &= gptp->tim->DIER & STM32_TIM_DIER_IRQ_MASK;
  202f3e:	9b01      	ldr	r3, [sp, #4]
  202f40:	68db      	ldr	r3, [r3, #12]
  202f42:	68db      	ldr	r3, [r3, #12]
  202f44:	b2db      	uxtb	r3, r3
  202f46:	9a03      	ldr	r2, [sp, #12]
  202f48:	4013      	ands	r3, r2
  202f4a:	9303      	str	r3, [sp, #12]
  gptp->tim->SR = ~sr;
  202f4c:	9b01      	ldr	r3, [sp, #4]
  202f4e:	68db      	ldr	r3, [r3, #12]
  202f50:	9a03      	ldr	r2, [sp, #12]
  202f52:	43d2      	mvns	r2, r2
  202f54:	611a      	str	r2, [r3, #16]
  if ((sr & STM32_TIM_SR_UIF) != 0) {
  202f56:	9b03      	ldr	r3, [sp, #12]
  202f58:	f003 0301 	and.w	r3, r3, #1
  202f5c:	2b00      	cmp	r3, #0
  202f5e:	d013      	beq.n	202f88 <gpt_lld_serve_interrupt+0x58>
    _gpt_isr_invoke_cb(gptp);
  202f60:	9b01      	ldr	r3, [sp, #4]
  202f62:	781b      	ldrb	r3, [r3, #0]
  202f64:	2b04      	cmp	r3, #4
  202f66:	d105      	bne.n	202f74 <gpt_lld_serve_interrupt+0x44>
  202f68:	9b01      	ldr	r3, [sp, #4]
  202f6a:	2202      	movs	r2, #2
  202f6c:	701a      	strb	r2, [r3, #0]
  202f6e:	9801      	ldr	r0, [sp, #4]
  202f70:	f7ff ffc6 	bl	202f00 <gpt_lld_stop_timer>
  202f74:	9b01      	ldr	r3, [sp, #4]
  202f76:	685b      	ldr	r3, [r3, #4]
  202f78:	685b      	ldr	r3, [r3, #4]
  202f7a:	2b00      	cmp	r3, #0
  202f7c:	d004      	beq.n	202f88 <gpt_lld_serve_interrupt+0x58>
  202f7e:	9b01      	ldr	r3, [sp, #4]
  202f80:	685b      	ldr	r3, [r3, #4]
  202f82:	685b      	ldr	r3, [r3, #4]
  202f84:	9801      	ldr	r0, [sp, #4]
  202f86:	4798      	blx	r3
  }
}
  202f88:	bf00      	nop
  202f8a:	b005      	add	sp, #20
  202f8c:	f85d fb04 	ldr.w	pc, [sp], #4

00202f90 <chSysLockFromISR.lto_priv.2>:
static inline void chSysLockFromISR(void) {
  202f90:	b500      	push	{lr}
  202f92:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  202f94:	b672      	cpsid	i
}
  202f96:	bf00      	nop
  202f98:	2330      	movs	r3, #48	; 0x30
  202f9a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202f9c:	9b01      	ldr	r3, [sp, #4]
  202f9e:	f383 8811 	msr	BASEPRI, r3
}
  202fa2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  202fa4:	b662      	cpsie	i
}
  202fa6:	bf00      	nop
}
  202fa8:	bf00      	nop
}
  202faa:	bf00      	nop
  __dbg_check_lock_from_isr();
  202fac:	f000 fbe8 	bl	203780 <__dbg_check_lock_from_isr>
}
  202fb0:	bf00      	nop
  202fb2:	b003      	add	sp, #12
  202fb4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00202fc0 <chSysUnlockFromISR.lto_priv.2>:
static inline void chSysUnlockFromISR(void) {
  202fc0:	b500      	push	{lr}
  202fc2:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  202fc4:	f000 fc04 	bl	2037d0 <__dbg_check_unlock_from_isr>
  202fc8:	2300      	movs	r3, #0
  202fca:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  202fcc:	9b01      	ldr	r3, [sp, #4]
  202fce:	f383 8811 	msr	BASEPRI, r3
}
  202fd2:	bf00      	nop
}
  202fd4:	bf00      	nop
}
  202fd6:	bf00      	nop
}
  202fd8:	bf00      	nop
  202fda:	b003      	add	sp, #12
  202fdc:	f85d fb04 	ldr.w	pc, [sp], #4

00202fe0 <osalSysLockFromISR.lto_priv.2>:
static inline void osalSysLockFromISR(void) {
  202fe0:	b508      	push	{r3, lr}
  chSysLockFromISR();
  202fe2:	f7ff ffd5 	bl	202f90 <chSysLockFromISR.lto_priv.2>
}
  202fe6:	bf00      	nop
  202fe8:	bd08      	pop	{r3, pc}
  202fea:	bf00      	nop
  202fec:	0000      	movs	r0, r0
	...

00202ff0 <osalSysUnlockFromISR.lto_priv.2>:
static inline void osalSysUnlockFromISR(void) {
  202ff0:	b508      	push	{r3, lr}
  chSysUnlockFromISR();
  202ff2:	f7ff ffe5 	bl	202fc0 <chSysUnlockFromISR.lto_priv.2>
}
  202ff6:	bf00      	nop
  202ff8:	bd08      	pop	{r3, pc}
  202ffa:	bf00      	nop
  202ffc:	0000      	movs	r0, r0
	...

00203000 <osalEventBroadcastFlagsI.lto_priv.2>:
                                            eventflags_t flags) {
  203000:	b500      	push	{lr}
  203002:	b083      	sub	sp, #12
  203004:	9001      	str	r0, [sp, #4]
  203006:	9100      	str	r1, [sp, #0]
  chEvtBroadcastFlagsI(esp, flags);
  203008:	9900      	ldr	r1, [sp, #0]
  20300a:	9801      	ldr	r0, [sp, #4]
  20300c:	f002 fbf0 	bl	2057f0 <chEvtBroadcastFlagsI>
}
  203010:	bf00      	nop
  203012:	b003      	add	sp, #12
  203014:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203020 <usart_init>:
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp,
                       const SerialConfig *config) {
  203020:	b500      	push	{lr}
  203022:	b087      	sub	sp, #28
  203024:	9001      	str	r0, [sp, #4]
  203026:	9100      	str	r1, [sp, #0]
  uint32_t brr, clock;
  USART_TypeDef *u = sdp->usart;
  203028:	9b01      	ldr	r3, [sp, #4]
  20302a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  20302c:	9304      	str	r3, [sp, #16]

  /* Baud rate setting.*/
  clock = sdp->clock;
  20302e:	9b01      	ldr	r3, [sp, #4]
  203030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
  203032:	9303      	str	r3, [sp, #12]
    osalDbgAssert((brr >= 0x300) && (brr < 0x100000), "invalid BRR value");
  }
  else
#endif
  {
    brr = (uint32_t)((clock + config->speed / 2) / config->speed);
  203034:	9b00      	ldr	r3, [sp, #0]
  203036:	681b      	ldr	r3, [r3, #0]
  203038:	085a      	lsrs	r2, r3, #1
  20303a:	9b03      	ldr	r3, [sp, #12]
  20303c:	441a      	add	r2, r3
  20303e:	9b00      	ldr	r3, [sp, #0]
  203040:	681b      	ldr	r3, [r3, #0]
  203042:	fbb2 f3f3 	udiv	r3, r2, r3
  203046:	9305      	str	r3, [sp, #20]

    /* Correcting BRR value when oversampling by 8 instead of 16.
       Fraction is still 4 bits wide, but only lower 3 bits used.
       Mantissa is doubled, but Fraction is left the same.*/
    if (config->cr1 & USART_CR1_OVER8)
  203048:	9b00      	ldr	r3, [sp, #0]
  20304a:	685b      	ldr	r3, [r3, #4]
  20304c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  203050:	2b00      	cmp	r3, #0
  203052:	d008      	beq.n	203066 <usart_init+0x46>
      brr = ((brr & ~7) * 2) | (brr & 7);
  203054:	9b05      	ldr	r3, [sp, #20]
  203056:	f023 0307 	bic.w	r3, r3, #7
  20305a:	005a      	lsls	r2, r3, #1
  20305c:	9b05      	ldr	r3, [sp, #20]
  20305e:	f003 0307 	and.w	r3, r3, #7
  203062:	4313      	orrs	r3, r2
  203064:	9305      	str	r3, [sp, #20]

    osalDbgAssert(brr < 0x10000, "invalid BRR value");
  203066:	9b05      	ldr	r3, [sp, #20]
  203068:	f64f 72ff 	movw	r2, #65535	; 0xffff
  20306c:	4293      	cmp	r3, r2
  20306e:	bf8c      	ite	hi
  203070:	2301      	movhi	r3, #1
  203072:	2300      	movls	r3, #0
  203074:	b2db      	uxtb	r3, r3
  203076:	2b00      	cmp	r3, #0
  203078:	d002      	beq.n	203080 <usart_init+0x60>
  20307a:	4822      	ldr	r0, [pc, #136]	; (203104 <usart_init+0xe4>)
  20307c:	f000 fae0 	bl	203640 <chSysHalt>
  }
  u->BRR = brr;
  203080:	9b04      	ldr	r3, [sp, #16]
  203082:	9a05      	ldr	r2, [sp, #20]
  203084:	60da      	str	r2, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  203086:	9b00      	ldr	r3, [sp, #0]
  203088:	689b      	ldr	r3, [r3, #8]
  20308a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
  20308e:	9b04      	ldr	r3, [sp, #16]
  203090:	605a      	str	r2, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
  203092:	9b00      	ldr	r3, [sp, #0]
  203094:	68db      	ldr	r3, [r3, #12]
  203096:	f043 0201 	orr.w	r2, r3, #1
  20309a:	9b04      	ldr	r3, [sp, #16]
  20309c:	609a      	str	r2, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  20309e:	9b00      	ldr	r3, [sp, #0]
  2030a0:	685a      	ldr	r2, [r3, #4]
                         USART_CR1_RXNEIE | USART_CR1_TE |
  2030a2:	f240 132d 	movw	r3, #301	; 0x12d
  2030a6:	4313      	orrs	r3, r2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
  2030a8:	9a04      	ldr	r2, [sp, #16]
  2030aa:	6013      	str	r3, [r2, #0]
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
  2030ac:	9b04      	ldr	r3, [sp, #16]
  2030ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  2030b2:	621a      	str	r2, [r3, #32]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
  2030b4:	9b00      	ldr	r3, [sp, #0]
  2030b6:	685b      	ldr	r3, [r3, #4]
  2030b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
  2030bc:	2b00      	cmp	r3, #0
  2030be:	d018      	beq.n	2030f2 <usart_init+0xd2>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
  2030c0:	9b00      	ldr	r3, [sp, #0]
  2030c2:	685b      	ldr	r3, [r3, #4]
  2030c4:	f003 2310 	and.w	r3, r3, #268439552	; 0x10001000
  2030c8:	2b00      	cmp	r3, #0
  2030ca:	d003      	beq.n	2030d4 <usart_init+0xb4>
  2030cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  2030d0:	d005      	beq.n	2030de <usart_init+0xbe>
  2030d2:	e009      	b.n	2030e8 <usart_init+0xc8>
    case 0:
      sdp->rxmask = 0x7F;
  2030d4:	9b01      	ldr	r3, [sp, #4]
  2030d6:	227f      	movs	r2, #127	; 0x7f
  2030d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      break;
  2030dc:	e00e      	b.n	2030fc <usart_init+0xdc>
    case USART_CR1_M_1:
      sdp->rxmask = 0x3F;
  2030de:	9b01      	ldr	r3, [sp, #4]
  2030e0:	223f      	movs	r2, #63	; 0x3f
  2030e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      break;
  2030e6:	e009      	b.n	2030fc <usart_init+0xdc>
    default:
      sdp->rxmask = 0xFF;
  2030e8:	9b01      	ldr	r3, [sp, #4]
  2030ea:	22ff      	movs	r2, #255	; 0xff
  2030ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
  }
  else {
    sdp->rxmask = 0xFF;
  }
}
  2030f0:	e004      	b.n	2030fc <usart_init+0xdc>
    sdp->rxmask = 0xFF;
  2030f2:	9b01      	ldr	r3, [sp, #4]
  2030f4:	22ff      	movs	r2, #255	; 0xff
  2030f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
  2030fa:	e7ff      	b.n	2030fc <usart_init+0xdc>
  2030fc:	bf00      	nop
  2030fe:	b007      	add	sp, #28
  203100:	f85d fb04 	ldr.w	pc, [sp], #4
  203104:	08006254 	.word	0x08006254
	...

00203110 <set_error>:
 * @brief   Error handling routine.
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] isr       USART ISR register value
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  203110:	b500      	push	{lr}
  203112:	b085      	sub	sp, #20
  203114:	9001      	str	r0, [sp, #4]
  203116:	9100      	str	r1, [sp, #0]
  eventflags_t sts = 0;
  203118:	2300      	movs	r3, #0
  20311a:	9303      	str	r3, [sp, #12]

  if (isr & USART_ISR_ORE)
  20311c:	9b00      	ldr	r3, [sp, #0]
  20311e:	f003 0308 	and.w	r3, r3, #8
  203122:	2b00      	cmp	r3, #0
  203124:	d003      	beq.n	20312e <set_error+0x1e>
    sts |= SD_OVERRUN_ERROR;
  203126:	9b03      	ldr	r3, [sp, #12]
  203128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  20312c:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_PE)
  20312e:	9b00      	ldr	r3, [sp, #0]
  203130:	f003 0301 	and.w	r3, r3, #1
  203134:	2b00      	cmp	r3, #0
  203136:	d003      	beq.n	203140 <set_error+0x30>
    sts |= SD_PARITY_ERROR;
  203138:	9b03      	ldr	r3, [sp, #12]
  20313a:	f043 0320 	orr.w	r3, r3, #32
  20313e:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_FE)
  203140:	9b00      	ldr	r3, [sp, #0]
  203142:	f003 0302 	and.w	r3, r3, #2
  203146:	2b00      	cmp	r3, #0
  203148:	d003      	beq.n	203152 <set_error+0x42>
    sts |= SD_FRAMING_ERROR;
  20314a:	9b03      	ldr	r3, [sp, #12]
  20314c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  203150:	9303      	str	r3, [sp, #12]
  if (isr & USART_ISR_NE)
  203152:	9b00      	ldr	r3, [sp, #0]
  203154:	f003 0304 	and.w	r3, r3, #4
  203158:	2b00      	cmp	r3, #0
  20315a:	d003      	beq.n	203164 <set_error+0x54>
    sts |= SD_NOISE_ERROR;
  20315c:	9b03      	ldr	r3, [sp, #12]
  20315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  203162:	9303      	str	r3, [sp, #12]
  osalSysLockFromISR();
  203164:	f7ff ff3c 	bl	202fe0 <osalSysLockFromISR.lto_priv.2>
  chnAddFlagsI(sdp, sts);
  203168:	9b01      	ldr	r3, [sp, #4]
  20316a:	3304      	adds	r3, #4
  20316c:	9903      	ldr	r1, [sp, #12]
  20316e:	4618      	mov	r0, r3
  203170:	f7ff ff46 	bl	203000 <osalEventBroadcastFlagsI.lto_priv.2>
  osalSysUnlockFromISR();
  203174:	f7ff ff3c 	bl	202ff0 <osalSysUnlockFromISR.lto_priv.2>
}
  203178:	bf00      	nop
  20317a:	b005      	add	sp, #20
  20317c:	f85d fb04 	ldr.w	pc, [sp], #4

00203180 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {
  203180:	b082      	sub	sp, #8
  203182:	9001      	str	r0, [sp, #4]

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
  203184:	4b04      	ldr	r3, [pc, #16]	; (203198 <notify1+0x18>)
  203186:	681b      	ldr	r3, [r3, #0]
  203188:	4a03      	ldr	r2, [pc, #12]	; (203198 <notify1+0x18>)
  20318a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
  20318e:	6013      	str	r3, [r2, #0]
}
  203190:	bf00      	nop
  203192:	b002      	add	sp, #8
  203194:	4770      	bx	lr
  203196:	bf00      	nop
  203198:	40011000 	.word	0x40011000
  20319c:	00000000 	.word	0x00000000

002031a0 <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
  2031a0:	b500      	push	{lr}
  2031a2:	b083      	sub	sp, #12

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  2031a4:	480e      	ldr	r0, [pc, #56]	; (2031e0 <sd_lld_init+0x40>)
  2031a6:	f7fe fa53 	bl	201650 <sdObjectInit>
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  2031aa:	4b0d      	ldr	r3, [pc, #52]	; (2031e0 <sd_lld_init+0x40>)
  2031ac:	9300      	str	r3, [sp, #0]
  2031ae:	2300      	movs	r3, #0
  2031b0:	2210      	movs	r2, #16
  2031b2:	490c      	ldr	r1, [pc, #48]	; (2031e4 <sd_lld_init+0x44>)
  2031b4:	480c      	ldr	r0, [pc, #48]	; (2031e8 <sd_lld_init+0x48>)
  2031b6:	f7fd fc73 	bl	200aa0 <iqObjectInit>
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  2031ba:	4b09      	ldr	r3, [pc, #36]	; (2031e0 <sd_lld_init+0x40>)
  2031bc:	9300      	str	r3, [sp, #0]
  2031be:	4b0b      	ldr	r3, [pc, #44]	; (2031ec <sd_lld_init+0x4c>)
  2031c0:	2210      	movs	r2, #16
  2031c2:	490b      	ldr	r1, [pc, #44]	; (2031f0 <sd_lld_init+0x50>)
  2031c4:	480b      	ldr	r0, [pc, #44]	; (2031f4 <sd_lld_init+0x54>)
  2031c6:	f7fd fd6b 	bl	200ca0 <oqObjectInit>
  SD1.usart = USART1;
  2031ca:	4b05      	ldr	r3, [pc, #20]	; (2031e0 <sd_lld_init+0x40>)
  2031cc:	4a0a      	ldr	r2, [pc, #40]	; (2031f8 <sd_lld_init+0x58>)
  2031ce:	655a      	str	r2, [r3, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
  2031d0:	4b03      	ldr	r3, [pc, #12]	; (2031e0 <sd_lld_init+0x40>)
  2031d2:	4a0a      	ldr	r2, [pc, #40]	; (2031fc <sd_lld_init+0x5c>)
  2031d4:	659a      	str	r2, [r3, #88]	; 0x58
  LPSD1.clock = STM32_LPUART1CLK;
#if !defined(STM32_LPUART1_SUPPRESS_ISR) && defined(STM32_LPUART1_NUMBER)
  nvicEnableVector(STM32_LPUART1_NUMBER, STM32_SERIAL_LPUART1_PRIORITY);
#endif
#endif
}
  2031d6:	bf00      	nop
  2031d8:	b003      	add	sp, #12
  2031da:	f85d fb04 	ldr.w	pc, [sp], #4
  2031de:	bf00      	nop
  2031e0:	200008c8 	.word	0x200008c8
  2031e4:	20000928 	.word	0x20000928
  2031e8:	200008d4 	.word	0x200008d4
  2031ec:	00203181 	.word	0x00203181
  2031f0:	20000938 	.word	0x20000938
  2031f4:	200008f8 	.word	0x200008f8
  2031f8:	40011000 	.word	0x40011000
  2031fc:	066ff300 	.word	0x066ff300

00203200 <sd_lld_start>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {
  203200:	b500      	push	{lr}
  203202:	b083      	sub	sp, #12
  203204:	9001      	str	r0, [sp, #4]
  203206:	9100      	str	r1, [sp, #0]

  if (config == NULL)
  203208:	9b00      	ldr	r3, [sp, #0]
  20320a:	2b00      	cmp	r3, #0
  20320c:	d101      	bne.n	203212 <sd_lld_start+0x12>
    config = &default_config;
  20320e:	4b10      	ldr	r3, [pc, #64]	; (203250 <sd_lld_start+0x50>)
  203210:	9300      	str	r3, [sp, #0]

  if (sdp->state == SD_STOP) {
  203212:	9b01      	ldr	r3, [sp, #4]
  203214:	7a1b      	ldrb	r3, [r3, #8]
  203216:	2b01      	cmp	r3, #1
  203218:	d111      	bne.n	20323e <sd_lld_start+0x3e>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
  20321a:	9b01      	ldr	r3, [sp, #4]
  20321c:	4a0d      	ldr	r2, [pc, #52]	; (203254 <sd_lld_start+0x54>)
  20321e:	4293      	cmp	r3, r2
  203220:	d10d      	bne.n	20323e <sd_lld_start+0x3e>
      rccEnableUSART1(true);
  203222:	4b0d      	ldr	r3, [pc, #52]	; (203258 <sd_lld_start+0x58>)
  203224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  203226:	4a0c      	ldr	r2, [pc, #48]	; (203258 <sd_lld_start+0x58>)
  203228:	f043 0310 	orr.w	r3, r3, #16
  20322c:	6453      	str	r3, [r2, #68]	; 0x44
  20322e:	4b0a      	ldr	r3, [pc, #40]	; (203258 <sd_lld_start+0x58>)
  203230:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  203232:	4a09      	ldr	r2, [pc, #36]	; (203258 <sd_lld_start+0x58>)
  203234:	f043 0310 	orr.w	r3, r3, #16
  203238:	6653      	str	r3, [r2, #100]	; 0x64
  20323a:	4b07      	ldr	r3, [pc, #28]	; (203258 <sd_lld_start+0x58>)
  20323c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    if (&LPSD1 == sdp) {
      rccEnableLPUART1(true);
    }
#endif
  }
  usart_init(sdp, config);
  20323e:	9900      	ldr	r1, [sp, #0]
  203240:	9801      	ldr	r0, [sp, #4]
  203242:	f7ff feed 	bl	203020 <usart_init>
}
  203246:	bf00      	nop
  203248:	b003      	add	sp, #12
  20324a:	f85d fb04 	ldr.w	pc, [sp], #4
  20324e:	bf00      	nop
  203250:	08006244 	.word	0x08006244
  203254:	200008c8 	.word	0x200008c8
  203258:	40023800 	.word	0x40023800
  20325c:	00000000 	.word	0x00000000

00203260 <sd_lld_serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  203260:	b500      	push	{lr}
  203262:	b087      	sub	sp, #28
  203264:	9001      	str	r0, [sp, #4]
  USART_TypeDef *u = sdp->usart;
  203266:	9b01      	ldr	r3, [sp, #4]
  203268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  20326a:	9303      	str	r3, [sp, #12]
  uint32_t cr1;
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
  20326c:	9b03      	ldr	r3, [sp, #12]
  20326e:	69db      	ldr	r3, [r3, #28]
  203270:	9304      	str	r3, [sp, #16]
  u->ICR = isr;
  203272:	9b03      	ldr	r3, [sp, #12]
  203274:	9a04      	ldr	r2, [sp, #16]
  203276:	621a      	str	r2, [r3, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
  203278:	9b04      	ldr	r3, [sp, #16]
  20327a:	f003 030f 	and.w	r3, r3, #15
  20327e:	2b00      	cmp	r3, #0
  203280:	d003      	beq.n	20328a <sd_lld_serve_interrupt+0x2a>
    set_error(sdp, isr);
  203282:	9904      	ldr	r1, [sp, #16]
  203284:	9801      	ldr	r0, [sp, #4]
  203286:	f7ff ff43 	bl	203110 <set_error>

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
  20328a:	9b04      	ldr	r3, [sp, #16]
  20328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  203290:	2b00      	cmp	r3, #0
  203292:	d01e      	beq.n	2032d2 <sd_lld_serve_interrupt+0x72>
    osalSysLockFromISR();
  203294:	f7ff fea4 	bl	202fe0 <osalSysLockFromISR.lto_priv.2>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
  203298:	9b01      	ldr	r3, [sp, #4]
  20329a:	3304      	adds	r3, #4
  20329c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  2032a0:	4618      	mov	r0, r3
  2032a2:	f7ff fead 	bl	203000 <osalEventBroadcastFlagsI.lto_priv.2>
    osalSysUnlockFromISR();
  2032a6:	f7ff fea3 	bl	202ff0 <osalSysUnlockFromISR.lto_priv.2>
  /* Data available, note it is a while in order to handle two situations:
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
  2032aa:	e012      	b.n	2032d2 <sd_lld_serve_interrupt+0x72>
    osalSysLockFromISR();
  2032ac:	f7ff fe98 	bl	202fe0 <osalSysLockFromISR.lto_priv.2>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
  2032b0:	9b03      	ldr	r3, [sp, #12]
  2032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  2032b4:	b2da      	uxtb	r2, r3
  2032b6:	9b01      	ldr	r3, [sp, #4]
  2032b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
  2032bc:	4013      	ands	r3, r2
  2032be:	b2db      	uxtb	r3, r3
  2032c0:	4619      	mov	r1, r3
  2032c2:	9801      	ldr	r0, [sp, #4]
  2032c4:	f7fe fa24 	bl	201710 <sdIncomingDataI>
    osalSysUnlockFromISR();
  2032c8:	f7ff fe92 	bl	202ff0 <osalSysUnlockFromISR.lto_priv.2>

    isr = u->ISR;
  2032cc:	9b03      	ldr	r3, [sp, #12]
  2032ce:	69db      	ldr	r3, [r3, #28]
  2032d0:	9304      	str	r3, [sp, #16]
  while (isr & USART_ISR_RXNE) {
  2032d2:	9b04      	ldr	r3, [sp, #16]
  2032d4:	f003 0320 	and.w	r3, r3, #32
  2032d8:	2b00      	cmp	r3, #0
  2032da:	d1e7      	bne.n	2032ac <sd_lld_serve_interrupt+0x4c>
  }

  /* Caching CR1.*/
  cr1 = u->CR1;
  2032dc:	9b03      	ldr	r3, [sp, #12]
  2032de:	681b      	ldr	r3, [r3, #0]
  2032e0:	9305      	str	r3, [sp, #20]
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
  2032e2:	9b05      	ldr	r3, [sp, #20]
  2032e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  2032e8:	2b00      	cmp	r3, #0
  2032ea:	d025      	beq.n	203338 <sd_lld_serve_interrupt+0xd8>
    while (isr & USART_ISR_TXE) {
  2032ec:	e01f      	b.n	20332e <sd_lld_serve_interrupt+0xce>
      msg_t b;

      osalSysLockFromISR();
  2032ee:	f7ff fe77 	bl	202fe0 <osalSysLockFromISR.lto_priv.2>
      b = oqGetI(&sdp->oqueue);
  2032f2:	9b01      	ldr	r3, [sp, #4]
  2032f4:	3330      	adds	r3, #48	; 0x30
  2032f6:	4618      	mov	r0, r3
  2032f8:	f7fd fd42 	bl	200d80 <oqGetI>
  2032fc:	9002      	str	r0, [sp, #8]
      if (b < MSG_OK) {
  2032fe:	9b02      	ldr	r3, [sp, #8]
  203300:	2b00      	cmp	r3, #0
  203302:	da0c      	bge.n	20331e <sd_lld_serve_interrupt+0xbe>
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  203304:	9b01      	ldr	r3, [sp, #4]
  203306:	3304      	adds	r3, #4
  203308:	2108      	movs	r1, #8
  20330a:	4618      	mov	r0, r3
  20330c:	f7ff fe78 	bl	203000 <osalEventBroadcastFlagsI.lto_priv.2>
        cr1 &= ~USART_CR1_TXEIE;
  203310:	9b05      	ldr	r3, [sp, #20]
  203312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  203316:	9305      	str	r3, [sp, #20]
        osalSysUnlockFromISR();
  203318:	f7ff fe6a 	bl	202ff0 <osalSysUnlockFromISR.lto_priv.2>
        break;
  20331c:	e00c      	b.n	203338 <sd_lld_serve_interrupt+0xd8>
      }
      u->TDR = b;
  20331e:	9a02      	ldr	r2, [sp, #8]
  203320:	9b03      	ldr	r3, [sp, #12]
  203322:	629a      	str	r2, [r3, #40]	; 0x28
      osalSysUnlockFromISR();
  203324:	f7ff fe64 	bl	202ff0 <osalSysUnlockFromISR.lto_priv.2>

      isr = u->ISR;
  203328:	9b03      	ldr	r3, [sp, #12]
  20332a:	69db      	ldr	r3, [r3, #28]
  20332c:	9304      	str	r3, [sp, #16]
    while (isr & USART_ISR_TXE) {
  20332e:	9b04      	ldr	r3, [sp, #16]
  203330:	f003 0380 	and.w	r3, r3, #128	; 0x80
  203334:	2b00      	cmp	r3, #0
  203336:	d1da      	bne.n	2032ee <sd_lld_serve_interrupt+0x8e>
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
  203338:	9b05      	ldr	r3, [sp, #20]
  20333a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  20333e:	2b00      	cmp	r3, #0
  203340:	d024      	beq.n	20338c <sd_lld_serve_interrupt+0x12c>
  203342:	9b04      	ldr	r3, [sp, #16]
  203344:	f003 0340 	and.w	r3, r3, #64	; 0x40
  203348:	2b00      	cmp	r3, #0
  20334a:	d01f      	beq.n	20338c <sd_lld_serve_interrupt+0x12c>
    osalSysLockFromISR();
  20334c:	f7ff fe48 	bl	202fe0 <osalSysLockFromISR.lto_priv.2>
    if (oqIsEmptyI(&sdp->oqueue)) {
  203350:	9b01      	ldr	r3, [sp, #4]
  203352:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  203354:	9b01      	ldr	r3, [sp, #4]
  203356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  203358:	429a      	cmp	r2, r3
  20335a:	d105      	bne.n	203368 <sd_lld_serve_interrupt+0x108>
  20335c:	9b01      	ldr	r3, [sp, #4]
  20335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  203360:	2b00      	cmp	r3, #0
  203362:	d001      	beq.n	203368 <sd_lld_serve_interrupt+0x108>
  203364:	2301      	movs	r3, #1
  203366:	e000      	b.n	20336a <sd_lld_serve_interrupt+0x10a>
  203368:	2300      	movs	r3, #0
  20336a:	f003 0301 	and.w	r3, r3, #1
  20336e:	b2db      	uxtb	r3, r3
  203370:	2b00      	cmp	r3, #0
  203372:	d009      	beq.n	203388 <sd_lld_serve_interrupt+0x128>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
  203374:	9b01      	ldr	r3, [sp, #4]
  203376:	3304      	adds	r3, #4
  203378:	2110      	movs	r1, #16
  20337a:	4618      	mov	r0, r3
  20337c:	f7ff fe40 	bl	203000 <osalEventBroadcastFlagsI.lto_priv.2>
      cr1 &= ~USART_CR1_TCIE;
  203380:	9b05      	ldr	r3, [sp, #20]
  203382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  203386:	9305      	str	r3, [sp, #20]
    }
    osalSysUnlockFromISR();
  203388:	f7ff fe32 	bl	202ff0 <osalSysUnlockFromISR.lto_priv.2>
  }

  /* Writing CR1 once.*/
  u->CR1 = cr1;
  20338c:	9b03      	ldr	r3, [sp, #12]
  20338e:	9a05      	ldr	r2, [sp, #20]
  203390:	601a      	str	r2, [r3, #0]
}
  203392:	bf00      	nop
  203394:	b007      	add	sp, #28
  203396:	f85d fb04 	ldr.w	pc, [sp], #4
  20339a:	bf00      	nop
  20339c:	0000      	movs	r0, r0
	...

002033a0 <gpio_init>:

/*===========================================================================*/
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {
  2033a0:	b082      	sub	sp, #8
  2033a2:	9001      	str	r0, [sp, #4]
  2033a4:	9100      	str	r1, [sp, #0]

  gpiop->OTYPER  = config->otyper;
  2033a6:	9b00      	ldr	r3, [sp, #0]
  2033a8:	685a      	ldr	r2, [r3, #4]
  2033aa:	9b01      	ldr	r3, [sp, #4]
  2033ac:	605a      	str	r2, [r3, #4]
  gpiop->OSPEEDR = config->ospeedr;
  2033ae:	9b00      	ldr	r3, [sp, #0]
  2033b0:	689a      	ldr	r2, [r3, #8]
  2033b2:	9b01      	ldr	r3, [sp, #4]
  2033b4:	609a      	str	r2, [r3, #8]
  gpiop->PUPDR   = config->pupdr;
  2033b6:	9b00      	ldr	r3, [sp, #0]
  2033b8:	68da      	ldr	r2, [r3, #12]
  2033ba:	9b01      	ldr	r3, [sp, #4]
  2033bc:	60da      	str	r2, [r3, #12]
  gpiop->ODR     = config->odr;
  2033be:	9b00      	ldr	r3, [sp, #0]
  2033c0:	691a      	ldr	r2, [r3, #16]
  2033c2:	9b01      	ldr	r3, [sp, #4]
  2033c4:	615a      	str	r2, [r3, #20]
  gpiop->AFRL    = config->afrl;
  2033c6:	9b00      	ldr	r3, [sp, #0]
  2033c8:	695a      	ldr	r2, [r3, #20]
  2033ca:	9b01      	ldr	r3, [sp, #4]
  2033cc:	621a      	str	r2, [r3, #32]
  gpiop->AFRH    = config->afrh;
  2033ce:	9b00      	ldr	r3, [sp, #0]
  2033d0:	699a      	ldr	r2, [r3, #24]
  2033d2:	9b01      	ldr	r3, [sp, #4]
  2033d4:	625a      	str	r2, [r3, #36]	; 0x24
  gpiop->MODER   = config->moder;
  2033d6:	9b00      	ldr	r3, [sp, #0]
  2033d8:	681a      	ldr	r2, [r3, #0]
  2033da:	9b01      	ldr	r3, [sp, #4]
  2033dc:	601a      	str	r2, [r3, #0]
}
  2033de:	bf00      	nop
  2033e0:	b002      	add	sp, #8
  2033e2:	4770      	bx	lr
	...

002033f0 <stm32_gpio_init>:

static void stm32_gpio_init(void) {
  2033f0:	b508      	push	{r3, lr}

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB1(STM32_GPIO_EN_MASK);
  2033f2:	4b26      	ldr	r3, [pc, #152]	; (20348c <stm32_gpio_init+0x9c>)
  2033f4:	691a      	ldr	r2, [r3, #16]
  2033f6:	4925      	ldr	r1, [pc, #148]	; (20348c <stm32_gpio_init+0x9c>)
  2033f8:	f240 73ff 	movw	r3, #2047	; 0x7ff
  2033fc:	4313      	orrs	r3, r2
  2033fe:	610b      	str	r3, [r1, #16]
  203400:	4b22      	ldr	r3, [pc, #136]	; (20348c <stm32_gpio_init+0x9c>)
  203402:	691a      	ldr	r2, [r3, #16]
  203404:	4921      	ldr	r1, [pc, #132]	; (20348c <stm32_gpio_init+0x9c>)
  203406:	4b22      	ldr	r3, [pc, #136]	; (203490 <stm32_gpio_init+0xa0>)
  203408:	4013      	ands	r3, r2
  20340a:	610b      	str	r3, [r1, #16]
  20340c:	4b1f      	ldr	r3, [pc, #124]	; (20348c <stm32_gpio_init+0x9c>)
  20340e:	691b      	ldr	r3, [r3, #16]
  rccEnableAHB1(STM32_GPIO_EN_MASK, true);
  203410:	4b1e      	ldr	r3, [pc, #120]	; (20348c <stm32_gpio_init+0x9c>)
  203412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  203414:	491d      	ldr	r1, [pc, #116]	; (20348c <stm32_gpio_init+0x9c>)
  203416:	f240 73ff 	movw	r3, #2047	; 0x7ff
  20341a:	4313      	orrs	r3, r2
  20341c:	630b      	str	r3, [r1, #48]	; 0x30
  20341e:	4b1b      	ldr	r3, [pc, #108]	; (20348c <stm32_gpio_init+0x9c>)
  203420:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  203422:	491a      	ldr	r1, [pc, #104]	; (20348c <stm32_gpio_init+0x9c>)
  203424:	f240 73ff 	movw	r3, #2047	; 0x7ff
  203428:	4313      	orrs	r3, r2
  20342a:	650b      	str	r3, [r1, #80]	; 0x50
  20342c:	4b17      	ldr	r3, [pc, #92]	; (20348c <stm32_gpio_init+0x9c>)
  20342e:	6d1b      	ldr	r3, [r3, #80]	; 0x50

  /* Initializing all the defined GPIO ports.*/
#if STM32_HAS_GPIOA
  gpio_init(GPIOA, &gpio_default_config.PAData);
  203430:	4918      	ldr	r1, [pc, #96]	; (203494 <stm32_gpio_init+0xa4>)
  203432:	4819      	ldr	r0, [pc, #100]	; (203498 <stm32_gpio_init+0xa8>)
  203434:	f7ff ffb4 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOB
  gpio_init(GPIOB, &gpio_default_config.PBData);
  203438:	4918      	ldr	r1, [pc, #96]	; (20349c <stm32_gpio_init+0xac>)
  20343a:	4819      	ldr	r0, [pc, #100]	; (2034a0 <stm32_gpio_init+0xb0>)
  20343c:	f7ff ffb0 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOC
  gpio_init(GPIOC, &gpio_default_config.PCData);
  203440:	4918      	ldr	r1, [pc, #96]	; (2034a4 <stm32_gpio_init+0xb4>)
  203442:	4819      	ldr	r0, [pc, #100]	; (2034a8 <stm32_gpio_init+0xb8>)
  203444:	f7ff ffac 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOD
  gpio_init(GPIOD, &gpio_default_config.PDData);
  203448:	4918      	ldr	r1, [pc, #96]	; (2034ac <stm32_gpio_init+0xbc>)
  20344a:	4819      	ldr	r0, [pc, #100]	; (2034b0 <stm32_gpio_init+0xc0>)
  20344c:	f7ff ffa8 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOE
  gpio_init(GPIOE, &gpio_default_config.PEData);
  203450:	4918      	ldr	r1, [pc, #96]	; (2034b4 <stm32_gpio_init+0xc4>)
  203452:	4819      	ldr	r0, [pc, #100]	; (2034b8 <stm32_gpio_init+0xc8>)
  203454:	f7ff ffa4 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOF
  gpio_init(GPIOF, &gpio_default_config.PFData);
  203458:	4918      	ldr	r1, [pc, #96]	; (2034bc <stm32_gpio_init+0xcc>)
  20345a:	4819      	ldr	r0, [pc, #100]	; (2034c0 <stm32_gpio_init+0xd0>)
  20345c:	f7ff ffa0 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOG
  gpio_init(GPIOG, &gpio_default_config.PGData);
  203460:	4918      	ldr	r1, [pc, #96]	; (2034c4 <stm32_gpio_init+0xd4>)
  203462:	4819      	ldr	r0, [pc, #100]	; (2034c8 <stm32_gpio_init+0xd8>)
  203464:	f7ff ff9c 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOH
  gpio_init(GPIOH, &gpio_default_config.PHData);
  203468:	4918      	ldr	r1, [pc, #96]	; (2034cc <stm32_gpio_init+0xdc>)
  20346a:	4819      	ldr	r0, [pc, #100]	; (2034d0 <stm32_gpio_init+0xe0>)
  20346c:	f7ff ff98 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOI
  gpio_init(GPIOI, &gpio_default_config.PIData);
  203470:	4918      	ldr	r1, [pc, #96]	; (2034d4 <stm32_gpio_init+0xe4>)
  203472:	4819      	ldr	r0, [pc, #100]	; (2034d8 <stm32_gpio_init+0xe8>)
  203474:	f7ff ff94 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOJ
  gpio_init(GPIOJ, &gpio_default_config.PJData);
  203478:	4918      	ldr	r1, [pc, #96]	; (2034dc <stm32_gpio_init+0xec>)
  20347a:	4819      	ldr	r0, [pc, #100]	; (2034e0 <stm32_gpio_init+0xf0>)
  20347c:	f7ff ff90 	bl	2033a0 <gpio_init>
#endif
#if STM32_HAS_GPIOK
  gpio_init(GPIOK, &gpio_default_config.PKData);
  203480:	4918      	ldr	r1, [pc, #96]	; (2034e4 <stm32_gpio_init+0xf4>)
  203482:	4819      	ldr	r0, [pc, #100]	; (2034e8 <stm32_gpio_init+0xf8>)
  203484:	f7ff ff8c 	bl	2033a0 <gpio_init>
#endif
}
  203488:	bf00      	nop
  20348a:	bd08      	pop	{r3, pc}
  20348c:	40023800 	.word	0x40023800
  203490:	fffff800 	.word	0xfffff800
  203494:	08006260 	.word	0x08006260
  203498:	40020000 	.word	0x40020000
  20349c:	0800627c 	.word	0x0800627c
  2034a0:	40020400 	.word	0x40020400
  2034a4:	08006298 	.word	0x08006298
  2034a8:	40020800 	.word	0x40020800
  2034ac:	080062b4 	.word	0x080062b4
  2034b0:	40020c00 	.word	0x40020c00
  2034b4:	080062d0 	.word	0x080062d0
  2034b8:	40021000 	.word	0x40021000
  2034bc:	080062ec 	.word	0x080062ec
  2034c0:	40021400 	.word	0x40021400
  2034c4:	08006308 	.word	0x08006308
  2034c8:	40021800 	.word	0x40021800
  2034cc:	08006324 	.word	0x08006324
  2034d0:	40021c00 	.word	0x40021c00
  2034d4:	08006340 	.word	0x08006340
  2034d8:	40022000 	.word	0x40022000
  2034dc:	0800635c 	.word	0x0800635c
  2034e0:	40022400 	.word	0x40022400
  2034e4:	08006378 	.word	0x08006378
  2034e8:	40022800 	.word	0x40022800
  2034ec:	00000000 	.word	0x00000000

002034f0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
  2034f0:	b508      	push	{r3, lr}

  stm32_gpio_init();
  2034f2:	f7ff ff7d 	bl	2033f0 <stm32_gpio_init>
  stm32_clock_init();
  2034f6:	f7fe fb73 	bl	201be0 <stm32_clock_init>
}
  2034fa:	bf00      	nop
  2034fc:	bd08      	pop	{r3, pc}
  2034fe:	bf00      	nop

00203500 <boardInit>:
 * @brief   Board-specific initialization code.
 * @note    You can add your board-specific code here.
 */
void boardInit(void) {

}
  203500:	bf00      	nop
  203502:	4770      	bx	lr
	...

00203510 <__tm_calibration_object_init>:
 *
 * @param[out] tcp      pointer to a @p tm_calibration_t object
 *
 * @notapi
 */
static inline void __tm_calibration_object_init(tm_calibration_t *tcp) {
  203510:	b500      	push	{lr}
  203512:	b08b      	sub	sp, #44	; 0x2c
  203514:	9001      	str	r0, [sp, #4]
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  tcp->offset = (rtcnt_t)0;
  203516:	9b01      	ldr	r3, [sp, #4]
  203518:	2200      	movs	r2, #0
  20351a:	601a      	str	r2, [r3, #0]
  chTMObjectInit(&tm);
  20351c:	ab02      	add	r3, sp, #8
  20351e:	4618      	mov	r0, r3
  203520:	f001 ffce 	bl	2054c0 <chTMObjectInit>
  i = TM_CALIBRATION_LOOP;
  203524:	2304      	movs	r3, #4
  203526:	9309      	str	r3, [sp, #36]	; 0x24
  do {
    chTMStartMeasurementX(&tm);
  203528:	ab02      	add	r3, sp, #8
  20352a:	4618      	mov	r0, r3
  20352c:	f001 ffe8 	bl	205500 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
  203530:	ab02      	add	r3, sp, #8
  203532:	4618      	mov	r0, r3
  203534:	f001 fff4 	bl	205520 <chTMStopMeasurementX>
    i--;
  203538:	9b09      	ldr	r3, [sp, #36]	; 0x24
  20353a:	3b01      	subs	r3, #1
  20353c:	9309      	str	r3, [sp, #36]	; 0x24
  } while (i > 0U);
  20353e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  203540:	2b00      	cmp	r3, #0
  203542:	d1f1      	bne.n	203528 <__tm_calibration_object_init+0x18>
  tcp->offset = tm.best;
  203544:	9a02      	ldr	r2, [sp, #8]
  203546:	9b01      	ldr	r3, [sp, #4]
  203548:	601a      	str	r2, [r3, #0]
}
  20354a:	bf00      	nop
  20354c:	b00b      	add	sp, #44	; 0x2c
  20354e:	f85d fb04 	ldr.w	pc, [sp], #4
  203552:	bf00      	nop
	...

00203560 <chSysUnlock.lto_priv.6>:
static inline void chSysUnlock(void) {
  203560:	b500      	push	{lr}
  203562:	b083      	sub	sp, #12
  __dbg_check_unlock();
  203564:	f000 f8e4 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  203568:	4b12      	ldr	r3, [pc, #72]	; (2035b4 <chSysUnlock.lto_priv.6+0x54>)
  20356a:	681b      	ldr	r3, [r3, #0]
  20356c:	4a11      	ldr	r2, [pc, #68]	; (2035b4 <chSysUnlock.lto_priv.6+0x54>)
  20356e:	4293      	cmp	r3, r2
  203570:	bf14      	ite	ne
  203572:	2301      	movne	r3, #1
  203574:	2300      	moveq	r3, #0
  203576:	b2db      	uxtb	r3, r3
  203578:	2b00      	cmp	r3, #0
  20357a:	d00f      	beq.n	20359c <chSysUnlock.lto_priv.6+0x3c>
  20357c:	4b0d      	ldr	r3, [pc, #52]	; (2035b4 <chSysUnlock.lto_priv.6+0x54>)
  20357e:	68db      	ldr	r3, [r3, #12]
  203580:	689a      	ldr	r2, [r3, #8]
  203582:	4b0c      	ldr	r3, [pc, #48]	; (2035b4 <chSysUnlock.lto_priv.6+0x54>)
  203584:	681b      	ldr	r3, [r3, #0]
  203586:	689b      	ldr	r3, [r3, #8]
  203588:	429a      	cmp	r2, r3
  20358a:	bf34      	ite	cc
  20358c:	2301      	movcc	r3, #1
  20358e:	2300      	movcs	r3, #0
  203590:	b2db      	uxtb	r3, r3
  203592:	2b00      	cmp	r3, #0
  203594:	d002      	beq.n	20359c <chSysUnlock.lto_priv.6+0x3c>
  203596:	4808      	ldr	r0, [pc, #32]	; (2035b8 <chSysUnlock.lto_priv.6+0x58>)
  203598:	f000 f852 	bl	203640 <chSysHalt>
  20359c:	2300      	movs	r3, #0
  20359e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2035a0:	9b01      	ldr	r3, [sp, #4]
  2035a2:	f383 8811 	msr	BASEPRI, r3
}
  2035a6:	bf00      	nop
}
  2035a8:	bf00      	nop
}
  2035aa:	bf00      	nop
  2035ac:	b003      	add	sp, #12
  2035ae:	f85d fb04 	ldr.w	pc, [sp], #4
  2035b2:	bf00      	nop
  2035b4:	20000958 	.word	0x20000958
  2035b8:	080063ac 	.word	0x080063ac
  2035bc:	00000000 	.word	0x00000000

002035c0 <__oslib_init>:
/**
 * @brief   Initialization of all library modules.
 *
 * @notapi
 */
static inline void __oslib_init(void) {
  2035c0:	b508      	push	{r3, lr}

#if CH_CFG_USE_MEMCORE == TRUE
  __core_init();
  2035c2:	f002 f99d 	bl	205900 <__core_init>
#endif
#if CH_CFG_USE_HEAP == TRUE
  __heap_init();
  2035c6:	f002 fa23 	bl	205a10 <__heap_init>
#endif
#if CH_CFG_USE_FACTORY == TRUE
  __factory_init();
  2035ca:	f002 fac1 	bl	205b50 <__factory_init>
#endif
}
  2035ce:	bf00      	nop
  2035d0:	bd08      	pop	{r3, pc}
  2035d2:	bf00      	nop
	...

002035e0 <chSysInit>:
 *          interrupts are enabled.
 * @post    the system is in @p ch_sys_running state.
 *
 * @special
 */
void chSysInit(void) {
  2035e0:	b500      	push	{lr}
  2035e2:	b083      	sub	sp, #12
  unsigned i;

  /* System object initialization.*/
  ch_system.state = ch_sys_initializing;
  2035e4:	4b11      	ldr	r3, [pc, #68]	; (20362c <chSysInit+0x4c>)
  2035e6:	2201      	movs	r2, #1
  2035e8:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
  2035ea:	2300      	movs	r3, #0
  2035ec:	9301      	str	r3, [sp, #4]
  2035ee:	e008      	b.n	203602 <chSysInit+0x22>
    ch_system.instances[i] = NULL;
  2035f0:	4a0e      	ldr	r2, [pc, #56]	; (20362c <chSysInit+0x4c>)
  2035f2:	9b01      	ldr	r3, [sp, #4]
  2035f4:	009b      	lsls	r3, r3, #2
  2035f6:	4413      	add	r3, r2
  2035f8:	2200      	movs	r2, #0
  2035fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)PORT_CORES_NUMBER; i++) {
  2035fc:	9b01      	ldr	r3, [sp, #4]
  2035fe:	3301      	adds	r3, #1
  203600:	9301      	str	r3, [sp, #4]
  203602:	9b01      	ldr	r3, [sp, #4]
  203604:	2b00      	cmp	r3, #0
  203606:	d0f3      	beq.n	2035f0 <chSysInit+0x10>
  }

#if CH_CFG_USE_TM == TRUE
  /* Time Measurement calibration.*/
  __tm_calibration_object_init(&ch_system.tmc);
  203608:	4809      	ldr	r0, [pc, #36]	; (203630 <chSysInit+0x50>)
  20360a:	f7ff ff81 	bl	203510 <__tm_calibration_object_init>

  /* User system initialization hook.*/
  CH_CFG_SYSTEM_INIT_HOOK();

  /* OS library modules.*/
  __oslib_init();
  20360e:	f7ff ffd7 	bl	2035c0 <__oslib_init>

  /* Initializing default OS instance.*/
  chInstanceObjectInit(&ch0, &ch_core0_cfg);
  203612:	4908      	ldr	r1, [pc, #32]	; (203634 <chSysInit+0x54>)
  203614:	4808      	ldr	r0, [pc, #32]	; (203638 <chSysInit+0x58>)
  203616:	f001 fa83 	bl	204b20 <chInstanceObjectInit>

  /* It is alive now.*/
  ch_system.state = ch_sys_running;
  20361a:	4b04      	ldr	r3, [pc, #16]	; (20362c <chSysInit+0x4c>)
  20361c:	2202      	movs	r2, #2
  20361e:	701a      	strb	r2, [r3, #0]
  chSysUnlock();
  203620:	f7ff ff9e 	bl	203560 <chSysUnlock.lto_priv.6>
}
  203624:	bf00      	nop
  203626:	b003      	add	sp, #12
  203628:	f85d fb04 	ldr.w	pc, [sp], #4
  20362c:	20000948 	.word	0x20000948
  203630:	20000950 	.word	0x20000950
  203634:	08006398 	.word	0x08006398
  203638:	20000958 	.word	0x20000958
  20363c:	00000000 	.word	0x00000000

00203640 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
  203640:	b500      	push	{lr}
  203642:	b083      	sub	sp, #12
  203644:	9001      	str	r0, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  203646:	b672      	cpsid	i
}
  203648:	bf00      	nop
 *          the priority mask to level 0.
 */
__STATIC_FORCEINLINE void port_disable(void) {

  __disable_irq();
}
  20364a:	bf00      	nop

  port_disable();

  /* Logging the event.*/
  __trace_halt(reason);
  20364c:	9801      	ldr	r0, [sp, #4]
  20364e:	f000 fb07 	bl	203c60 <__trace_halt>

  /* Pointing to the passed message.*/
  currcore->dbg.panic_msg = reason;
  203652:	4a04      	ldr	r2, [pc, #16]	; (203664 <chSysHalt+0x24>)
  203654:	9b01      	ldr	r3, [sp, #4]
  203656:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
     via some inter-core messaging or other means.*/
  PORT_SYSTEM_HALT_HOOK();
#endif

  /* Entering the halted state.*/
  ch_system.state = ch_sys_halted;
  20365a:	4b03      	ldr	r3, [pc, #12]	; (203668 <chSysHalt+0x28>)
  20365c:	2203      	movs	r2, #3
  20365e:	701a      	strb	r2, [r3, #0]

  /* Harmless infinite loop.*/
  while (true) {
  203660:	e7fe      	b.n	203660 <chSysHalt+0x20>
  203662:	bf00      	nop
  203664:	20000958 	.word	0x20000958
  203668:	20000948 	.word	0x20000948
  20366c:	00000000 	.word	0x00000000

00203670 <chSysGetIdleThreadX>:
 *
 * @return              Pointer to the idle thread.
 *
 * @xclass
 */
thread_t *chSysGetIdleThreadX(void) {
  203670:	b500      	push	{lr}
  203672:	b083      	sub	sp, #12
  thread_t *tp = threadref(currcore->rlist.pqueue.prev);
  203674:	4b0a      	ldr	r3, [pc, #40]	; (2036a0 <chSysGetIdleThreadX+0x30>)
  203676:	685b      	ldr	r3, [r3, #4]
  203678:	9301      	str	r3, [sp, #4]

  chDbgAssert(tp->hdr.pqueue.prio == IDLEPRIO, "not idle thread");
  20367a:	9b01      	ldr	r3, [sp, #4]
  20367c:	689b      	ldr	r3, [r3, #8]
  20367e:	2b01      	cmp	r3, #1
  203680:	bf14      	ite	ne
  203682:	2301      	movne	r3, #1
  203684:	2300      	moveq	r3, #0
  203686:	b2db      	uxtb	r3, r3
  203688:	2b00      	cmp	r3, #0
  20368a:	d002      	beq.n	203692 <chSysGetIdleThreadX+0x22>
  20368c:	4805      	ldr	r0, [pc, #20]	; (2036a4 <chSysGetIdleThreadX+0x34>)
  20368e:	f7ff ffd7 	bl	203640 <chSysHalt>

  return tp;
  203692:	9b01      	ldr	r3, [sp, #4]
  203694:	bf00      	nop
  203696:	bf00      	nop
}
  203698:	4618      	mov	r0, r3
  20369a:	b003      	add	sp, #12
  20369c:	f85d fb04 	ldr.w	pc, [sp], #4
  2036a0:	20000958 	.word	0x20000958
  2036a4:	080063b8 	.word	0x080063b8
	...

002036b0 <chSysTimerHandlerI>:
 *          and, together with the @p CH_CFG_TIME_QUANTUM macro, the round robin
 *          interval.
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {
  2036b0:	b508      	push	{r3, lr}
#if (CH_CFG_TIME_QUANTUM > 0) || (CH_DBG_THREADS_PROFILING == TRUE)
  thread_t *currtp = chThdGetSelfX();
#endif

  chDbgCheckClassI();
  2036b2:	f000 f935 	bl	203920 <chDbgCheckClassI>
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
  2036b6:	f000 fdf3 	bl	2042a0 <chVTDoTickI>
  CH_CFG_SYSTEM_TICK_HOOK();
}
  2036ba:	bf00      	nop
  2036bc:	bd08      	pop	{r3, pc}
  2036be:	bf00      	nop

002036c0 <chRFCUCollectFaultsI>:
/**
 * @brief   Adds fault flags to the current mask.
 *
 * @param[in] mask      fault flags to be added
 */
void chRFCUCollectFaultsI(rfcu_mask_t mask) {
  2036c0:	b082      	sub	sp, #8
  2036c2:	9001      	str	r0, [sp, #4]

#if CH_CFG_SMP_MODE == FALSE
  currcore->rfcu.mask |= mask;
  2036c4:	4b04      	ldr	r3, [pc, #16]	; (2036d8 <chRFCUCollectFaultsI+0x18>)
  2036c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
  2036c8:	9b01      	ldr	r3, [sp, #4]
  2036ca:	4313      	orrs	r3, r2
  2036cc:	4a02      	ldr	r2, [pc, #8]	; (2036d8 <chRFCUCollectFaultsI+0x18>)
  2036ce:	63d3      	str	r3, [r2, #60]	; 0x3c
#else
  ch_system.rfcu.mask |= mask;
#endif

  CH_CFG_RUNTIME_FAULTS_HOOK(mask);
}
  2036d0:	bf00      	nop
  2036d2:	b002      	add	sp, #8
  2036d4:	4770      	bx	lr
  2036d6:	bf00      	nop
  2036d8:	20000958 	.word	0x20000958
  2036dc:	00000000 	.word	0x00000000

002036e0 <__dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void __dbg_check_lock(void) {
  2036e0:	b500      	push	{lr}
  2036e2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  2036e4:	4b10      	ldr	r3, [pc, #64]	; (203728 <__dbg_check_lock+0x48>)
  2036e6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
  2036e8:	9b01      	ldr	r3, [sp, #4]
  2036ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2036ee:	2b00      	cmp	r3, #0
  2036f0:	bf14      	ite	ne
  2036f2:	2301      	movne	r3, #1
  2036f4:	2300      	moveq	r3, #0
  2036f6:	b2db      	uxtb	r3, r3
  2036f8:	2b00      	cmp	r3, #0
  2036fa:	d109      	bne.n	203710 <__dbg_check_lock+0x30>
  2036fc:	9b01      	ldr	r3, [sp, #4]
  2036fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  203702:	2b00      	cmp	r3, #0
  203704:	bf14      	ite	ne
  203706:	2301      	movne	r3, #1
  203708:	2300      	moveq	r3, #0
  20370a:	b2db      	uxtb	r3, r3
  20370c:	2b00      	cmp	r3, #0
  20370e:	d002      	beq.n	203716 <__dbg_check_lock+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#4");
  203710:	4806      	ldr	r0, [pc, #24]	; (20372c <__dbg_check_lock+0x4c>)
  203712:	f7ff ff95 	bl	203640 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
  203716:	9b01      	ldr	r3, [sp, #4]
  203718:	2201      	movs	r2, #1
  20371a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  20371e:	bf00      	nop
  203720:	b003      	add	sp, #12
  203722:	f85d fb04 	ldr.w	pc, [sp], #4
  203726:	bf00      	nop
  203728:	20000958 	.word	0x20000958
  20372c:	080063cc 	.word	0x080063cc

00203730 <__dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void __dbg_check_unlock(void) {
  203730:	b500      	push	{lr}
  203732:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  203734:	4b10      	ldr	r3, [pc, #64]	; (203778 <__dbg_check_unlock+0x48>)
  203736:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
  203738:	9b01      	ldr	r3, [sp, #4]
  20373a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20373e:	2b00      	cmp	r3, #0
  203740:	bf14      	ite	ne
  203742:	2301      	movne	r3, #1
  203744:	2300      	moveq	r3, #0
  203746:	b2db      	uxtb	r3, r3
  203748:	2b00      	cmp	r3, #0
  20374a:	d109      	bne.n	203760 <__dbg_check_unlock+0x30>
  20374c:	9b01      	ldr	r3, [sp, #4]
  20374e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  203752:	2b00      	cmp	r3, #0
  203754:	bfd4      	ite	le
  203756:	2301      	movle	r3, #1
  203758:	2300      	movgt	r3, #0
  20375a:	b2db      	uxtb	r3, r3
  20375c:	2b00      	cmp	r3, #0
  20375e:	d002      	beq.n	203766 <__dbg_check_unlock+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#5");
  203760:	4806      	ldr	r0, [pc, #24]	; (20377c <__dbg_check_unlock+0x4c>)
  203762:	f7ff ff6d 	bl	203640 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
  203766:	9b01      	ldr	r3, [sp, #4]
  203768:	2200      	movs	r2, #0
  20376a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  20376e:	bf00      	nop
  203770:	b003      	add	sp, #12
  203772:	f85d fb04 	ldr.w	pc, [sp], #4
  203776:	bf00      	nop
  203778:	20000958 	.word	0x20000958
  20377c:	080063d4 	.word	0x080063d4

00203780 <__dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void __dbg_check_lock_from_isr(void) {
  203780:	b500      	push	{lr}
  203782:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  203784:	4b10      	ldr	r3, [pc, #64]	; (2037c8 <__dbg_check_lock_from_isr+0x48>)
  203786:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
  203788:	9b01      	ldr	r3, [sp, #4]
  20378a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20378e:	2b00      	cmp	r3, #0
  203790:	bfd4      	ite	le
  203792:	2301      	movle	r3, #1
  203794:	2300      	movgt	r3, #0
  203796:	b2db      	uxtb	r3, r3
  203798:	2b00      	cmp	r3, #0
  20379a:	d109      	bne.n	2037b0 <__dbg_check_lock_from_isr+0x30>
  20379c:	9b01      	ldr	r3, [sp, #4]
  20379e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  2037a2:	2b00      	cmp	r3, #0
  2037a4:	bf14      	ite	ne
  2037a6:	2301      	movne	r3, #1
  2037a8:	2300      	moveq	r3, #0
  2037aa:	b2db      	uxtb	r3, r3
  2037ac:	2b00      	cmp	r3, #0
  2037ae:	d002      	beq.n	2037b6 <__dbg_check_lock_from_isr+0x36>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#6");
  2037b0:	4806      	ldr	r0, [pc, #24]	; (2037cc <__dbg_check_lock_from_isr+0x4c>)
  2037b2:	f7ff ff45 	bl	203640 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)1;
  2037b6:	9b01      	ldr	r3, [sp, #4]
  2037b8:	2201      	movs	r2, #1
  2037ba:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  2037be:	bf00      	nop
  2037c0:	b003      	add	sp, #12
  2037c2:	f85d fb04 	ldr.w	pc, [sp], #4
  2037c6:	bf00      	nop
  2037c8:	20000958 	.word	0x20000958
  2037cc:	080063dc 	.word	0x080063dc

002037d0 <__dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void __dbg_check_unlock_from_isr(void) {
  2037d0:	b500      	push	{lr}
  2037d2:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  2037d4:	4b10      	ldr	r3, [pc, #64]	; (203818 <__dbg_check_unlock_from_isr+0x48>)
  2037d6:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
  2037d8:	9b01      	ldr	r3, [sp, #4]
  2037da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2037de:	2b00      	cmp	r3, #0
  2037e0:	bfd4      	ite	le
  2037e2:	2301      	movle	r3, #1
  2037e4:	2300      	movgt	r3, #0
  2037e6:	b2db      	uxtb	r3, r3
  2037e8:	2b00      	cmp	r3, #0
  2037ea:	d109      	bne.n	203800 <__dbg_check_unlock_from_isr+0x30>
  2037ec:	9b01      	ldr	r3, [sp, #4]
  2037ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  2037f2:	2b00      	cmp	r3, #0
  2037f4:	bfd4      	ite	le
  2037f6:	2301      	movle	r3, #1
  2037f8:	2300      	movgt	r3, #0
  2037fa:	b2db      	uxtb	r3, r3
  2037fc:	2b00      	cmp	r3, #0
  2037fe:	d002      	beq.n	203806 <__dbg_check_unlock_from_isr+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#7");
  203800:	4806      	ldr	r0, [pc, #24]	; (20381c <__dbg_check_unlock_from_isr+0x4c>)
  203802:	f7ff ff1d 	bl	203640 <chSysHalt>
  }
  oip->dbg.lock_cnt = (cnt_t)0;
  203806:	9b01      	ldr	r3, [sp, #4]
  203808:	2200      	movs	r2, #0
  20380a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
}
  20380e:	bf00      	nop
  203810:	b003      	add	sp, #12
  203812:	f85d fb04 	ldr.w	pc, [sp], #4
  203816:	bf00      	nop
  203818:	20000958 	.word	0x20000958
  20381c:	080063e4 	.word	0x080063e4

00203820 <__dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void __dbg_check_enter_isr(void) {
  203820:	b500      	push	{lr}
  203822:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
  203824:	4b1a      	ldr	r3, [pc, #104]	; (203890 <__dbg_check_enter_isr+0x70>)
  203826:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  203828:	b672      	cpsid	i
}
  20382a:	bf00      	nop
  20382c:	2330      	movs	r3, #48	; 0x30
  20382e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203830:	9b02      	ldr	r3, [sp, #8]
  203832:	f383 8811 	msr	BASEPRI, r3
}
  203836:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  203838:	b662      	cpsie	i
}
  20383a:	bf00      	nop
}
  20383c:	bf00      	nop
}
  20383e:	bf00      	nop

  port_lock_from_isr();
  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
  203840:	9b03      	ldr	r3, [sp, #12]
  203842:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  203846:	0fdb      	lsrs	r3, r3, #31
  203848:	b2db      	uxtb	r3, r3
  20384a:	2b00      	cmp	r3, #0
  20384c:	d109      	bne.n	203862 <__dbg_check_enter_isr+0x42>
  20384e:	9b03      	ldr	r3, [sp, #12]
  203850:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  203854:	2b00      	cmp	r3, #0
  203856:	bf14      	ite	ne
  203858:	2301      	movne	r3, #1
  20385a:	2300      	moveq	r3, #0
  20385c:	b2db      	uxtb	r3, r3
  20385e:	2b00      	cmp	r3, #0
  203860:	d002      	beq.n	203868 <__dbg_check_enter_isr+0x48>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#8");
  203862:	480c      	ldr	r0, [pc, #48]	; (203894 <__dbg_check_enter_isr+0x74>)
  203864:	f7ff feec 	bl	203640 <chSysHalt>
  }
  oip->dbg.isr_cnt++;
  203868:	9b03      	ldr	r3, [sp, #12]
  20386a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20386e:	1c5a      	adds	r2, r3, #1
  203870:	9b03      	ldr	r3, [sp, #12]
  203872:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  203876:	2300      	movs	r3, #0
  203878:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20387a:	9b01      	ldr	r3, [sp, #4]
  20387c:	f383 8811 	msr	BASEPRI, r3
}
  203880:	bf00      	nop
}
  203882:	bf00      	nop
}
  203884:	bf00      	nop
  port_unlock_from_isr();
}
  203886:	bf00      	nop
  203888:	b005      	add	sp, #20
  20388a:	f85d fb04 	ldr.w	pc, [sp], #4
  20388e:	bf00      	nop
  203890:	20000958 	.word	0x20000958
  203894:	080063ec 	.word	0x080063ec
	...

002038a0 <__dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void __dbg_check_leave_isr(void) {
  2038a0:	b500      	push	{lr}
  2038a2:	b085      	sub	sp, #20
  os_instance_t *oip = currcore;
  2038a4:	4b1b      	ldr	r3, [pc, #108]	; (203914 <__dbg_check_leave_isr+0x74>)
  2038a6:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
  2038a8:	b672      	cpsid	i
}
  2038aa:	bf00      	nop
  2038ac:	2330      	movs	r3, #48	; 0x30
  2038ae:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2038b0:	9b02      	ldr	r3, [sp, #8]
  2038b2:	f383 8811 	msr	BASEPRI, r3
}
  2038b6:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  2038b8:	b662      	cpsie	i
}
  2038ba:	bf00      	nop
}
  2038bc:	bf00      	nop
}
  2038be:	bf00      	nop

  port_lock_from_isr();
  if (unlikely((oip->dbg.isr_cnt <= (cnt_t)0) ||
  2038c0:	9b03      	ldr	r3, [sp, #12]
  2038c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2038c6:	2b00      	cmp	r3, #0
  2038c8:	bfd4      	ite	le
  2038ca:	2301      	movle	r3, #1
  2038cc:	2300      	movgt	r3, #0
  2038ce:	b2db      	uxtb	r3, r3
  2038d0:	2b00      	cmp	r3, #0
  2038d2:	d109      	bne.n	2038e8 <__dbg_check_leave_isr+0x48>
  2038d4:	9b03      	ldr	r3, [sp, #12]
  2038d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  2038da:	2b00      	cmp	r3, #0
  2038dc:	bf14      	ite	ne
  2038de:	2301      	movne	r3, #1
  2038e0:	2300      	moveq	r3, #0
  2038e2:	b2db      	uxtb	r3, r3
  2038e4:	2b00      	cmp	r3, #0
  2038e6:	d002      	beq.n	2038ee <__dbg_check_leave_isr+0x4e>
               (oip->dbg.lock_cnt != (cnt_t)0))) {
    chSysHalt("SV#9");
  2038e8:	480b      	ldr	r0, [pc, #44]	; (203918 <__dbg_check_leave_isr+0x78>)
  2038ea:	f7ff fea9 	bl	203640 <chSysHalt>
  }
  oip->dbg.isr_cnt--;
  2038ee:	9b03      	ldr	r3, [sp, #12]
  2038f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  2038f4:	1e5a      	subs	r2, r3, #1
  2038f6:	9b03      	ldr	r3, [sp, #12]
  2038f8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  2038fc:	2300      	movs	r3, #0
  2038fe:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203900:	9b01      	ldr	r3, [sp, #4]
  203902:	f383 8811 	msr	BASEPRI, r3
}
  203906:	bf00      	nop
}
  203908:	bf00      	nop
}
  20390a:	bf00      	nop
  port_unlock_from_isr();
}
  20390c:	bf00      	nop
  20390e:	b005      	add	sp, #20
  203910:	f85d fb04 	ldr.w	pc, [sp], #4
  203914:	20000958 	.word	0x20000958
  203918:	080063f4 	.word	0x080063f4
  20391c:	00000000 	.word	0x00000000

00203920 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
  203920:	b500      	push	{lr}
  203922:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  203924:	4b0c      	ldr	r3, [pc, #48]	; (203958 <chDbgCheckClassI+0x38>)
  203926:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt < (cnt_t)0) ||
  203928:	9b01      	ldr	r3, [sp, #4]
  20392a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20392e:	0fdb      	lsrs	r3, r3, #31
  203930:	b2db      	uxtb	r3, r3
  203932:	2b00      	cmp	r3, #0
  203934:	d109      	bne.n	20394a <chDbgCheckClassI+0x2a>
  203936:	9b01      	ldr	r3, [sp, #4]
  203938:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  20393c:	2b00      	cmp	r3, #0
  20393e:	bfd4      	ite	le
  203940:	2301      	movle	r3, #1
  203942:	2300      	movgt	r3, #0
  203944:	b2db      	uxtb	r3, r3
  203946:	2b00      	cmp	r3, #0
  203948:	d002      	beq.n	203950 <chDbgCheckClassI+0x30>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#10");
  20394a:	4804      	ldr	r0, [pc, #16]	; (20395c <chDbgCheckClassI+0x3c>)
  20394c:	f7ff fe78 	bl	203640 <chSysHalt>
  }
}
  203950:	bf00      	nop
  203952:	b003      	add	sp, #12
  203954:	f85d fb04 	ldr.w	pc, [sp], #4
  203958:	20000958 	.word	0x20000958
  20395c:	080063fc 	.word	0x080063fc

00203960 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
  203960:	b500      	push	{lr}
  203962:	b083      	sub	sp, #12
  os_instance_t *oip = currcore;
  203964:	4b0e      	ldr	r3, [pc, #56]	; (2039a0 <chDbgCheckClassS+0x40>)
  203966:	9301      	str	r3, [sp, #4]

  if (unlikely((oip->dbg.isr_cnt != (cnt_t)0) ||
  203968:	9b01      	ldr	r3, [sp, #4]
  20396a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
  20396e:	2b00      	cmp	r3, #0
  203970:	bf14      	ite	ne
  203972:	2301      	movne	r3, #1
  203974:	2300      	moveq	r3, #0
  203976:	b2db      	uxtb	r3, r3
  203978:	2b00      	cmp	r3, #0
  20397a:	d109      	bne.n	203990 <chDbgCheckClassS+0x30>
  20397c:	9b01      	ldr	r3, [sp, #4]
  20397e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
  203982:	2b00      	cmp	r3, #0
  203984:	bfd4      	ite	le
  203986:	2301      	movle	r3, #1
  203988:	2300      	movgt	r3, #0
  20398a:	b2db      	uxtb	r3, r3
  20398c:	2b00      	cmp	r3, #0
  20398e:	d002      	beq.n	203996 <chDbgCheckClassS+0x36>
               (oip->dbg.lock_cnt <= (cnt_t)0))) {
    chSysHalt("SV#11");
  203990:	4804      	ldr	r0, [pc, #16]	; (2039a4 <chDbgCheckClassS+0x44>)
  203992:	f7ff fe55 	bl	203640 <chSysHalt>
  }
}
  203996:	bf00      	nop
  203998:	b003      	add	sp, #12
  20399a:	f85d fb04 	ldr.w	pc, [sp], #4
  20399e:	bf00      	nop
  2039a0:	20000958 	.word	0x20000958
  2039a4:	08006404 	.word	0x08006404
	...

002039b0 <port_timer_get_time.lto_priv.0>:
 *
 * @return              The system time.
 *
 * @notapi
 */
static inline systime_t port_timer_get_time(void) {
  2039b0:	b508      	push	{r3, lr}

  return stGetCounter();
  2039b2:	f7fc fec5 	bl	200740 <stGetCounter>
  2039b6:	4603      	mov	r3, r0
}
  2039b8:	4618      	mov	r0, r3
  2039ba:	bd08      	pop	{r3, pc}
  2039bc:	0000      	movs	r0, r0
	...

002039c0 <chVTGetSystemTimeX.lto_priv.0>:
 *
 * @return              The system time in ticks.
 *
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {
  2039c0:	b508      	push	{r3, lr}

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  return port_timer_get_time();
  2039c2:	f7ff fff5 	bl	2039b0 <port_timer_get_time.lto_priv.0>
  2039c6:	4603      	mov	r3, r0
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  2039c8:	4618      	mov	r0, r3
  2039ca:	bd08      	pop	{r3, pc}
  2039cc:	0000      	movs	r0, r0
	...

002039d0 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
NOINLINE static void trace_next(os_instance_t *oip) {
  2039d0:	b510      	push	{r4, lr}
  2039d2:	b082      	sub	sp, #8
  2039d4:	9001      	str	r0, [sp, #4]

  oip->trace_buffer.ptr->time    = chVTGetSystemTimeX();
  2039d6:	9b01      	ldr	r3, [sp, #4]
  2039d8:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
  2039dc:	f7ff fff0 	bl	2039c0 <chVTGetSystemTimeX.lto_priv.0>
  2039e0:	4603      	mov	r3, r0
  2039e2:	6063      	str	r3, [r4, #4]
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
  2039e4:	4b11      	ldr	r3, [pc, #68]	; (203a2c <trace_next+0x5c>)
  2039e6:	685b      	ldr	r3, [r3, #4]
#if PORT_SUPPORTS_RT == TRUE
  oip->trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
  2039e8:	9a01      	ldr	r2, [sp, #4]
  2039ea:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
  2039ee:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
  2039f2:	6813      	ldr	r3, [r2, #0]
  2039f4:	f361 231f 	bfi	r3, r1, #8, #24
  2039f8:	6013      	str	r3, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(oip->trace_buffer.ptr);

  if (++oip->trace_buffer.ptr >= &oip->trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
  2039fa:	9b01      	ldr	r3, [sp, #4]
  2039fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203a00:	f103 0210 	add.w	r2, r3, #16
  203a04:	9b01      	ldr	r3, [sp, #4]
  203a06:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  203a0a:	9b01      	ldr	r3, [sp, #4]
  203a0c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203a10:	9b01      	ldr	r3, [sp, #4]
  203a12:	f603 03f8 	addw	r3, r3, #2296	; 0x8f8
  203a16:	429a      	cmp	r2, r3
  203a18:	d305      	bcc.n	203a26 <trace_next+0x56>
    oip->trace_buffer.ptr = &oip->trace_buffer.buffer[0];
  203a1a:	9b01      	ldr	r3, [sp, #4]
  203a1c:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
  203a20:	9b01      	ldr	r3, [sp, #4]
  203a22:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  }
}
  203a26:	bf00      	nop
  203a28:	b002      	add	sp, #8
  203a2a:	bd10      	pop	{r4, pc}
  203a2c:	e0001000 	.word	0xe0001000

00203a30 <__trace_object_init>:
 *
 * @param[out] tbp      pointer to the @p trace_buffer_t structure
 *
 * @notapi
 */
void __trace_object_init(trace_buffer_t *tbp) {
  203a30:	b084      	sub	sp, #16
  203a32:	9001      	str	r0, [sp, #4]
  unsigned i;

  tbp->suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  203a34:	9b01      	ldr	r3, [sp, #4]
  203a36:	f64f 72e0 	movw	r2, #65504	; 0xffe0
  203a3a:	801a      	strh	r2, [r3, #0]
  tbp->size      = CH_DBG_TRACE_BUFFER_SIZE;
  203a3c:	9b01      	ldr	r3, [sp, #4]
  203a3e:	2280      	movs	r2, #128	; 0x80
  203a40:	805a      	strh	r2, [r3, #2]
  tbp->ptr       = &tbp->buffer[0];
  203a42:	9b01      	ldr	r3, [sp, #4]
  203a44:	f103 0208 	add.w	r2, r3, #8
  203a48:	9b01      	ldr	r3, [sp, #4]
  203a4a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
  203a4c:	2300      	movs	r3, #0
  203a4e:	9303      	str	r3, [sp, #12]
  203a50:	e00c      	b.n	203a6c <__trace_object_init+0x3c>
    tbp->buffer[i].type = CH_TRACE_TYPE_UNUSED;
  203a52:	9a01      	ldr	r2, [sp, #4]
  203a54:	9b03      	ldr	r3, [sp, #12]
  203a56:	011b      	lsls	r3, r3, #4
  203a58:	4413      	add	r3, r2
  203a5a:	f103 0208 	add.w	r2, r3, #8
  203a5e:	7813      	ldrb	r3, [r2, #0]
  203a60:	f36f 0302 	bfc	r3, #0, #3
  203a64:	7013      	strb	r3, [r2, #0]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
  203a66:	9b03      	ldr	r3, [sp, #12]
  203a68:	3301      	adds	r3, #1
  203a6a:	9303      	str	r3, [sp, #12]
  203a6c:	9b03      	ldr	r3, [sp, #12]
  203a6e:	2b7f      	cmp	r3, #127	; 0x7f
  203a70:	d9ef      	bls.n	203a52 <__trace_object_init+0x22>
  }
}
  203a72:	bf00      	nop
  203a74:	bf00      	nop
  203a76:	b004      	add	sp, #16
  203a78:	4770      	bx	lr
  203a7a:	bf00      	nop
  203a7c:	0000      	movs	r0, r0
	...

00203a80 <__trace_ready>:
 * @param[in] tp        the thread that just become ready
 * @param[in] msg       the thread ready message
 *
 * @notapi
 */
void __trace_ready(thread_t *tp, msg_t msg) {
  203a80:	b500      	push	{lr}
  203a82:	b085      	sub	sp, #20
  203a84:	9001      	str	r0, [sp, #4]
  203a86:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
  203a88:	4b17      	ldr	r3, [pc, #92]	; (203ae8 <__trace_ready+0x68>)
  203a8a:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_READY) == 0U) {
  203a8c:	9b03      	ldr	r3, [sp, #12]
  203a8e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  203a92:	f003 0301 	and.w	r3, r3, #1
  203a96:	2b00      	cmp	r3, #0
  203a98:	d121      	bne.n	203ade <__trace_ready+0x5e>
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_READY;
  203a9a:	9b03      	ldr	r3, [sp, #12]
  203a9c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203aa0:	7813      	ldrb	r3, [r2, #0]
  203aa2:	2101      	movs	r1, #1
  203aa4:	f361 0302 	bfi	r3, r1, #0, #3
  203aa8:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = (uint8_t)tp->state;
  203aaa:	9b01      	ldr	r3, [sp, #4]
  203aac:	7f19      	ldrb	r1, [r3, #28]
  203aae:	9b03      	ldr	r3, [sp, #12]
  203ab0:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203ab4:	460b      	mov	r3, r1
  203ab6:	f003 031f 	and.w	r3, r3, #31
  203aba:	b2d9      	uxtb	r1, r3
  203abc:	7813      	ldrb	r3, [r2, #0]
  203abe:	f361 03c7 	bfi	r3, r1, #3, #5
  203ac2:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.rdy.tp    = tp;
  203ac4:	9b03      	ldr	r3, [sp, #12]
  203ac6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203aca:	9a01      	ldr	r2, [sp, #4]
  203acc:	609a      	str	r2, [r3, #8]
    oip->trace_buffer.ptr->u.rdy.msg   = msg;
  203ace:	9b03      	ldr	r3, [sp, #12]
  203ad0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203ad4:	9a00      	ldr	r2, [sp, #0]
  203ad6:	60da      	str	r2, [r3, #12]
    trace_next(oip);
  203ad8:	9803      	ldr	r0, [sp, #12]
  203ada:	f7ff ff79 	bl	2039d0 <trace_next>
  }
}
  203ade:	bf00      	nop
  203ae0:	b005      	add	sp, #20
  203ae2:	f85d fb04 	ldr.w	pc, [sp], #4
  203ae6:	bf00      	nop
  203ae8:	20000958 	.word	0x20000958
  203aec:	00000000 	.word	0x00000000

00203af0 <__trace_switch>:
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void __trace_switch(thread_t *ntp, thread_t *otp) {
  203af0:	b500      	push	{lr}
  203af2:	b085      	sub	sp, #20
  203af4:	9001      	str	r0, [sp, #4]
  203af6:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
  203af8:	4b17      	ldr	r3, [pc, #92]	; (203b58 <__trace_switch+0x68>)
  203afa:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
  203afc:	9b03      	ldr	r3, [sp, #12]
  203afe:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  203b02:	f003 0302 	and.w	r3, r3, #2
  203b06:	2b00      	cmp	r3, #0
  203b08:	d122      	bne.n	203b50 <__trace_switch+0x60>
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
  203b0a:	9b03      	ldr	r3, [sp, #12]
  203b0c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203b10:	7813      	ldrb	r3, [r2, #0]
  203b12:	2102      	movs	r1, #2
  203b14:	f361 0302 	bfi	r3, r1, #0, #3
  203b18:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = (uint8_t)otp->state;
  203b1a:	9b00      	ldr	r3, [sp, #0]
  203b1c:	7f19      	ldrb	r1, [r3, #28]
  203b1e:	9b03      	ldr	r3, [sp, #12]
  203b20:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203b24:	460b      	mov	r3, r1
  203b26:	f003 031f 	and.w	r3, r3, #31
  203b2a:	b2d9      	uxtb	r1, r3
  203b2c:	7813      	ldrb	r3, [r2, #0]
  203b2e:	f361 03c7 	bfi	r3, r1, #3, #5
  203b32:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.sw.ntp    = ntp;
  203b34:	9b03      	ldr	r3, [sp, #12]
  203b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203b3a:	9a01      	ldr	r2, [sp, #4]
  203b3c:	609a      	str	r2, [r3, #8]
    oip->trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
  203b3e:	9b03      	ldr	r3, [sp, #12]
  203b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203b44:	9a00      	ldr	r2, [sp, #0]
  203b46:	6b52      	ldr	r2, [r2, #52]	; 0x34
  203b48:	60da      	str	r2, [r3, #12]
    trace_next(oip);
  203b4a:	9803      	ldr	r0, [sp, #12]
  203b4c:	f7ff ff40 	bl	2039d0 <trace_next>
  }
}
  203b50:	bf00      	nop
  203b52:	b005      	add	sp, #20
  203b54:	f85d fb04 	ldr.w	pc, [sp], #4
  203b58:	20000958 	.word	0x20000958
  203b5c:	00000000 	.word	0x00000000

00203b60 <__trace_isr_enter>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void __trace_isr_enter(const char *isr) {
  203b60:	b500      	push	{lr}
  203b62:	b087      	sub	sp, #28
  203b64:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
  203b66:	4b1c      	ldr	r3, [pc, #112]	; (203bd8 <__trace_isr_enter+0x78>)
  203b68:	9305      	str	r3, [sp, #20]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
  203b6a:	9b05      	ldr	r3, [sp, #20]
  203b6c:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  203b70:	f003 0304 	and.w	r3, r3, #4
  203b74:	2b00      	cmp	r3, #0
  203b76:	d12a      	bne.n	203bce <__trace_isr_enter+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
  203b78:	b672      	cpsid	i
}
  203b7a:	bf00      	nop
  203b7c:	2330      	movs	r3, #48	; 0x30
  203b7e:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203b80:	9b03      	ldr	r3, [sp, #12]
  203b82:	f383 8811 	msr	BASEPRI, r3
}
  203b86:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  203b88:	b662      	cpsie	i
}
  203b8a:	bf00      	nop
}
  203b8c:	bf00      	nop
}
  203b8e:	bf00      	nop
    port_lock_from_isr();
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
  203b90:	9b05      	ldr	r3, [sp, #20]
  203b92:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203b96:	7813      	ldrb	r3, [r2, #0]
  203b98:	2103      	movs	r1, #3
  203b9a:	f361 0302 	bfi	r3, r1, #0, #3
  203b9e:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = 0U;
  203ba0:	9b05      	ldr	r3, [sp, #20]
  203ba2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203ba6:	7813      	ldrb	r3, [r2, #0]
  203ba8:	f36f 03c7 	bfc	r3, #3, #5
  203bac:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.isr.name  = isr;
  203bae:	9b05      	ldr	r3, [sp, #20]
  203bb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203bb4:	9a01      	ldr	r2, [sp, #4]
  203bb6:	609a      	str	r2, [r3, #8]
    trace_next(oip);
  203bb8:	9805      	ldr	r0, [sp, #20]
  203bba:	f7ff ff09 	bl	2039d0 <trace_next>
  203bbe:	2300      	movs	r3, #0
  203bc0:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203bc2:	9b04      	ldr	r3, [sp, #16]
  203bc4:	f383 8811 	msr	BASEPRI, r3
}
  203bc8:	bf00      	nop
}
  203bca:	bf00      	nop
}
  203bcc:	bf00      	nop
    port_unlock_from_isr();
  }
}
  203bce:	bf00      	nop
  203bd0:	b007      	add	sp, #28
  203bd2:	f85d fb04 	ldr.w	pc, [sp], #4
  203bd6:	bf00      	nop
  203bd8:	20000958 	.word	0x20000958
  203bdc:	00000000 	.word	0x00000000

00203be0 <__trace_isr_leave>:
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void __trace_isr_leave(const char *isr) {
  203be0:	b500      	push	{lr}
  203be2:	b087      	sub	sp, #28
  203be4:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
  203be6:	4b1c      	ldr	r3, [pc, #112]	; (203c58 <__trace_isr_leave+0x78>)
  203be8:	9305      	str	r3, [sp, #20]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
  203bea:	9b05      	ldr	r3, [sp, #20]
  203bec:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  203bf0:	f003 0304 	and.w	r3, r3, #4
  203bf4:	2b00      	cmp	r3, #0
  203bf6:	d12a      	bne.n	203c4e <__trace_isr_leave+0x6e>
  __ASM volatile ("cpsid i" : : : "memory");
  203bf8:	b672      	cpsid	i
}
  203bfa:	bf00      	nop
  203bfc:	2330      	movs	r3, #48	; 0x30
  203bfe:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203c00:	9b03      	ldr	r3, [sp, #12]
  203c02:	f383 8811 	msr	BASEPRI, r3
}
  203c06:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  203c08:	b662      	cpsie	i
}
  203c0a:	bf00      	nop
}
  203c0c:	bf00      	nop
}
  203c0e:	bf00      	nop
    port_lock_from_isr();
    oip->trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
  203c10:	9b05      	ldr	r3, [sp, #20]
  203c12:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203c16:	7813      	ldrb	r3, [r2, #0]
  203c18:	2104      	movs	r1, #4
  203c1a:	f361 0302 	bfi	r3, r1, #0, #3
  203c1e:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state       = 0U;
  203c20:	9b05      	ldr	r3, [sp, #20]
  203c22:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203c26:	7813      	ldrb	r3, [r2, #0]
  203c28:	f36f 03c7 	bfc	r3, #3, #5
  203c2c:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.isr.name  = isr;
  203c2e:	9b05      	ldr	r3, [sp, #20]
  203c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203c34:	9a01      	ldr	r2, [sp, #4]
  203c36:	609a      	str	r2, [r3, #8]
    trace_next(oip);
  203c38:	9805      	ldr	r0, [sp, #20]
  203c3a:	f7ff fec9 	bl	2039d0 <trace_next>
  203c3e:	2300      	movs	r3, #0
  203c40:	9304      	str	r3, [sp, #16]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203c42:	9b04      	ldr	r3, [sp, #16]
  203c44:	f383 8811 	msr	BASEPRI, r3
}
  203c48:	bf00      	nop
}
  203c4a:	bf00      	nop
}
  203c4c:	bf00      	nop
    port_unlock_from_isr();
  }
}
  203c4e:	bf00      	nop
  203c50:	b007      	add	sp, #28
  203c52:	f85d fb04 	ldr.w	pc, [sp], #4
  203c56:	bf00      	nop
  203c58:	20000958 	.word	0x20000958
  203c5c:	00000000 	.word	0x00000000

00203c60 <__trace_halt>:
 *
 * @param[in] reason    the halt error string
 *
 * @notapi
 */
void __trace_halt(const char *reason) {
  203c60:	b500      	push	{lr}
  203c62:	b085      	sub	sp, #20
  203c64:	9001      	str	r0, [sp, #4]
  os_instance_t *oip = currcore;
  203c66:	4b12      	ldr	r3, [pc, #72]	; (203cb0 <__trace_halt+0x50>)
  203c68:	9303      	str	r3, [sp, #12]

  if ((oip->trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
  203c6a:	9b03      	ldr	r3, [sp, #12]
  203c6c:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
  203c70:	f003 0308 	and.w	r3, r3, #8
  203c74:	2b00      	cmp	r3, #0
  203c76:	d116      	bne.n	203ca6 <__trace_halt+0x46>
    oip->trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
  203c78:	9b03      	ldr	r3, [sp, #12]
  203c7a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203c7e:	7813      	ldrb	r3, [r2, #0]
  203c80:	2105      	movs	r1, #5
  203c82:	f361 0302 	bfi	r3, r1, #0, #3
  203c86:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->state         = 0;
  203c88:	9b03      	ldr	r3, [sp, #12]
  203c8a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
  203c8e:	7813      	ldrb	r3, [r2, #0]
  203c90:	f36f 03c7 	bfc	r3, #3, #5
  203c94:	7013      	strb	r3, [r2, #0]
    oip->trace_buffer.ptr->u.halt.reason = reason;
  203c96:	9b03      	ldr	r3, [sp, #12]
  203c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  203c9c:	9a01      	ldr	r2, [sp, #4]
  203c9e:	609a      	str	r2, [r3, #8]
    trace_next(oip);
  203ca0:	9803      	ldr	r0, [sp, #12]
  203ca2:	f7ff fe95 	bl	2039d0 <trace_next>
  }
}
  203ca6:	bf00      	nop
  203ca8:	b005      	add	sp, #20
  203caa:	f85d fb04 	ldr.w	pc, [sp], #4
  203cae:	bf00      	nop
  203cb0:	20000958 	.word	0x20000958
	...

00203cc0 <chTimeAddX>:
 * @return              The new system time.
 *
 * @xclass
 */
static inline systime_t chTimeAddX(systime_t systime,
                                   sysinterval_t interval) {
  203cc0:	b082      	sub	sp, #8
  203cc2:	9001      	str	r0, [sp, #4]
  203cc4:	9100      	str	r1, [sp, #0]

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
#endif

  return systime + (systime_t)interval;
  203cc6:	9a01      	ldr	r2, [sp, #4]
  203cc8:	9b00      	ldr	r3, [sp, #0]
  203cca:	4413      	add	r3, r2
}
  203ccc:	4618      	mov	r0, r3
  203cce:	b002      	add	sp, #8
  203cd0:	4770      	bx	lr
  203cd2:	bf00      	nop
	...

00203ce0 <chTimeDiffX.lto_priv.0>:
 * @param[in] end       second system time
 * @return              The interval representing the time difference.
 *
 * @xclass
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
  203ce0:	b082      	sub	sp, #8
  203ce2:	9001      	str	r0, [sp, #4]
  203ce4:	9100      	str	r1, [sp, #0]

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
  203ce6:	9a00      	ldr	r2, [sp, #0]
  203ce8:	9b01      	ldr	r3, [sp, #4]
  203cea:	1ad3      	subs	r3, r2, r3
  /*lint -restore*/
}
  203cec:	4618      	mov	r0, r3
  203cee:	b002      	add	sp, #8
  203cf0:	4770      	bx	lr
  203cf2:	bf00      	nop
	...

00203d00 <ch_dlist_isempty>:
 * @param[in] dlhp      pointer to the delta list header
 * @return              The status of the delta list.
 *
 * @notapi
 */
static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
  203d00:	b082      	sub	sp, #8
  203d02:	9001      	str	r0, [sp, #4]

  return (bool)(dlhp == dlhp->next);
  203d04:	9b01      	ldr	r3, [sp, #4]
  203d06:	681b      	ldr	r3, [r3, #0]
  203d08:	9a01      	ldr	r2, [sp, #4]
  203d0a:	429a      	cmp	r2, r3
  203d0c:	bf0c      	ite	eq
  203d0e:	2301      	moveq	r3, #1
  203d10:	2300      	movne	r3, #0
  203d12:	b2db      	uxtb	r3, r3
}
  203d14:	4618      	mov	r0, r3
  203d16:	b002      	add	sp, #8
  203d18:	4770      	bx	lr
  203d1a:	bf00      	nop
  203d1c:	0000      	movs	r0, r0
	...

00203d20 <ch_dlist_isfirst>:
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
                                    ch_delta_list_t *dlp) {
  203d20:	b082      	sub	sp, #8
  203d22:	9001      	str	r0, [sp, #4]
  203d24:	9100      	str	r1, [sp, #0]

  return (bool)(dlhp->next == dlp);
  203d26:	9b01      	ldr	r3, [sp, #4]
  203d28:	681b      	ldr	r3, [r3, #0]
  203d2a:	9a00      	ldr	r2, [sp, #0]
  203d2c:	429a      	cmp	r2, r3
  203d2e:	bf0c      	ite	eq
  203d30:	2301      	moveq	r3, #1
  203d32:	2300      	movne	r3, #0
  203d34:	b2db      	uxtb	r3, r3
}
  203d36:	4618      	mov	r0, r3
  203d38:	b002      	add	sp, #8
  203d3a:	4770      	bx	lr
  203d3c:	0000      	movs	r0, r0
	...

00203d40 <ch_dlist_insert_after>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
                                         ch_delta_list_t *dlp,
                                         sysinterval_t delta) {
  203d40:	b084      	sub	sp, #16
  203d42:	9003      	str	r0, [sp, #12]
  203d44:	9102      	str	r1, [sp, #8]
  203d46:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
  203d48:	9b02      	ldr	r3, [sp, #8]
  203d4a:	9a01      	ldr	r2, [sp, #4]
  203d4c:	609a      	str	r2, [r3, #8]
  dlp->prev       = dlhp;
  203d4e:	9b02      	ldr	r3, [sp, #8]
  203d50:	9a03      	ldr	r2, [sp, #12]
  203d52:	605a      	str	r2, [r3, #4]
  dlp->next       = dlp->prev->next;
  203d54:	9b02      	ldr	r3, [sp, #8]
  203d56:	685b      	ldr	r3, [r3, #4]
  203d58:	681a      	ldr	r2, [r3, #0]
  203d5a:	9b02      	ldr	r3, [sp, #8]
  203d5c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp;
  203d5e:	9b02      	ldr	r3, [sp, #8]
  203d60:	681b      	ldr	r3, [r3, #0]
  203d62:	9a02      	ldr	r2, [sp, #8]
  203d64:	605a      	str	r2, [r3, #4]
  dlhp->next      = dlp;
  203d66:	9b03      	ldr	r3, [sp, #12]
  203d68:	9a02      	ldr	r2, [sp, #8]
  203d6a:	601a      	str	r2, [r3, #0]
}
  203d6c:	bf00      	nop
  203d6e:	b004      	add	sp, #16
  203d70:	4770      	bx	lr
  203d72:	bf00      	nop
	...

00203d80 <ch_dlist_insert_before>:
 *
 * @notapi
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {
  203d80:	b084      	sub	sp, #16
  203d82:	9003      	str	r0, [sp, #12]
  203d84:	9102      	str	r1, [sp, #8]
  203d86:	9201      	str	r2, [sp, #4]

  dlp->delta      = delta;
  203d88:	9b02      	ldr	r3, [sp, #8]
  203d8a:	9a01      	ldr	r2, [sp, #4]
  203d8c:	609a      	str	r2, [r3, #8]
  dlp->next       = dlhp;
  203d8e:	9b02      	ldr	r3, [sp, #8]
  203d90:	9a03      	ldr	r2, [sp, #12]
  203d92:	601a      	str	r2, [r3, #0]
  dlp->prev       = dlp->next->prev;
  203d94:	9b02      	ldr	r3, [sp, #8]
  203d96:	681b      	ldr	r3, [r3, #0]
  203d98:	685a      	ldr	r2, [r3, #4]
  203d9a:	9b02      	ldr	r3, [sp, #8]
  203d9c:	605a      	str	r2, [r3, #4]
  dlp->prev->next = dlp;
  203d9e:	9b02      	ldr	r3, [sp, #8]
  203da0:	685b      	ldr	r3, [r3, #4]
  203da2:	9a02      	ldr	r2, [sp, #8]
  203da4:	601a      	str	r2, [r3, #0]
  dlhp->prev      = dlp;
  203da6:	9b03      	ldr	r3, [sp, #12]
  203da8:	9a02      	ldr	r2, [sp, #8]
  203daa:	605a      	str	r2, [r3, #4]
}
  203dac:	bf00      	nop
  203dae:	b004      	add	sp, #16
  203db0:	4770      	bx	lr
  203db2:	bf00      	nop
	...

00203dc0 <ch_dlist_insert>:
 *
 * @notapi
 */
static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
                                   ch_delta_list_t *dlep,
                                   sysinterval_t delta) {
  203dc0:	b500      	push	{lr}
  203dc2:	b087      	sub	sp, #28
  203dc4:	9003      	str	r0, [sp, #12]
  203dc6:	9102      	str	r1, [sp, #8]
  203dc8:	9201      	str	r2, [sp, #4]
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  203dca:	9b03      	ldr	r3, [sp, #12]
  203dcc:	681b      	ldr	r3, [r3, #0]
  203dce:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
  203dd0:	e013      	b.n	203dfa <ch_dlist_insert+0x3a>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");
  203dd2:	9a05      	ldr	r2, [sp, #20]
  203dd4:	9b02      	ldr	r3, [sp, #8]
  203dd6:	429a      	cmp	r2, r3
  203dd8:	bf0c      	ite	eq
  203dda:	2301      	moveq	r3, #1
  203ddc:	2300      	movne	r3, #0
  203dde:	b2db      	uxtb	r3, r3
  203de0:	2b00      	cmp	r3, #0
  203de2:	d002      	beq.n	203dea <ch_dlist_insert+0x2a>
  203de4:	4813      	ldr	r0, [pc, #76]	; (203e34 <ch_dlist_insert+0x74>)
  203de6:	f7ff fc2b 	bl	203640 <chSysHalt>

    delta -= dlp->delta;
  203dea:	9b05      	ldr	r3, [sp, #20]
  203dec:	689b      	ldr	r3, [r3, #8]
  203dee:	9a01      	ldr	r2, [sp, #4]
  203df0:	1ad3      	subs	r3, r2, r3
  203df2:	9301      	str	r3, [sp, #4]
    dlp = dlp->next;
  203df4:	9b05      	ldr	r3, [sp, #20]
  203df6:	681b      	ldr	r3, [r3, #0]
  203df8:	9305      	str	r3, [sp, #20]
  while (likely(dlp->delta < delta)) {
  203dfa:	9b05      	ldr	r3, [sp, #20]
  203dfc:	689b      	ldr	r3, [r3, #8]
  203dfe:	9a01      	ldr	r2, [sp, #4]
  203e00:	429a      	cmp	r2, r3
  203e02:	bf8c      	ite	hi
  203e04:	2301      	movhi	r3, #1
  203e06:	2300      	movls	r3, #0
  203e08:	b2db      	uxtb	r3, r3
  203e0a:	2b00      	cmp	r3, #0
  203e0c:	d1e1      	bne.n	203dd2 <ch_dlist_insert+0x12>
  }

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);
  203e0e:	9a01      	ldr	r2, [sp, #4]
  203e10:	9902      	ldr	r1, [sp, #8]
  203e12:	9805      	ldr	r0, [sp, #20]
  203e14:	f7ff ffb4 	bl	203d80 <ch_dlist_insert_before>

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
  203e18:	9b05      	ldr	r3, [sp, #20]
  203e1a:	689a      	ldr	r2, [r3, #8]
  203e1c:	9b01      	ldr	r3, [sp, #4]
  203e1e:	1ad2      	subs	r2, r2, r3
  203e20:	9b05      	ldr	r3, [sp, #20]
  203e22:	609a      	str	r2, [r3, #8]

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
  203e24:	9b03      	ldr	r3, [sp, #12]
  203e26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  203e2a:	609a      	str	r2, [r3, #8]
}
  203e2c:	bf00      	nop
  203e2e:	b007      	add	sp, #28
  203e30:	f85d fb04 	ldr.w	pc, [sp], #4
  203e34:	0800640c 	.word	0x0800640c
	...

00203e40 <ch_dlist_remove_first>:
 *
 * @param[in] dlhp      pointer to the delta list header
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
  203e40:	b084      	sub	sp, #16
  203e42:	9001      	str	r0, [sp, #4]
  ch_delta_list_t *dlp = dlhp->next;
  203e44:	9b01      	ldr	r3, [sp, #4]
  203e46:	681b      	ldr	r3, [r3, #0]
  203e48:	9303      	str	r3, [sp, #12]

  dlhp->next       = dlp->next;
  203e4a:	9b03      	ldr	r3, [sp, #12]
  203e4c:	681a      	ldr	r2, [r3, #0]
  203e4e:	9b01      	ldr	r3, [sp, #4]
  203e50:	601a      	str	r2, [r3, #0]
  dlhp->next->prev = dlhp;
  203e52:	9b01      	ldr	r3, [sp, #4]
  203e54:	681b      	ldr	r3, [r3, #0]
  203e56:	9a01      	ldr	r2, [sp, #4]
  203e58:	605a      	str	r2, [r3, #4]

  return dlp;
  203e5a:	9b03      	ldr	r3, [sp, #12]
}
  203e5c:	4618      	mov	r0, r3
  203e5e:	b004      	add	sp, #16
  203e60:	4770      	bx	lr
  203e62:	bf00      	nop
	...

00203e70 <ch_dlist_dequeue>:
 *
 * @param[in] dlp       pointer to the delta list element
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
  203e70:	b082      	sub	sp, #8
  203e72:	9001      	str	r0, [sp, #4]

  dlp->prev->next = dlp->next;
  203e74:	9b01      	ldr	r3, [sp, #4]
  203e76:	685b      	ldr	r3, [r3, #4]
  203e78:	9a01      	ldr	r2, [sp, #4]
  203e7a:	6812      	ldr	r2, [r2, #0]
  203e7c:	601a      	str	r2, [r3, #0]
  dlp->next->prev = dlp->prev;
  203e7e:	9b01      	ldr	r3, [sp, #4]
  203e80:	681b      	ldr	r3, [r3, #0]
  203e82:	9a01      	ldr	r2, [sp, #4]
  203e84:	6852      	ldr	r2, [r2, #4]
  203e86:	605a      	str	r2, [r3, #4]

  return dlp;
  203e88:	9b01      	ldr	r3, [sp, #4]
}
  203e8a:	4618      	mov	r0, r3
  203e8c:	b002      	add	sp, #8
  203e8e:	4770      	bx	lr

00203e90 <port_timer_start_alarm>:
static inline void port_timer_start_alarm(systime_t time) {
  203e90:	b500      	push	{lr}
  203e92:	b083      	sub	sp, #12
  203e94:	9001      	str	r0, [sp, #4]
  stStartAlarm(time);
  203e96:	9801      	ldr	r0, [sp, #4]
  203e98:	f7fc fc5a 	bl	200750 <stStartAlarm>
}
  203e9c:	bf00      	nop
  203e9e:	b003      	add	sp, #12
  203ea0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203eb0 <port_timer_stop_alarm>:
static inline void port_timer_stop_alarm(void) {
  203eb0:	b508      	push	{r3, lr}
  stStopAlarm();
  203eb2:	f7fc fc65 	bl	200780 <stStopAlarm>
}
  203eb6:	bf00      	nop
  203eb8:	bd08      	pop	{r3, pc}
  203eba:	bf00      	nop
  203ebc:	0000      	movs	r0, r0
	...

00203ec0 <port_timer_set_alarm>:
static inline void port_timer_set_alarm(systime_t time) {
  203ec0:	b500      	push	{lr}
  203ec2:	b083      	sub	sp, #12
  203ec4:	9001      	str	r0, [sp, #4]
  stSetAlarm(time);
  203ec6:	9801      	ldr	r0, [sp, #4]
  203ec8:	f7fc fc62 	bl	200790 <stSetAlarm>
}
  203ecc:	bf00      	nop
  203ece:	b003      	add	sp, #12
  203ed0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203ee0 <port_timer_get_time.lto_priv.1>:
static inline systime_t port_timer_get_time(void) {
  203ee0:	b508      	push	{r3, lr}
  return stGetCounter();
  203ee2:	f7fc fc2d 	bl	200740 <stGetCounter>
  203ee6:	4603      	mov	r3, r0
}
  203ee8:	4618      	mov	r0, r3
  203eea:	bd08      	pop	{r3, pc}
  203eec:	0000      	movs	r0, r0
	...

00203ef0 <chSysLockFromISR.lto_priv.4>:
static inline void chSysLockFromISR(void) {
  203ef0:	b500      	push	{lr}
  203ef2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  203ef4:	b672      	cpsid	i
}
  203ef6:	bf00      	nop
  203ef8:	2330      	movs	r3, #48	; 0x30
  203efa:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203efc:	9b01      	ldr	r3, [sp, #4]
  203efe:	f383 8811 	msr	BASEPRI, r3
}
  203f02:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  203f04:	b662      	cpsie	i
}
  203f06:	bf00      	nop
}
  203f08:	bf00      	nop
}
  203f0a:	bf00      	nop
  __dbg_check_lock_from_isr();
  203f0c:	f7ff fc38 	bl	203780 <__dbg_check_lock_from_isr>
}
  203f10:	bf00      	nop
  203f12:	b003      	add	sp, #12
  203f14:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00203f20 <chSysUnlockFromISR.lto_priv.4>:
static inline void chSysUnlockFromISR(void) {
  203f20:	b500      	push	{lr}
  203f22:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  203f24:	f7ff fc54 	bl	2037d0 <__dbg_check_unlock_from_isr>
  203f28:	2300      	movs	r3, #0
  203f2a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  203f2c:	9b01      	ldr	r3, [sp, #4]
  203f2e:	f383 8811 	msr	BASEPRI, r3
}
  203f32:	bf00      	nop
}
  203f34:	bf00      	nop
}
  203f36:	bf00      	nop
}
  203f38:	bf00      	nop
  203f3a:	b003      	add	sp, #12
  203f3c:	f85d fb04 	ldr.w	pc, [sp], #4

00203f40 <chVTGetSystemTimeX.lto_priv.1>:
static inline systime_t chVTGetSystemTimeX(void) {
  203f40:	b508      	push	{r3, lr}
  return port_timer_get_time();
  203f42:	f7ff ffcd 	bl	203ee0 <port_timer_get_time.lto_priv.1>
  203f46:	4603      	mov	r3, r0
}
  203f48:	4618      	mov	r0, r3
  203f4a:	bd08      	pop	{r3, pc}
  203f4c:	0000      	movs	r0, r0
	...

00203f50 <chVTIsArmedI.lto_priv.0>:
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 * @return              true if the timer is armed.
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
  203f50:	b500      	push	{lr}
  203f52:	b083      	sub	sp, #12
  203f54:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  203f56:	f7ff fce3 	bl	203920 <chDbgCheckClassI>

  return (bool)(vtp->dlist.next != NULL);
  203f5a:	9b01      	ldr	r3, [sp, #4]
  203f5c:	681b      	ldr	r3, [r3, #0]
  203f5e:	2b00      	cmp	r3, #0
  203f60:	bf14      	ite	ne
  203f62:	2301      	movne	r3, #1
  203f64:	2300      	moveq	r3, #0
  203f66:	b2db      	uxtb	r3, r3
}
  203f68:	4618      	mov	r0, r3
  203f6a:	b003      	add	sp, #12
  203f6c:	f85d fb04 	ldr.w	pc, [sp], #4

00203f70 <vt_set_alarm>:
 * @param[in] now       last known system time
 * @param[in] delay     delay over @p now
 */
static void vt_set_alarm(virtual_timers_list_t *vtlp,
                         systime_t now,
                         sysinterval_t delay) {
  203f70:	b500      	push	{lr}
  203f72:	b089      	sub	sp, #36	; 0x24
  203f74:	9003      	str	r0, [sp, #12]
  203f76:	9102      	str	r1, [sp, #8]
  203f78:	9201      	str	r2, [sp, #4]
  sysinterval_t currdelta;

  /* Initial delta is what is configured statically.*/
  currdelta = vtlp->lastdelta;
  203f7a:	9b03      	ldr	r3, [sp, #12]
  203f7c:	691b      	ldr	r3, [r3, #16]
  203f7e:	9307      	str	r3, [sp, #28]

  if (delay < currdelta) {
  203f80:	9a01      	ldr	r2, [sp, #4]
  203f82:	9b07      	ldr	r3, [sp, #28]
  203f84:	429a      	cmp	r2, r3
  203f86:	d201      	bcs.n	203f8c <vt_set_alarm+0x1c>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
  203f88:	9b07      	ldr	r3, [sp, #28]
  203f8a:	9301      	str	r3, [sp, #4]
  while (true) {
    sysinterval_t nowdelta;
    systime_t newnow;

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, delay));
  203f8c:	9901      	ldr	r1, [sp, #4]
  203f8e:	9802      	ldr	r0, [sp, #8]
  203f90:	f7ff fe96 	bl	203cc0 <chTimeAddX>
  203f94:	4603      	mov	r3, r0
  203f96:	4618      	mov	r0, r3
  203f98:	f7ff ff92 	bl	203ec0 <port_timer_set_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
  203f9c:	f7ff ffd0 	bl	203f40 <chVTGetSystemTimeX.lto_priv.1>
  203fa0:	9006      	str	r0, [sp, #24]
    nowdelta = chTimeDiffX(now, newnow);
  203fa2:	9906      	ldr	r1, [sp, #24]
  203fa4:	9802      	ldr	r0, [sp, #8]
  203fa6:	f7ff fe9b 	bl	203ce0 <chTimeDiffX.lto_priv.0>
  203faa:	9005      	str	r0, [sp, #20]
    if (likely(nowdelta < delay)) {
  203fac:	9a05      	ldr	r2, [sp, #20]
  203fae:	9b01      	ldr	r3, [sp, #4]
  203fb0:	429a      	cmp	r2, r3
  203fb2:	bf34      	ite	cc
  203fb4:	2301      	movcc	r3, #1
  203fb6:	2300      	movcs	r3, #0
  203fb8:	b2db      	uxtb	r3, r3
  203fba:	2b00      	cmp	r3, #0
  203fbc:	d107      	bne.n	203fce <vt_set_alarm+0x5e>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
  203fbe:	9b07      	ldr	r3, [sp, #28]
  203fc0:	3301      	adds	r3, #1
  203fc2:	9307      	str	r3, [sp, #28]

    /* Current time becomes the new "base" time.*/
    now = newnow;
  203fc4:	9b06      	ldr	r3, [sp, #24]
  203fc6:	9302      	str	r3, [sp, #8]
    delay = currdelta;
  203fc8:	9b07      	ldr	r3, [sp, #28]
  203fca:	9301      	str	r3, [sp, #4]
  while (true) {
  203fcc:	e7de      	b.n	203f8c <vt_set_alarm+0x1c>
      break;
  203fce:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > vtlp->lastdelta) {
  203fd0:	9b03      	ldr	r3, [sp, #12]
  203fd2:	691b      	ldr	r3, [r3, #16]
  203fd4:	9a07      	ldr	r2, [sp, #28]
  203fd6:	429a      	cmp	r2, r3
  203fd8:	d905      	bls.n	203fe6 <vt_set_alarm+0x76>
    vtlp->lastdelta = currdelta;
  203fda:	9b03      	ldr	r3, [sp, #12]
  203fdc:	9a07      	ldr	r2, [sp, #28]
  203fde:	611a      	str	r2, [r3, #16]
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
  203fe0:	2001      	movs	r0, #1
  203fe2:	f7ff fb6d 	bl	2036c0 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
  203fe6:	bf00      	nop
  203fe8:	b009      	add	sp, #36	; 0x24
  203fea:	f85d fb04 	ldr.w	pc, [sp], #4
  203fee:	bf00      	nop

00203ff0 <vt_insert_first>:
 * @param[in] delay     delay over @p now
 */
static void vt_insert_first(virtual_timers_list_t *vtlp,
                            virtual_timer_t *vtp,
                            systime_t now,
                            sysinterval_t delay) {
  203ff0:	b500      	push	{lr}
  203ff2:	b087      	sub	sp, #28
  203ff4:	9003      	str	r0, [sp, #12]
  203ff6:	9102      	str	r1, [sp, #8]
  203ff8:	9201      	str	r2, [sp, #4]
  203ffa:	9300      	str	r3, [sp, #0]
  sysinterval_t currdelta;

  /* The delta list is empty, the current time becomes the new
     delta list base time, the timer is inserted.*/
  vtlp->lasttime = now;
  203ffc:	9b03      	ldr	r3, [sp, #12]
  203ffe:	9a01      	ldr	r2, [sp, #4]
  204000:	60da      	str	r2, [r3, #12]
  ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
  204002:	9b03      	ldr	r3, [sp, #12]
  204004:	9902      	ldr	r1, [sp, #8]
  204006:	9a00      	ldr	r2, [sp, #0]
  204008:	4618      	mov	r0, r3
  20400a:	f7ff fe99 	bl	203d40 <ch_dlist_insert_after>

  /* Initial delta is what is configured statically.*/
  currdelta = vtlp->lastdelta;
  20400e:	9b03      	ldr	r3, [sp, #12]
  204010:	691b      	ldr	r3, [r3, #16]
  204012:	9305      	str	r3, [sp, #20]

  /* If the requested delay is lower than the minimum safe delta then it
     is raised to the minimum safe value.*/
  if (delay < currdelta) {
  204014:	9a00      	ldr	r2, [sp, #0]
  204016:	9b05      	ldr	r3, [sp, #20]
  204018:	429a      	cmp	r2, r3
  20401a:	d201      	bcs.n	204020 <vt_insert_first+0x30>
    /* We need to avoid that the system time goes past the alarm we are
       going to set before the alarm is actually set.*/
    delay = currdelta;
  20401c:	9b05      	ldr	r3, [sp, #20]
  20401e:	9300      	str	r3, [sp, #0]
  }
#endif

  /* Being the first element inserted in the list the alarm timer
     is started.*/
  port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
  204020:	9b03      	ldr	r3, [sp, #12]
  204022:	68db      	ldr	r3, [r3, #12]
  204024:	9900      	ldr	r1, [sp, #0]
  204026:	4618      	mov	r0, r3
  204028:	f7ff fe4a 	bl	203cc0 <chTimeAddX>
  20402c:	4603      	mov	r3, r0
  20402e:	4618      	mov	r0, r3
  204030:	f7ff ff2e 	bl	203e90 <port_timer_start_alarm>
       current time skipped past the calculated deadline.
       Note that the "<" condition is intentional, we want to make sure
       that the alarm is set before the deadline is reached because the
       comparison could happen on the transition depending on the timer
       architecture.*/
    newnow = chVTGetSystemTimeX();
  204034:	f7ff ff84 	bl	203f40 <chVTGetSystemTimeX.lto_priv.1>
  204038:	9004      	str	r0, [sp, #16]
    if (likely(chTimeDiffX(now, newnow) < delay)) {
  20403a:	9904      	ldr	r1, [sp, #16]
  20403c:	9801      	ldr	r0, [sp, #4]
  20403e:	f7ff fe4f 	bl	203ce0 <chTimeDiffX.lto_priv.0>
  204042:	4602      	mov	r2, r0
  204044:	9b00      	ldr	r3, [sp, #0]
  204046:	4293      	cmp	r3, r2
  204048:	bf8c      	ite	hi
  20404a:	2301      	movhi	r3, #1
  20404c:	2300      	movls	r3, #0
  20404e:	b2db      	uxtb	r3, r3
  204050:	2b00      	cmp	r3, #0
  204052:	d10f      	bne.n	204074 <vt_insert_first+0x84>
      break;
    }

    /* Trying again with a more relaxed minimum delta.*/
    currdelta += (sysinterval_t)1;
  204054:	9b05      	ldr	r3, [sp, #20]
  204056:	3301      	adds	r3, #1
  204058:	9305      	str	r3, [sp, #20]

    /* Setting up the alarm on the next deadline.*/
    port_timer_set_alarm(chTimeAddX(now, currdelta));
  20405a:	9905      	ldr	r1, [sp, #20]
  20405c:	9801      	ldr	r0, [sp, #4]
  20405e:	f7ff fe2f 	bl	203cc0 <chTimeAddX>
  204062:	4603      	mov	r3, r0
  204064:	4618      	mov	r0, r3
  204066:	f7ff ff2b 	bl	203ec0 <port_timer_set_alarm>

    /* Current time becomes the new "base" time.*/
    now = newnow;
  20406a:	9b04      	ldr	r3, [sp, #16]
  20406c:	9301      	str	r3, [sp, #4]
    delay = currdelta;
  20406e:	9b05      	ldr	r3, [sp, #20]
  204070:	9300      	str	r3, [sp, #0]
  while (true) {
  204072:	e7df      	b.n	204034 <vt_insert_first+0x44>
      break;
  204074:	bf00      	nop
  }

#if !defined(CH_VT_RFCU_DISABLED)
  /* Checking if a skip occurred.*/
  if (currdelta > vtlp->lastdelta) {
  204076:	9b03      	ldr	r3, [sp, #12]
  204078:	691b      	ldr	r3, [r3, #16]
  20407a:	9a05      	ldr	r2, [sp, #20]
  20407c:	429a      	cmp	r2, r3
  20407e:	d905      	bls.n	20408c <vt_insert_first+0x9c>
    vtlp->lastdelta = currdelta;
  204080:	9b03      	ldr	r3, [sp, #12]
  204082:	9a05      	ldr	r2, [sp, #20]
  204084:	611a      	str	r2, [r3, #16]
    chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
  204086:	2001      	movs	r0, #1
  204088:	f7ff fb1a 	bl	2036c0 <chRFCUCollectFaultsI>
  }
#else
  /* Assertions as fallback.*/
  chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
#endif
}
  20408c:	bf00      	nop
  20408e:	b007      	add	sp, #28
  204090:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002040a0 <vt_enqueue>:
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 * @param[in] delay     delay over current system time
 */
static void vt_enqueue(virtual_timers_list_t *vtlp,
                       virtual_timer_t *vtp,
                       sysinterval_t delay) {
  2040a0:	b500      	push	{lr}
  2040a2:	b089      	sub	sp, #36	; 0x24
  2040a4:	9003      	str	r0, [sp, #12]
  2040a6:	9102      	str	r1, [sp, #8]
  2040a8:	9201      	str	r2, [sp, #4]
  sysinterval_t delta;

#if CH_CFG_ST_TIMEDELTA > 0
  {
    sysinterval_t nowdelta;
    systime_t now = chVTGetSystemTimeX();
  2040aa:	f7ff ff49 	bl	203f40 <chVTGetSystemTimeX.lto_priv.1>
  2040ae:	9006      	str	r0, [sp, #24]

    /* Special case where the timers list is empty.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
  2040b0:	9b03      	ldr	r3, [sp, #12]
  2040b2:	4618      	mov	r0, r3
  2040b4:	f7ff fe24 	bl	203d00 <ch_dlist_isempty>
  2040b8:	4603      	mov	r3, r0
  2040ba:	2b00      	cmp	r3, #0
  2040bc:	d006      	beq.n	2040cc <vt_enqueue+0x2c>

      vt_insert_first(vtlp, vtp, now, delay);
  2040be:	9b01      	ldr	r3, [sp, #4]
  2040c0:	9a06      	ldr	r2, [sp, #24]
  2040c2:	9902      	ldr	r1, [sp, #8]
  2040c4:	9803      	ldr	r0, [sp, #12]
  2040c6:	f7ff ff93 	bl	203ff0 <vt_insert_first>

      return;
  2040ca:	e021      	b.n	204110 <vt_enqueue+0x70>
    }

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'deltanow'.*/
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
  2040cc:	9b03      	ldr	r3, [sp, #12]
  2040ce:	68db      	ldr	r3, [r3, #12]
  2040d0:	9906      	ldr	r1, [sp, #24]
  2040d2:	4618      	mov	r0, r3
  2040d4:	f7ff fe04 	bl	203ce0 <chTimeDiffX.lto_priv.0>
  2040d8:	9005      	str	r0, [sp, #20]
    delta    = nowdelta + delay;
  2040da:	9a05      	ldr	r2, [sp, #20]
  2040dc:	9b01      	ldr	r3, [sp, #4]
  2040de:	4413      	add	r3, r2
  2040e0:	9307      	str	r3, [sp, #28]

    /* Scenario where a very large delay exceeded the numeric range, the
       delta is shortened to make it fit the numeric range, the timer
       will be triggered "deltanow" cycles earlier.*/
    if (delta < nowdelta) {
  2040e2:	9a07      	ldr	r2, [sp, #28]
  2040e4:	9b05      	ldr	r3, [sp, #20]
  2040e6:	429a      	cmp	r2, r3
  2040e8:	d201      	bcs.n	2040ee <vt_enqueue+0x4e>
      delta = delay;
  2040ea:	9b01      	ldr	r3, [sp, #4]
  2040ec:	9307      	str	r3, [sp, #28]
    }

    /* Checking if this timer would become the first in the delta list, this
       requires changing the current alarm setting.*/
    if (delta < vtlp->dlist.next->delta) {
  2040ee:	9b03      	ldr	r3, [sp, #12]
  2040f0:	681b      	ldr	r3, [r3, #0]
  2040f2:	689b      	ldr	r3, [r3, #8]
  2040f4:	9a07      	ldr	r2, [sp, #28]
  2040f6:	429a      	cmp	r2, r3
  2040f8:	d204      	bcs.n	204104 <vt_enqueue+0x64>

      vt_set_alarm(vtlp, now, delay);
  2040fa:	9a01      	ldr	r2, [sp, #4]
  2040fc:	9906      	ldr	r1, [sp, #24]
  2040fe:	9803      	ldr	r0, [sp, #12]
  204100:	f7ff ff36 	bl	203f70 <vt_set_alarm>

  /* Delta is initially equal to the specified delay.*/
  delta = delay;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
  204104:	9b03      	ldr	r3, [sp, #12]
  204106:	9902      	ldr	r1, [sp, #8]
  204108:	9a07      	ldr	r2, [sp, #28]
  20410a:	4618      	mov	r0, r3
  20410c:	f7ff fe58 	bl	203dc0 <ch_dlist_insert>
}
  204110:	b009      	add	sp, #36	; 0x24
  204112:	f85d fb04 	ldr.w	pc, [sp], #4
  204116:	bf00      	nop
	...

00204120 <chVTDoSetI>:
 *                      function
 *
 * @iclass
 */
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  204120:	b500      	push	{lr}
  204122:	b087      	sub	sp, #28
  204124:	9003      	str	r0, [sp, #12]
  204126:	9102      	str	r1, [sp, #8]
  204128:	9201      	str	r2, [sp, #4]
  20412a:	9300      	str	r3, [sp, #0]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
  20412c:	4b1a      	ldr	r3, [pc, #104]	; (204198 <chVTDoSetI+0x78>)
  20412e:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  204130:	f7ff fbf6 	bl	203920 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
  204134:	9b03      	ldr	r3, [sp, #12]
  204136:	2b00      	cmp	r3, #0
  204138:	bf0c      	ite	eq
  20413a:	2301      	moveq	r3, #1
  20413c:	2300      	movne	r3, #0
  20413e:	b2db      	uxtb	r3, r3
  204140:	2b00      	cmp	r3, #0
  204142:	d107      	bne.n	204154 <chVTDoSetI+0x34>
  204144:	9b01      	ldr	r3, [sp, #4]
  204146:	2b00      	cmp	r3, #0
  204148:	bf0c      	ite	eq
  20414a:	2301      	moveq	r3, #1
  20414c:	2300      	movne	r3, #0
  20414e:	b2db      	uxtb	r3, r3
  204150:	2b00      	cmp	r3, #0
  204152:	d001      	beq.n	204158 <chVTDoSetI+0x38>
  204154:	2301      	movs	r3, #1
  204156:	e000      	b.n	20415a <chVTDoSetI+0x3a>
  204158:	2300      	movs	r3, #0
  20415a:	2b00      	cmp	r3, #0
  20415c:	d107      	bne.n	20416e <chVTDoSetI+0x4e>
  20415e:	9b02      	ldr	r3, [sp, #8]
  204160:	2b00      	cmp	r3, #0
  204162:	bf0c      	ite	eq
  204164:	2301      	moveq	r3, #1
  204166:	2300      	movne	r3, #0
  204168:	b2db      	uxtb	r3, r3
  20416a:	2b00      	cmp	r3, #0
  20416c:	d002      	beq.n	204174 <chVTDoSetI+0x54>
  20416e:	480b      	ldr	r0, [pc, #44]	; (20419c <chVTDoSetI+0x7c>)
  204170:	f7ff fa66 	bl	203640 <chSysHalt>

  /* Timer initialization.*/
  vtp->par     = par;
  204174:	9b03      	ldr	r3, [sp, #12]
  204176:	9a00      	ldr	r2, [sp, #0]
  204178:	611a      	str	r2, [r3, #16]
  vtp->func    = vtfunc;
  20417a:	9b03      	ldr	r3, [sp, #12]
  20417c:	9a01      	ldr	r2, [sp, #4]
  20417e:	60da      	str	r2, [r3, #12]
  vtp->reload  = (sysinterval_t)0;
  204180:	9b03      	ldr	r3, [sp, #12]
  204182:	2200      	movs	r2, #0
  204184:	615a      	str	r2, [r3, #20]

  /* Inserting the timer in the delta list.*/
  vt_enqueue(vtlp, vtp, delay);
  204186:	9a02      	ldr	r2, [sp, #8]
  204188:	9903      	ldr	r1, [sp, #12]
  20418a:	9805      	ldr	r0, [sp, #20]
  20418c:	f7ff ff88 	bl	2040a0 <vt_enqueue>
}
  204190:	bf00      	nop
  204192:	b007      	add	sp, #28
  204194:	f85d fb04 	ldr.w	pc, [sp], #4
  204198:	20000968 	.word	0x20000968
  20419c:	0800641c 	.word	0x0800641c

002041a0 <chVTDoResetI>:
 *
 * @param[in] vtp       pointer to a @p virtual_timer_t object
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {
  2041a0:	b500      	push	{lr}
  2041a2:	b087      	sub	sp, #28
  2041a4:	9001      	str	r0, [sp, #4]
  virtual_timers_list_t *vtlp = &currcore->vtlist;
  2041a6:	4b3b      	ldr	r3, [pc, #236]	; (204294 <chVTDoResetI+0xf4>)
  2041a8:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  2041aa:	f7ff fbb9 	bl	203920 <chDbgCheckClassI>
  chDbgCheck(vtp != NULL);
  2041ae:	9b01      	ldr	r3, [sp, #4]
  2041b0:	2b00      	cmp	r3, #0
  2041b2:	bf0c      	ite	eq
  2041b4:	2301      	moveq	r3, #1
  2041b6:	2300      	movne	r3, #0
  2041b8:	b2db      	uxtb	r3, r3
  2041ba:	2b00      	cmp	r3, #0
  2041bc:	d002      	beq.n	2041c4 <chVTDoResetI+0x24>
  2041be:	4836      	ldr	r0, [pc, #216]	; (204298 <chVTDoResetI+0xf8>)
  2041c0:	f7ff fa3e 	bl	203640 <chSysHalt>
  chDbgAssert(chVTIsArmedI(vtp), "timer not armed");
  2041c4:	9801      	ldr	r0, [sp, #4]
  2041c6:	f7ff fec3 	bl	203f50 <chVTIsArmedI.lto_priv.0>
  2041ca:	4603      	mov	r3, r0
  2041cc:	f083 0301 	eor.w	r3, r3, #1
  2041d0:	b2db      	uxtb	r3, r3
  2041d2:	2b00      	cmp	r3, #0
  2041d4:	d002      	beq.n	2041dc <chVTDoResetI+0x3c>
  2041d6:	4830      	ldr	r0, [pc, #192]	; (204298 <chVTDoResetI+0xf8>)
  2041d8:	f7ff fa32 	bl	203640 <chSysHalt>
  systime_t now;
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
  2041dc:	9b05      	ldr	r3, [sp, #20]
  2041de:	9a01      	ldr	r2, [sp, #4]
  2041e0:	4611      	mov	r1, r2
  2041e2:	4618      	mov	r0, r3
  2041e4:	f7ff fd9c 	bl	203d20 <ch_dlist_isfirst>
  2041e8:	4603      	mov	r3, r0
  2041ea:	f083 0301 	eor.w	r3, r3, #1
  2041ee:	b2db      	uxtb	r3, r3
  2041f0:	2b00      	cmp	r3, #0
  2041f2:	d014      	beq.n	20421e <chVTDoResetI+0x7e>

    /* Removing the element from the delta list.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
  2041f4:	9b01      	ldr	r3, [sp, #4]
  2041f6:	4618      	mov	r0, r3
  2041f8:	f7ff fe3a 	bl	203e70 <ch_dlist_dequeue>

    /* Adding delta to the next element, if it is not the last one.*/
    vtp->dlist.next->delta += vtp->dlist.delta;
  2041fc:	9b01      	ldr	r3, [sp, #4]
  2041fe:	681b      	ldr	r3, [r3, #0]
  204200:	6899      	ldr	r1, [r3, #8]
  204202:	9b01      	ldr	r3, [sp, #4]
  204204:	689a      	ldr	r2, [r3, #8]
  204206:	9b01      	ldr	r3, [sp, #4]
  204208:	681b      	ldr	r3, [r3, #0]
  20420a:	440a      	add	r2, r1
  20420c:	609a      	str	r2, [r3, #8]

    /* Marking timer as not armed.*/
    vtp->dlist.next = NULL;
  20420e:	9b01      	ldr	r3, [sp, #4]
  204210:	2200      	movs	r2, #0
  204212:	601a      	str	r2, [r3, #0]

    /* Special case when the removed element from the last position in the list,
       the value in the header must be restored, just doing it is faster than
       checking then doing.*/
    vtlp->dlist.delta = (sysinterval_t)-1;
  204214:	9b05      	ldr	r3, [sp, #20]
  204216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  20421a:	609a      	str	r2, [r3, #8]

    return;
  20421c:	e036      	b.n	20428c <chVTDoResetI+0xec>
  }

  /* Removing the first timer from the list, marking it as not armed.*/
  ch_dlist_remove_first(&vtlp->dlist);
  20421e:	9b05      	ldr	r3, [sp, #20]
  204220:	4618      	mov	r0, r3
  204222:	f7ff fe0d 	bl	203e40 <ch_dlist_remove_first>
  vtp->dlist.next = NULL;
  204226:	9b01      	ldr	r3, [sp, #4]
  204228:	2200      	movs	r2, #0
  20422a:	601a      	str	r2, [r3, #0]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
  20422c:	9b05      	ldr	r3, [sp, #20]
  20422e:	4618      	mov	r0, r3
  204230:	f7ff fd66 	bl	203d00 <ch_dlist_isempty>
  204234:	4603      	mov	r3, r0
  204236:	2b00      	cmp	r3, #0
  204238:	d002      	beq.n	204240 <chVTDoResetI+0xa0>

    port_timer_stop_alarm();
  20423a:	f7ff fe39 	bl	203eb0 <port_timer_stop_alarm>

    return;
  20423e:	e025      	b.n	20428c <chVTDoResetI+0xec>
  }

  /* The delta of the removed timer is added to the new first timer.*/
  vtlp->dlist.next->delta += vtp->dlist.delta;
  204240:	9b05      	ldr	r3, [sp, #20]
  204242:	681b      	ldr	r3, [r3, #0]
  204244:	6899      	ldr	r1, [r3, #8]
  204246:	9b01      	ldr	r3, [sp, #4]
  204248:	689a      	ldr	r2, [r3, #8]
  20424a:	9b05      	ldr	r3, [sp, #20]
  20424c:	681b      	ldr	r3, [r3, #0]
  20424e:	440a      	add	r2, r1
  204250:	609a      	str	r2, [r3, #8]

  /* Distance in ticks between the last alarm event and current time.*/
  now = chVTGetSystemTimeX();
  204252:	f7ff fe75 	bl	203f40 <chVTGetSystemTimeX.lto_priv.1>
  204256:	9004      	str	r0, [sp, #16]
  nowdelta = chTimeDiffX(vtlp->lasttime, now);
  204258:	9b05      	ldr	r3, [sp, #20]
  20425a:	68db      	ldr	r3, [r3, #12]
  20425c:	9904      	ldr	r1, [sp, #16]
  20425e:	4618      	mov	r0, r3
  204260:	f7ff fd3e 	bl	203ce0 <chTimeDiffX.lto_priv.0>
  204264:	9003      	str	r0, [sp, #12]

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= vtlp->dlist.next->delta) {
  204266:	9b05      	ldr	r3, [sp, #20]
  204268:	681b      	ldr	r3, [r3, #0]
  20426a:	689b      	ldr	r3, [r3, #8]
  20426c:	9a03      	ldr	r2, [sp, #12]
  20426e:	429a      	cmp	r2, r3
  204270:	d20b      	bcs.n	20428a <chVTDoResetI+0xea>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = vtlp->dlist.next->delta - nowdelta;
  204272:	9b05      	ldr	r3, [sp, #20]
  204274:	681b      	ldr	r3, [r3, #0]
  204276:	689a      	ldr	r2, [r3, #8]
  204278:	9b03      	ldr	r3, [sp, #12]
  20427a:	1ad3      	subs	r3, r2, r3
  20427c:	9302      	str	r3, [sp, #8]

  /* Setting up the alarm.*/
  vt_set_alarm(vtlp, now, delta);
  20427e:	9a02      	ldr	r2, [sp, #8]
  204280:	9904      	ldr	r1, [sp, #16]
  204282:	9805      	ldr	r0, [sp, #20]
  204284:	f7ff fe74 	bl	203f70 <vt_set_alarm>
  204288:	e000      	b.n	20428c <chVTDoResetI+0xec>
    return;
  20428a:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  20428c:	b007      	add	sp, #28
  20428e:	f85d fb04 	ldr.w	pc, [sp], #4
  204292:	bf00      	nop
  204294:	20000968 	.word	0x20000968
  204298:	08006428 	.word	0x08006428
  20429c:	00000000 	.word	0x00000000

002042a0 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
  2042a0:	b500      	push	{lr}
  2042a2:	b089      	sub	sp, #36	; 0x24
  virtual_timers_list_t *vtlp = &currcore->vtlist;
  2042a4:	4b4f      	ldr	r3, [pc, #316]	; (2043e4 <chVTDoTickI+0x144>)
  2042a6:	9305      	str	r3, [sp, #20]

  chDbgCheckClassI();
  2042a8:	f7ff fb3a 	bl	203920 <chDbgCheckClassI>
     than the interval between "now" and "lasttime".*/
  while (true) {
    systime_t lasttime;

    /* First timer in the delta list.*/
    vtp = (virtual_timer_t *)vtlp->dlist.next;
  2042ac:	9b05      	ldr	r3, [sp, #20]
  2042ae:	681b      	ldr	r3, [r3, #0]
  2042b0:	9304      	str	r3, [sp, #16]

    /* Delta between current time and last execution time.*/
    now = chVTGetSystemTimeX();
  2042b2:	f7ff fe45 	bl	203f40 <chVTGetSystemTimeX.lto_priv.1>
  2042b6:	9003      	str	r0, [sp, #12]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
  2042b8:	9b05      	ldr	r3, [sp, #20]
  2042ba:	68db      	ldr	r3, [r3, #12]
  2042bc:	9903      	ldr	r1, [sp, #12]
  2042be:	4618      	mov	r0, r3
  2042c0:	f7ff fd0e 	bl	203ce0 <chTimeDiffX.lto_priv.0>
  2042c4:	9002      	str	r0, [sp, #8]

    /* Loop break condition.
       Note that the list scan is limited by the delta list header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
       deltas*/
    if (nowdelta < vtp->dlist.delta) {
  2042c6:	9b04      	ldr	r3, [sp, #16]
  2042c8:	689b      	ldr	r3, [r3, #8]
  2042ca:	9a02      	ldr	r2, [sp, #8]
  2042cc:	429a      	cmp	r2, r3
  2042ce:	d369      	bcc.n	2043a4 <chVTDoTickI+0x104>
      break;
    }

    /* Last time deadline is updated to the next timer's time.*/
    lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
  2042d0:	9b05      	ldr	r3, [sp, #20]
  2042d2:	68da      	ldr	r2, [r3, #12]
  2042d4:	9b04      	ldr	r3, [sp, #16]
  2042d6:	689b      	ldr	r3, [r3, #8]
  2042d8:	4619      	mov	r1, r3
  2042da:	4610      	mov	r0, r2
  2042dc:	f7ff fcf0 	bl	203cc0 <chTimeAddX>
  2042e0:	9001      	str	r0, [sp, #4]
    vtlp->lasttime = lasttime;
  2042e2:	9b05      	ldr	r3, [sp, #20]
  2042e4:	9a01      	ldr	r2, [sp, #4]
  2042e6:	60da      	str	r2, [r3, #12]

    /* Removing the timer from the list, marking it as not armed.*/
    (void) ch_dlist_dequeue(&vtp->dlist);
  2042e8:	9b04      	ldr	r3, [sp, #16]
  2042ea:	4618      	mov	r0, r3
  2042ec:	f7ff fdc0 	bl	203e70 <ch_dlist_dequeue>
    vtp->dlist.next = NULL;
  2042f0:	9b04      	ldr	r3, [sp, #16]
  2042f2:	2200      	movs	r2, #0
  2042f4:	601a      	str	r2, [r3, #0]

    /* If the list becomes empty then the alarm is disabled.*/
    if (ch_dlist_isempty(&vtlp->dlist)) {
  2042f6:	9b05      	ldr	r3, [sp, #20]
  2042f8:	4618      	mov	r0, r3
  2042fa:	f7ff fd01 	bl	203d00 <ch_dlist_isempty>
  2042fe:	4603      	mov	r3, r0
  204300:	2b00      	cmp	r3, #0
  204302:	d001      	beq.n	204308 <chVTDoTickI+0x68>
      port_timer_stop_alarm();
  204304:	f7ff fdd4 	bl	203eb0 <port_timer_stop_alarm>
    }

    /* The callback is invoked outside the kernel critical section, it
       is re-entered on the callback return. Note that "lasttime" can be
       modified within the callback if some timer function is called.*/
    chSysUnlockFromISR();
  204308:	f7ff fe0a 	bl	203f20 <chSysUnlockFromISR.lto_priv.4>

    vtp->func(vtp, vtp->par);
  20430c:	9b04      	ldr	r3, [sp, #16]
  20430e:	68db      	ldr	r3, [r3, #12]
  204310:	9a04      	ldr	r2, [sp, #16]
  204312:	6912      	ldr	r2, [r2, #16]
  204314:	4611      	mov	r1, r2
  204316:	9804      	ldr	r0, [sp, #16]
  204318:	4798      	blx	r3

    chSysLockFromISR();
  20431a:	f7ff fde9 	bl	203ef0 <chSysLockFromISR.lto_priv.4>

    /* If a reload is defined the timer needs to be restarted.*/
    if (unlikely(vtp->reload > (sysinterval_t)0)) {
  20431e:	9b04      	ldr	r3, [sp, #16]
  204320:	695b      	ldr	r3, [r3, #20]
  204322:	2b00      	cmp	r3, #0
  204324:	bf14      	ite	ne
  204326:	2301      	movne	r3, #1
  204328:	2300      	moveq	r3, #0
  20432a:	b2db      	uxtb	r3, r3
  20432c:	2b00      	cmp	r3, #0
  20432e:	d0bd      	beq.n	2042ac <chVTDoTickI+0xc>
      sysinterval_t delta, delay;

      /* Refreshing the now delta after spending time in the callback for
         a more accurate detection of too fast reloads.*/
      now = chVTGetSystemTimeX();
  204330:	f7ff fe06 	bl	203f40 <chVTGetSystemTimeX.lto_priv.1>
  204334:	9003      	str	r0, [sp, #12]
      nowdelta = chTimeDiffX(lasttime, now);
  204336:	9903      	ldr	r1, [sp, #12]
  204338:	9801      	ldr	r0, [sp, #4]
  20433a:	f7ff fcd1 	bl	203ce0 <chTimeDiffX.lto_priv.0>
  20433e:	9002      	str	r0, [sp, #8]

#if !defined(CH_VT_RFCU_DISABLED)
      /* Checking if the required reload is feasible.*/
      if (nowdelta > vtp->reload) {
  204340:	9b04      	ldr	r3, [sp, #16]
  204342:	695b      	ldr	r3, [r3, #20]
  204344:	9a02      	ldr	r2, [sp, #8]
  204346:	429a      	cmp	r2, r3
  204348:	d908      	bls.n	20435c <chVTDoTickI+0xbc>
        /* System time is already past the deadline, logging the fault and
           proceeding with a minimum delay.*/

        chDbgAssert(false, "skipped deadline");
  20434a:	4827      	ldr	r0, [pc, #156]	; (2043e8 <chVTDoTickI+0x148>)
  20434c:	f7ff f978 	bl	203640 <chSysHalt>
        chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
  204350:	2002      	movs	r0, #2
  204352:	f7ff f9b5 	bl	2036c0 <chRFCUCollectFaultsI>

        delay = (sysinterval_t)0;
  204356:	2300      	movs	r3, #0
  204358:	9306      	str	r3, [sp, #24]
  20435a:	e004      	b.n	204366 <chVTDoTickI+0xc6>
      }
      else {
        /* Enqueuing the timer again using the calculated delta.*/
        delay = vtp->reload - nowdelta;
  20435c:	9b04      	ldr	r3, [sp, #16]
  20435e:	695a      	ldr	r2, [r3, #20]
  204360:	9b02      	ldr	r3, [sp, #8]
  204362:	1ad3      	subs	r3, r2, r3
  204364:	9306      	str	r3, [sp, #24]
      /* Enqueuing the timer again using the calculated delta.*/
      delay = vtp->reload - nowdelta;
#endif

      /* Special case where the timers list is empty.*/
      if (ch_dlist_isempty(&vtlp->dlist)) {
  204366:	9b05      	ldr	r3, [sp, #20]
  204368:	4618      	mov	r0, r3
  20436a:	f7ff fcc9 	bl	203d00 <ch_dlist_isempty>
  20436e:	4603      	mov	r3, r0
  204370:	2b00      	cmp	r3, #0
  204372:	d006      	beq.n	204382 <chVTDoTickI+0xe2>

        vt_insert_first(vtlp, vtp, now, delay);
  204374:	9b06      	ldr	r3, [sp, #24]
  204376:	9a03      	ldr	r2, [sp, #12]
  204378:	9904      	ldr	r1, [sp, #16]
  20437a:	9805      	ldr	r0, [sp, #20]
  20437c:	f7ff fe38 	bl	203ff0 <vt_insert_first>

        return;
  204380:	e02d      	b.n	2043de <chVTDoTickI+0x13e>

      /* Delay as delta from 'lasttime'. Note, it can overflow and the value
         becomes lower than 'nowdelta'. In that case the delta is shortened
         to make it fit the numeric range and the timer will be triggered
         "nowdelta" cycles earlier.*/
      delta = nowdelta + delay;
  204382:	9a02      	ldr	r2, [sp, #8]
  204384:	9b06      	ldr	r3, [sp, #24]
  204386:	4413      	add	r3, r2
  204388:	9307      	str	r3, [sp, #28]
      if (delta < nowdelta) {
  20438a:	9a07      	ldr	r2, [sp, #28]
  20438c:	9b02      	ldr	r3, [sp, #8]
  20438e:	429a      	cmp	r2, r3
  204390:	d201      	bcs.n	204396 <chVTDoTickI+0xf6>
        delta = delay;
  204392:	9b06      	ldr	r3, [sp, #24]
  204394:	9307      	str	r3, [sp, #28]
      }

      /* Insert into delta list. */
      ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
  204396:	9b05      	ldr	r3, [sp, #20]
  204398:	9904      	ldr	r1, [sp, #16]
  20439a:	9a07      	ldr	r2, [sp, #28]
  20439c:	4618      	mov	r0, r3
  20439e:	f7ff fd0f 	bl	203dc0 <ch_dlist_insert>
  while (true) {
  2043a2:	e783      	b.n	2042ac <chVTDoTickI+0xc>
      break;
  2043a4:	bf00      	nop
    }
  }

  /* If the list is empty, nothing else to do.*/
  if (ch_dlist_isempty(&vtlp->dlist)) {
  2043a6:	9b05      	ldr	r3, [sp, #20]
  2043a8:	4618      	mov	r0, r3
  2043aa:	f7ff fca9 	bl	203d00 <ch_dlist_isempty>
  2043ae:	4603      	mov	r3, r0
  2043b0:	2b00      	cmp	r3, #0
  2043b2:	d113      	bne.n	2043dc <chVTDoTickI+0x13c>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  2043b4:	9b05      	ldr	r3, [sp, #20]
  2043b6:	68da      	ldr	r2, [r3, #12]
  2043b8:	9b02      	ldr	r3, [sp, #8]
  2043ba:	441a      	add	r2, r3
  2043bc:	9b05      	ldr	r3, [sp, #20]
  2043be:	60da      	str	r2, [r3, #12]
  vtp->dlist.delta -= nowdelta;
  2043c0:	9b04      	ldr	r3, [sp, #16]
  2043c2:	689a      	ldr	r2, [r3, #8]
  2043c4:	9b02      	ldr	r3, [sp, #8]
  2043c6:	1ad2      	subs	r2, r2, r3
  2043c8:	9b04      	ldr	r3, [sp, #16]
  2043ca:	609a      	str	r2, [r3, #8]

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
  2043cc:	9b04      	ldr	r3, [sp, #16]
  2043ce:	689b      	ldr	r3, [r3, #8]
  2043d0:	461a      	mov	r2, r3
  2043d2:	9903      	ldr	r1, [sp, #12]
  2043d4:	9805      	ldr	r0, [sp, #20]
  2043d6:	f7ff fdcb 	bl	203f70 <vt_set_alarm>
  2043da:	e000      	b.n	2043de <chVTDoTickI+0x13e>
    return;
  2043dc:	bf00      	nop
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
  2043de:	b009      	add	sp, #36	; 0x24
  2043e0:	f85d fb04 	ldr.w	pc, [sp], #4
  2043e4:	20000968 	.word	0x20000968
  2043e8:	08006438 	.word	0x08006438
  2043ec:	00000000 	.word	0x00000000

002043f0 <ch_queue_dequeue.lto_priv.0>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
  2043f0:	b082      	sub	sp, #8
  2043f2:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
  2043f4:	9b01      	ldr	r3, [sp, #4]
  2043f6:	685b      	ldr	r3, [r3, #4]
  2043f8:	9a01      	ldr	r2, [sp, #4]
  2043fa:	6812      	ldr	r2, [r2, #0]
  2043fc:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
  2043fe:	9b01      	ldr	r3, [sp, #4]
  204400:	681b      	ldr	r3, [r3, #0]
  204402:	9a01      	ldr	r2, [sp, #4]
  204404:	6852      	ldr	r2, [r2, #4]
  204406:	605a      	str	r2, [r3, #4]
  return p;
  204408:	9b01      	ldr	r3, [sp, #4]
}
  20440a:	4618      	mov	r0, r3
  20440c:	b002      	add	sp, #8
  20440e:	4770      	bx	lr

00204410 <ch_pqueue_remove_highest>:
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  204410:	b084      	sub	sp, #16
  204412:	9001      	str	r0, [sp, #4]
  ch_priority_queue_t *p = pqp->next;
  204414:	9b01      	ldr	r3, [sp, #4]
  204416:	681b      	ldr	r3, [r3, #0]
  204418:	9303      	str	r3, [sp, #12]
  pqp->next       = p->next;
  20441a:	9b03      	ldr	r3, [sp, #12]
  20441c:	681a      	ldr	r2, [r3, #0]
  20441e:	9b01      	ldr	r3, [sp, #4]
  204420:	601a      	str	r2, [r3, #0]
  pqp->next->prev = pqp;
  204422:	9b01      	ldr	r3, [sp, #4]
  204424:	681b      	ldr	r3, [r3, #0]
  204426:	9a01      	ldr	r2, [sp, #4]
  204428:	605a      	str	r2, [r3, #4]
  return p;
  20442a:	9b03      	ldr	r3, [sp, #12]
}
  20442c:	4618      	mov	r0, r3
  20442e:	b004      	add	sp, #16
  204430:	4770      	bx	lr
  204432:	bf00      	nop
	...

00204440 <ch_pqueue_insert_behind>:
                                                           ch_priority_queue_t *p) {
  204440:	b082      	sub	sp, #8
  204442:	9001      	str	r0, [sp, #4]
  204444:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
  204446:	9b01      	ldr	r3, [sp, #4]
  204448:	681b      	ldr	r3, [r3, #0]
  20444a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio >= p->prio));
  20444c:	9b01      	ldr	r3, [sp, #4]
  20444e:	689a      	ldr	r2, [r3, #8]
  204450:	9b00      	ldr	r3, [sp, #0]
  204452:	689b      	ldr	r3, [r3, #8]
  204454:	429a      	cmp	r2, r3
  204456:	bf2c      	ite	cs
  204458:	2301      	movcs	r3, #1
  20445a:	2300      	movcc	r3, #0
  20445c:	b2db      	uxtb	r3, r3
  20445e:	2b00      	cmp	r3, #0
  204460:	d1f1      	bne.n	204446 <ch_pqueue_insert_behind+0x6>
  p->next       = pqp;
  204462:	9b00      	ldr	r3, [sp, #0]
  204464:	9a01      	ldr	r2, [sp, #4]
  204466:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
  204468:	9b01      	ldr	r3, [sp, #4]
  20446a:	685a      	ldr	r2, [r3, #4]
  20446c:	9b00      	ldr	r3, [sp, #0]
  20446e:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  204470:	9b00      	ldr	r3, [sp, #0]
  204472:	685b      	ldr	r3, [r3, #4]
  204474:	9a00      	ldr	r2, [sp, #0]
  204476:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
  204478:	9b01      	ldr	r3, [sp, #4]
  20447a:	9a00      	ldr	r2, [sp, #0]
  20447c:	605a      	str	r2, [r3, #4]
  return p;
  20447e:	9b00      	ldr	r3, [sp, #0]
}
  204480:	4618      	mov	r0, r3
  204482:	b002      	add	sp, #8
  204484:	4770      	bx	lr
  204486:	bf00      	nop
	...

00204490 <ch_pqueue_insert_ahead>:
                                                          ch_priority_queue_t *p) {
  204490:	b082      	sub	sp, #8
  204492:	9001      	str	r0, [sp, #4]
  204494:	9100      	str	r1, [sp, #0]
    pqp = pqp->next;
  204496:	9b01      	ldr	r3, [sp, #4]
  204498:	681b      	ldr	r3, [r3, #0]
  20449a:	9301      	str	r3, [sp, #4]
  } while (unlikely(pqp->prio > p->prio));
  20449c:	9b01      	ldr	r3, [sp, #4]
  20449e:	689a      	ldr	r2, [r3, #8]
  2044a0:	9b00      	ldr	r3, [sp, #0]
  2044a2:	689b      	ldr	r3, [r3, #8]
  2044a4:	429a      	cmp	r2, r3
  2044a6:	bf8c      	ite	hi
  2044a8:	2301      	movhi	r3, #1
  2044aa:	2300      	movls	r3, #0
  2044ac:	b2db      	uxtb	r3, r3
  2044ae:	2b00      	cmp	r3, #0
  2044b0:	d1f1      	bne.n	204496 <ch_pqueue_insert_ahead+0x6>
  p->next       = pqp;
  2044b2:	9b00      	ldr	r3, [sp, #0]
  2044b4:	9a01      	ldr	r2, [sp, #4]
  2044b6:	601a      	str	r2, [r3, #0]
  p->prev       = pqp->prev;
  2044b8:	9b01      	ldr	r3, [sp, #4]
  2044ba:	685a      	ldr	r2, [r3, #4]
  2044bc:	9b00      	ldr	r3, [sp, #0]
  2044be:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  2044c0:	9b00      	ldr	r3, [sp, #0]
  2044c2:	685b      	ldr	r3, [r3, #4]
  2044c4:	9a00      	ldr	r2, [sp, #0]
  2044c6:	601a      	str	r2, [r3, #0]
  pqp->prev     = p;
  2044c8:	9b01      	ldr	r3, [sp, #4]
  2044ca:	9a00      	ldr	r2, [sp, #0]
  2044cc:	605a      	str	r2, [r3, #4]
  return p;
  2044ce:	9b00      	ldr	r3, [sp, #0]
}
  2044d0:	4618      	mov	r0, r3
  2044d2:	b002      	add	sp, #8
  2044d4:	4770      	bx	lr
  2044d6:	bf00      	nop
	...

002044e0 <chSysLockFromISR.lto_priv.5>:
static inline void chSysLockFromISR(void) {
  2044e0:	b500      	push	{lr}
  2044e2:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  2044e4:	b672      	cpsid	i
}
  2044e6:	bf00      	nop
  2044e8:	2330      	movs	r3, #48	; 0x30
  2044ea:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2044ec:	9b01      	ldr	r3, [sp, #4]
  2044ee:	f383 8811 	msr	BASEPRI, r3
}
  2044f2:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  2044f4:	b662      	cpsie	i
}
  2044f6:	bf00      	nop
}
  2044f8:	bf00      	nop
}
  2044fa:	bf00      	nop
  __dbg_check_lock_from_isr();
  2044fc:	f7ff f940 	bl	203780 <__dbg_check_lock_from_isr>
}
  204500:	bf00      	nop
  204502:	b003      	add	sp, #12
  204504:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00204510 <chSysUnlockFromISR.lto_priv.5>:
static inline void chSysUnlockFromISR(void) {
  204510:	b500      	push	{lr}
  204512:	b083      	sub	sp, #12
  __dbg_check_unlock_from_isr();
  204514:	f7ff f95c 	bl	2037d0 <__dbg_check_unlock_from_isr>
  204518:	2300      	movs	r3, #0
  20451a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20451c:	9b01      	ldr	r3, [sp, #4]
  20451e:	f383 8811 	msr	BASEPRI, r3
}
  204522:	bf00      	nop
}
  204524:	bf00      	nop
}
  204526:	bf00      	nop
}
  204528:	bf00      	nop
  20452a:	b003      	add	sp, #12
  20452c:	f85d fb04 	ldr.w	pc, [sp], #4

00204530 <chVTIsArmedI.lto_priv.1>:
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {
  204530:	b500      	push	{lr}
  204532:	b083      	sub	sp, #12
  204534:	9001      	str	r0, [sp, #4]
  chDbgCheckClassI();
  204536:	f7ff f9f3 	bl	203920 <chDbgCheckClassI>
  return (bool)(vtp->dlist.next != NULL);
  20453a:	9b01      	ldr	r3, [sp, #4]
  20453c:	681b      	ldr	r3, [r3, #0]
  20453e:	2b00      	cmp	r3, #0
  204540:	bf14      	ite	ne
  204542:	2301      	movne	r3, #1
  204544:	2300      	moveq	r3, #0
  204546:	b2db      	uxtb	r3, r3
}
  204548:	4618      	mov	r0, r3
  20454a:	b003      	add	sp, #12
  20454c:	f85d fb04 	ldr.w	pc, [sp], #4

00204550 <chSemFastSignalI.lto_priv.0>:
 *
 * @param[in] sp        pointer to a @p semaphore_t object
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {
  204550:	b500      	push	{lr}
  204552:	b083      	sub	sp, #12
  204554:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  204556:	f7ff f9e3 	bl	203920 <chDbgCheckClassI>

  sp->cnt++;
  20455a:	9b01      	ldr	r3, [sp, #4]
  20455c:	689b      	ldr	r3, [r3, #8]
  20455e:	1c5a      	adds	r2, r3, #1
  204560:	9b01      	ldr	r3, [sp, #4]
  204562:	609a      	str	r2, [r3, #8]
}
  204564:	bf00      	nop
  204566:	b003      	add	sp, #12
  204568:	f85d fb04 	ldr.w	pc, [sp], #4
  20456c:	0000      	movs	r0, r0
	...

00204570 <__sch_ready_behind>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_behind(thread_t *tp) {
  204570:	b500      	push	{lr}
  204572:	b083      	sub	sp, #12
  204574:	9001      	str	r0, [sp, #4]

  chDbgAssert((tp->state != CH_STATE_READY) &&
  204576:	9b01      	ldr	r3, [sp, #4]
  204578:	7f1b      	ldrb	r3, [r3, #28]
  20457a:	2b00      	cmp	r3, #0
  20457c:	bf0c      	ite	eq
  20457e:	2301      	moveq	r3, #1
  204580:	2300      	movne	r3, #0
  204582:	b2db      	uxtb	r3, r3
  204584:	2b00      	cmp	r3, #0
  204586:	d108      	bne.n	20459a <__sch_ready_behind+0x2a>
  204588:	9b01      	ldr	r3, [sp, #4]
  20458a:	7f1b      	ldrb	r3, [r3, #28]
  20458c:	2b0f      	cmp	r3, #15
  20458e:	bf0c      	ite	eq
  204590:	2301      	moveq	r3, #1
  204592:	2300      	movne	r3, #0
  204594:	b2db      	uxtb	r3, r3
  204596:	2b00      	cmp	r3, #0
  204598:	d002      	beq.n	2045a0 <__sch_ready_behind+0x30>
  20459a:	480d      	ldr	r0, [pc, #52]	; (2045d0 <__sch_ready_behind+0x60>)
  20459c:	f7ff f850 	bl	203640 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);
  2045a0:	9b01      	ldr	r3, [sp, #4]
  2045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2045a4:	4619      	mov	r1, r3
  2045a6:	9801      	ldr	r0, [sp, #4]
  2045a8:	f7ff fa6a 	bl	203a80 <__trace_ready>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
  2045ac:	9b01      	ldr	r3, [sp, #4]
  2045ae:	2200      	movs	r2, #0
  2045b0:	771a      	strb	r2, [r3, #28]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
  2045b2:	9b01      	ldr	r3, [sp, #4]
  2045b4:	691b      	ldr	r3, [r3, #16]
  2045b6:	461a      	mov	r2, r3
  2045b8:	9b01      	ldr	r3, [sp, #4]
  2045ba:	4619      	mov	r1, r3
  2045bc:	4610      	mov	r0, r2
  2045be:	f7ff ff3f 	bl	204440 <ch_pqueue_insert_behind>
  2045c2:	4603      	mov	r3, r0
  2045c4:	bf00      	nop
  2045c6:	bf00      	nop
                                           &tp->hdr.pqueue));
}
  2045c8:	4618      	mov	r0, r3
  2045ca:	b003      	add	sp, #12
  2045cc:	f85d fb04 	ldr.w	pc, [sp], #4
  2045d0:	08006454 	.word	0x08006454
	...

002045e0 <__sch_ready_ahead>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @notapi
 */
static thread_t *__sch_ready_ahead(thread_t *tp) {
  2045e0:	b500      	push	{lr}
  2045e2:	b083      	sub	sp, #12
  2045e4:	9001      	str	r0, [sp, #4]

  chDbgAssert((tp->state != CH_STATE_READY) &&
  2045e6:	9b01      	ldr	r3, [sp, #4]
  2045e8:	7f1b      	ldrb	r3, [r3, #28]
  2045ea:	2b00      	cmp	r3, #0
  2045ec:	bf0c      	ite	eq
  2045ee:	2301      	moveq	r3, #1
  2045f0:	2300      	movne	r3, #0
  2045f2:	b2db      	uxtb	r3, r3
  2045f4:	2b00      	cmp	r3, #0
  2045f6:	d108      	bne.n	20460a <__sch_ready_ahead+0x2a>
  2045f8:	9b01      	ldr	r3, [sp, #4]
  2045fa:	7f1b      	ldrb	r3, [r3, #28]
  2045fc:	2b0f      	cmp	r3, #15
  2045fe:	bf0c      	ite	eq
  204600:	2301      	moveq	r3, #1
  204602:	2300      	movne	r3, #0
  204604:	b2db      	uxtb	r3, r3
  204606:	2b00      	cmp	r3, #0
  204608:	d002      	beq.n	204610 <__sch_ready_ahead+0x30>
  20460a:	480d      	ldr	r0, [pc, #52]	; (204640 <__sch_ready_ahead+0x60>)
  20460c:	f7ff f818 	bl	203640 <chSysHalt>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);
  204610:	9b01      	ldr	r3, [sp, #4]
  204612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  204614:	4619      	mov	r1, r3
  204616:	9801      	ldr	r0, [sp, #4]
  204618:	f7ff fa32 	bl	203a80 <__trace_ready>

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
  20461c:	9b01      	ldr	r3, [sp, #4]
  20461e:	2200      	movs	r2, #0
  204620:	771a      	strb	r2, [r3, #28]

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
  204622:	9b01      	ldr	r3, [sp, #4]
  204624:	691b      	ldr	r3, [r3, #16]
  204626:	461a      	mov	r2, r3
  204628:	9b01      	ldr	r3, [sp, #4]
  20462a:	4619      	mov	r1, r3
  20462c:	4610      	mov	r0, r2
  20462e:	f7ff ff2f 	bl	204490 <ch_pqueue_insert_ahead>
  204632:	4603      	mov	r3, r0
  204634:	bf00      	nop
  204636:	bf00      	nop
                                          &tp->hdr.pqueue));
}
  204638:	4618      	mov	r0, r3
  20463a:	b003      	add	sp, #12
  20463c:	f85d fb04 	ldr.w	pc, [sp], #4
  204640:	08006468 	.word	0x08006468
	...

00204650 <__sch_wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
  204650:	b500      	push	{lr}
  204652:	b085      	sub	sp, #20
  204654:	9001      	str	r0, [sp, #4]
  204656:	9100      	str	r1, [sp, #0]
  thread_t *tp = threadref(p);
  204658:	9b00      	ldr	r3, [sp, #0]
  20465a:	9303      	str	r3, [sp, #12]

  (void)vtp;

  chSysLockFromISR();
  20465c:	f7ff ff40 	bl	2044e0 <chSysLockFromISR.lto_priv.5>
  switch (tp->state) {
  204660:	9b03      	ldr	r3, [sp, #12]
  204662:	7f1b      	ldrb	r3, [r3, #28]
  204664:	2b0c      	cmp	r3, #12
  204666:	d82f      	bhi.n	2046c8 <__sch_wakeup+0x78>
  204668:	a201      	add	r2, pc, #4	; (adr r2, 204670 <__sch_wakeup+0x20>)
  20466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  20466e:	bf00      	nop
  204670:	002046a5 	.word	0x002046a5
  204674:	002046c9 	.word	0x002046c9
  204678:	002046c9 	.word	0x002046c9
  20467c:	002046ab 	.word	0x002046ab
  204680:	002046bf 	.word	0x002046bf
  204684:	002046b5 	.word	0x002046b5
  204688:	002046c9 	.word	0x002046c9
  20468c:	002046bf 	.word	0x002046bf
  204690:	002046c9 	.word	0x002046c9
  204694:	002046c9 	.word	0x002046c9
  204698:	002046c9 	.word	0x002046c9
  20469c:	002046c9 	.word	0x002046c9
  2046a0:	002046bf 	.word	0x002046bf
  case CH_STATE_READY:
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
  2046a4:	f7ff ff34 	bl	204510 <chSysUnlockFromISR.lto_priv.5>
    return;
  2046a8:	e019      	b.n	2046de <__sch_wakeup+0x8e>
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
  2046aa:	9b03      	ldr	r3, [sp, #12]
  2046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2046ae:	2200      	movs	r2, #0
  2046b0:	601a      	str	r2, [r3, #0]
    break;
  2046b2:	e00a      	b.n	2046ca <__sch_wakeup+0x7a>
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
  2046b4:	9b03      	ldr	r3, [sp, #12]
  2046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2046b8:	4618      	mov	r0, r3
  2046ba:	f7ff ff49 	bl	204550 <chSemFastSignalI.lto_priv.0>
#endif
#if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
  case CH_STATE_WTCOND:
#endif
    /* States requiring dequeuing.*/
    (void) ch_queue_dequeue(&tp->hdr.queue);
  2046be:	9b03      	ldr	r3, [sp, #12]
  2046c0:	4618      	mov	r0, r3
  2046c2:	f7ff fe95 	bl	2043f0 <ch_queue_dequeue.lto_priv.0>
    break;
  2046c6:	e000      	b.n	2046ca <__sch_wakeup+0x7a>
  default:
    /* Any other state, nothing to do.*/
    break;
  2046c8:	bf00      	nop
  }

  /* Standard message for timeout conditions.*/
  tp->u.rdymsg = MSG_TIMEOUT;
  2046ca:	9b03      	ldr	r3, [sp, #12]
  2046cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  2046d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Goes behind peers because it went to sleep voluntarily.*/
  (void) __sch_ready_behind(tp);
  2046d2:	9803      	ldr	r0, [sp, #12]
  2046d4:	f7ff ff4c 	bl	204570 <__sch_ready_behind>
  chSysUnlockFromISR();
  2046d8:	f7ff ff1a 	bl	204510 <chSysUnlockFromISR.lto_priv.5>

  return;
  2046dc:	bf00      	nop
}
  2046de:	b005      	add	sp, #20
  2046e0:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002046f0 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
  2046f0:	b500      	push	{lr}
  2046f2:	b083      	sub	sp, #12
  2046f4:	9001      	str	r0, [sp, #4]

  chDbgCheckClassI();
  2046f6:	f7ff f913 	bl	203920 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  2046fa:	9b01      	ldr	r3, [sp, #4]
  2046fc:	2b00      	cmp	r3, #0
  2046fe:	bf0c      	ite	eq
  204700:	2301      	moveq	r3, #1
  204702:	2300      	movne	r3, #0
  204704:	b2db      	uxtb	r3, r3
  204706:	2b00      	cmp	r3, #0
  204708:	d002      	beq.n	204710 <chSchReadyI+0x20>
  20470a:	4806      	ldr	r0, [pc, #24]	; (204724 <chSchReadyI+0x34>)
  20470c:	f7fe ff98 	bl	203640 <chSysHalt>
       the other core.*/
    chSysNotifyInstance(tp->owner);
  }
#endif

  return __sch_ready_behind(tp);
  204710:	9801      	ldr	r0, [sp, #4]
  204712:	f7ff ff2d 	bl	204570 <__sch_ready_behind>
  204716:	4603      	mov	r3, r0
  204718:	bf00      	nop
  20471a:	bf00      	nop
}
  20471c:	4618      	mov	r0, r3
  20471e:	b003      	add	sp, #12
  204720:	f85d fb04 	ldr.w	pc, [sp], #4
  204724:	0800647c 	.word	0x0800647c
	...

00204730 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  204730:	b500      	push	{lr}
  204732:	b089      	sub	sp, #36	; 0x24
  204734:	4603      	mov	r3, r0
  204736:	f88d 3007 	strb.w	r3, [sp, #7]
  os_instance_t *oip = currcore;
  20473a:	4b26      	ldr	r3, [pc, #152]	; (2047d4 <chSchGoSleepS+0xa4>)
  20473c:	9307      	str	r3, [sp, #28]
  thread_t *otp = __instance_get_currthread(oip);
  20473e:	9b07      	ldr	r3, [sp, #28]
  204740:	68db      	ldr	r3, [r3, #12]
  204742:	9306      	str	r3, [sp, #24]
  thread_t *ntp;

  chDbgCheckClassS();
  204744:	f7ff f90c 	bl	203960 <chDbgCheckClassS>

  chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
  204748:	f7fe ff92 	bl	203670 <chSysGetIdleThreadX>
  20474c:	4602      	mov	r2, r0
  20474e:	9b06      	ldr	r3, [sp, #24]
  204750:	4293      	cmp	r3, r2
  204752:	bf0c      	ite	eq
  204754:	2301      	moveq	r3, #1
  204756:	2300      	movne	r3, #0
  204758:	b2db      	uxtb	r3, r3
  20475a:	2b00      	cmp	r3, #0
  20475c:	d002      	beq.n	204764 <chSchGoSleepS+0x34>
  20475e:	481e      	ldr	r0, [pc, #120]	; (2047d8 <chSchGoSleepS+0xa8>)
  204760:	f7fe ff6e 	bl	203640 <chSysHalt>
  chDbgAssert(otp->owner == oip, "invalid core");
  204764:	9b06      	ldr	r3, [sp, #24]
  204766:	691b      	ldr	r3, [r3, #16]
  204768:	9a07      	ldr	r2, [sp, #28]
  20476a:	429a      	cmp	r2, r3
  20476c:	bf14      	ite	ne
  20476e:	2301      	movne	r3, #1
  204770:	2300      	moveq	r3, #0
  204772:	b2db      	uxtb	r3, r3
  204774:	2b00      	cmp	r3, #0
  204776:	d002      	beq.n	20477e <chSchGoSleepS+0x4e>
  204778:	4817      	ldr	r0, [pc, #92]	; (2047d8 <chSchGoSleepS+0xa8>)
  20477a:	f7fe ff61 	bl	203640 <chSysHalt>

  /* New state.*/
  otp->state = newstate;
  20477e:	9b06      	ldr	r3, [sp, #24]
  204780:	f89d 2007 	ldrb.w	r2, [sp, #7]
  204784:	771a      	strb	r2, [r3, #28]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  204786:	9b07      	ldr	r3, [sp, #28]
  204788:	4618      	mov	r0, r3
  20478a:	f7ff fe41 	bl	204410 <ch_pqueue_remove_highest>
  20478e:	9005      	str	r0, [sp, #20]
  ntp->state = CH_STATE_CURRENT;
  204790:	9b05      	ldr	r3, [sp, #20]
  204792:	2201      	movs	r2, #1
  204794:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
  204796:	9b07      	ldr	r3, [sp, #28]
  204798:	9a05      	ldr	r2, [sp, #20]
  20479a:	60da      	str	r2, [r3, #12]
  if (ntp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
  20479c:	9906      	ldr	r1, [sp, #24]
  20479e:	9805      	ldr	r0, [sp, #20]
  2047a0:	f7ff f9a6 	bl	203af0 <__trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  2047a4:	f3ef 8309 	mrs	r3, PSP
  2047a8:	9303      	str	r3, [sp, #12]
  return(result);
  2047aa:	9b03      	ldr	r3, [sp, #12]
  2047ac:	bf00      	nop
  2047ae:	9304      	str	r3, [sp, #16]
  2047b0:	9b04      	ldr	r3, [sp, #16]
  2047b2:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  2047b6:	9b06      	ldr	r3, [sp, #24]
  2047b8:	695b      	ldr	r3, [r3, #20]
  2047ba:	429a      	cmp	r2, r3
  2047bc:	d202      	bcs.n	2047c4 <chSchGoSleepS+0x94>
  2047be:	4807      	ldr	r0, [pc, #28]	; (2047dc <chSchGoSleepS+0xac>)
  2047c0:	f7fe ff3e 	bl	203640 <chSysHalt>
  2047c4:	9906      	ldr	r1, [sp, #24]
  2047c6:	9805      	ldr	r0, [sp, #20]
  2047c8:	f7fb fd8a 	bl	2002e0 <__port_switch>
}
  2047cc:	bf00      	nop
  2047ce:	b009      	add	sp, #36	; 0x24
  2047d0:	f85d fb04 	ldr.w	pc, [sp], #4
  2047d4:	20000958 	.word	0x20000958
  2047d8:	08006488 	.word	0x08006488
  2047dc:	08006444 	.word	0x08006444

002047e0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
  2047e0:	b500      	push	{lr}
  2047e2:	b08b      	sub	sp, #44	; 0x2c
  2047e4:	4603      	mov	r3, r0
  2047e6:	9100      	str	r1, [sp, #0]
  2047e8:	f88d 3007 	strb.w	r3, [sp, #7]
  thread_t *tp = __instance_get_currthread(currcore);
  2047ec:	4b16      	ldr	r3, [pc, #88]	; (204848 <chSchGoSleepTimeoutS+0x68>)
  2047ee:	68db      	ldr	r3, [r3, #12]
  2047f0:	9309      	str	r3, [sp, #36]	; 0x24

  chDbgCheckClassS();
  2047f2:	f7ff f8b5 	bl	203960 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
  2047f6:	9b00      	ldr	r3, [sp, #0]
  2047f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
  2047fc:	d016      	beq.n	20482c <chSchGoSleepTimeoutS+0x4c>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
  2047fe:	a803      	add	r0, sp, #12
  204800:	9b09      	ldr	r3, [sp, #36]	; 0x24
  204802:	4a12      	ldr	r2, [pc, #72]	; (20484c <chSchGoSleepTimeoutS+0x6c>)
  204804:	9900      	ldr	r1, [sp, #0]
  204806:	f7ff fc8b 	bl	204120 <chVTDoSetI>
    chSchGoSleepS(newstate);
  20480a:	f89d 3007 	ldrb.w	r3, [sp, #7]
  20480e:	4618      	mov	r0, r3
  204810:	f7ff ff8e 	bl	204730 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
  204814:	ab03      	add	r3, sp, #12
  204816:	4618      	mov	r0, r3
  204818:	f7ff fe8a 	bl	204530 <chVTIsArmedI.lto_priv.1>
  20481c:	4603      	mov	r3, r0
  20481e:	2b00      	cmp	r3, #0
  204820:	d009      	beq.n	204836 <chSchGoSleepTimeoutS+0x56>
      chVTDoResetI(&vt);
  204822:	ab03      	add	r3, sp, #12
  204824:	4618      	mov	r0, r3
  204826:	f7ff fcbb 	bl	2041a0 <chVTDoResetI>
  20482a:	e004      	b.n	204836 <chSchGoSleepTimeoutS+0x56>
    }
  }
  else {
    chSchGoSleepS(newstate);
  20482c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  204830:	4618      	mov	r0, r3
  204832:	f7ff ff7d 	bl	204730 <chSchGoSleepS>
  }

  return tp->u.rdymsg;
  204836:	9b09      	ldr	r3, [sp, #36]	; 0x24
  204838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  20483a:	bf00      	nop
  20483c:	bf00      	nop
}
  20483e:	4618      	mov	r0, r3
  204840:	b00b      	add	sp, #44	; 0x2c
  204842:	f85d fb04 	ldr.w	pc, [sp], #4
  204846:	bf00      	nop
  204848:	20000958 	.word	0x20000958
  20484c:	00204651 	.word	0x00204651

00204850 <chSchWakeupS>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  204850:	b500      	push	{lr}
  204852:	b087      	sub	sp, #28
  204854:	9001      	str	r0, [sp, #4]
  204856:	9100      	str	r1, [sp, #0]
  os_instance_t *oip = currcore;
  204858:	4b2c      	ldr	r3, [pc, #176]	; (20490c <chSchWakeupS+0xbc>)
  20485a:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
  20485c:	9b05      	ldr	r3, [sp, #20]
  20485e:	68db      	ldr	r3, [r3, #12]
  204860:	9304      	str	r3, [sp, #16]

  chDbgCheckClassS();
  204862:	f7ff f87d 	bl	203960 <chDbgCheckClassS>

  chDbgAssert((oip->rlist.pqueue.next == &oip->rlist.pqueue) ||
  204866:	9b05      	ldr	r3, [sp, #20]
  204868:	681a      	ldr	r2, [r3, #0]
  20486a:	9b05      	ldr	r3, [sp, #20]
  20486c:	429a      	cmp	r2, r3
  20486e:	bf14      	ite	ne
  204870:	2301      	movne	r3, #1
  204872:	2300      	moveq	r3, #0
  204874:	b2db      	uxtb	r3, r3
  204876:	2b00      	cmp	r3, #0
  204878:	d00f      	beq.n	20489a <chSchWakeupS+0x4a>
  20487a:	9b05      	ldr	r3, [sp, #20]
  20487c:	68db      	ldr	r3, [r3, #12]
  20487e:	689a      	ldr	r2, [r3, #8]
  204880:	9b05      	ldr	r3, [sp, #20]
  204882:	681b      	ldr	r3, [r3, #0]
  204884:	689b      	ldr	r3, [r3, #8]
  204886:	429a      	cmp	r2, r3
  204888:	bf34      	ite	cc
  20488a:	2301      	movcc	r3, #1
  20488c:	2300      	movcs	r3, #0
  20488e:	b2db      	uxtb	r3, r3
  204890:	2b00      	cmp	r3, #0
  204892:	d002      	beq.n	20489a <chSchWakeupS+0x4a>
  204894:	481e      	ldr	r0, [pc, #120]	; (204910 <chSchWakeupS+0xc0>)
  204896:	f7fe fed3 	bl	203640 <chSysHalt>
              (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
  20489a:	9b01      	ldr	r3, [sp, #4]
  20489c:	9a00      	ldr	r2, [sp, #0]
  20489e:	635a      	str	r2, [r3, #52]	; 0x34
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.
     Note, we are favoring the path where the woken thread has higher
     priority.*/
  if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
  2048a0:	9b01      	ldr	r3, [sp, #4]
  2048a2:	689a      	ldr	r2, [r3, #8]
  2048a4:	9b04      	ldr	r3, [sp, #16]
  2048a6:	689b      	ldr	r3, [r3, #8]
  2048a8:	429a      	cmp	r2, r3
  2048aa:	bf94      	ite	ls
  2048ac:	2301      	movls	r3, #1
  2048ae:	2300      	movhi	r3, #0
  2048b0:	b2db      	uxtb	r3, r3
  2048b2:	2b00      	cmp	r3, #0
  2048b4:	d003      	beq.n	2048be <chSchWakeupS+0x6e>
    (void) __sch_ready_behind(ntp);
  2048b6:	9801      	ldr	r0, [sp, #4]
  2048b8:	f7ff fe5a 	bl	204570 <__sch_ready_behind>
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
  2048bc:	e021      	b.n	204902 <chSchWakeupS+0xb2>
    otp = __sch_ready_ahead(otp);
  2048be:	9804      	ldr	r0, [sp, #16]
  2048c0:	f7ff fe8e 	bl	2045e0 <__sch_ready_ahead>
  2048c4:	9004      	str	r0, [sp, #16]
    ntp->state = CH_STATE_CURRENT;
  2048c6:	9b01      	ldr	r3, [sp, #4]
  2048c8:	2201      	movs	r2, #1
  2048ca:	771a      	strb	r2, [r3, #28]
    __instance_set_currthread(oip, ntp);
  2048cc:	9b05      	ldr	r3, [sp, #20]
  2048ce:	9a01      	ldr	r2, [sp, #4]
  2048d0:	60da      	str	r2, [r3, #12]
    chSysSwitch(ntp, otp);
  2048d2:	9904      	ldr	r1, [sp, #16]
  2048d4:	9801      	ldr	r0, [sp, #4]
  2048d6:	f7ff f90b 	bl	203af0 <__trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  2048da:	f3ef 8309 	mrs	r3, PSP
  2048de:	9302      	str	r3, [sp, #8]
  return(result);
  2048e0:	9b02      	ldr	r3, [sp, #8]
  2048e2:	bf00      	nop
  2048e4:	9303      	str	r3, [sp, #12]
  2048e6:	9b03      	ldr	r3, [sp, #12]
  2048e8:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  2048ec:	9b04      	ldr	r3, [sp, #16]
  2048ee:	695b      	ldr	r3, [r3, #20]
  2048f0:	429a      	cmp	r2, r3
  2048f2:	d202      	bcs.n	2048fa <chSchWakeupS+0xaa>
  2048f4:	4807      	ldr	r0, [pc, #28]	; (204914 <chSchWakeupS+0xc4>)
  2048f6:	f7fe fea3 	bl	203640 <chSysHalt>
  2048fa:	9904      	ldr	r1, [sp, #16]
  2048fc:	9801      	ldr	r0, [sp, #4]
  2048fe:	f7fb fcef 	bl	2002e0 <__port_switch>
}
  204902:	bf00      	nop
  204904:	b007      	add	sp, #28
  204906:	f85d fb04 	ldr.w	pc, [sp], #4
  20490a:	bf00      	nop
  20490c:	20000958 	.word	0x20000958
  204910:	08006498 	.word	0x08006498
  204914:	08006444 	.word	0x08006444
	...

00204920 <chSchIsPreemptionRequired>:
 *                      immediately.
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  204920:	b084      	sub	sp, #16
  os_instance_t *oip = currcore;
  204922:	4b0b      	ldr	r3, [pc, #44]	; (204950 <chSchIsPreemptionRequired+0x30>)
  204924:	9303      	str	r3, [sp, #12]
  thread_t *tp = __instance_get_currthread(oip);
  204926:	9b03      	ldr	r3, [sp, #12]
  204928:	68db      	ldr	r3, [r3, #12]
  20492a:	9302      	str	r3, [sp, #8]

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
  20492c:	9b03      	ldr	r3, [sp, #12]
  20492e:	681b      	ldr	r3, [r3, #0]
  204930:	689b      	ldr	r3, [r3, #8]
  204932:	9301      	str	r3, [sp, #4]
  tprio_t p2 = tp->hdr.pqueue.prio;
  204934:	9b02      	ldr	r3, [sp, #8]
  204936:	689b      	ldr	r3, [r3, #8]
  204938:	9300      	str	r3, [sp, #0]
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
  20493a:	9a01      	ldr	r2, [sp, #4]
  20493c:	9b00      	ldr	r3, [sp, #0]
  20493e:	429a      	cmp	r2, r3
  204940:	bf8c      	ite	hi
  204942:	2301      	movhi	r3, #1
  204944:	2300      	movls	r3, #0
  204946:	b2db      	uxtb	r3, r3
#endif
}
  204948:	4618      	mov	r0, r3
  20494a:	b004      	add	sp, #16
  20494c:	4770      	bx	lr
  20494e:	bf00      	nop
  204950:	20000958 	.word	0x20000958
	...

00204960 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
  204960:	b500      	push	{lr}
  204962:	b087      	sub	sp, #28
  os_instance_t *oip = currcore;
  204964:	4b17      	ldr	r3, [pc, #92]	; (2049c4 <chSchDoPreemption+0x64>)
  204966:	9305      	str	r3, [sp, #20]
  thread_t *otp = __instance_get_currthread(oip);
  204968:	9b05      	ldr	r3, [sp, #20]
  20496a:	68db      	ldr	r3, [r3, #12]
  20496c:	9304      	str	r3, [sp, #16]
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  20496e:	9b05      	ldr	r3, [sp, #20]
  204970:	4618      	mov	r0, r3
  204972:	f7ff fd4d 	bl	204410 <ch_pqueue_remove_highest>
  204976:	9003      	str	r0, [sp, #12]
  ntp->state = CH_STATE_CURRENT;
  204978:	9b03      	ldr	r3, [sp, #12]
  20497a:	2201      	movs	r2, #1
  20497c:	771a      	strb	r2, [r3, #28]
  __instance_set_currthread(oip, ntp);
  20497e:	9b05      	ldr	r3, [sp, #20]
  204980:	9a03      	ldr	r2, [sp, #12]
  204982:	60da      	str	r2, [r3, #12]
    otp = __sch_ready_ahead(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
  204984:	9804      	ldr	r0, [sp, #16]
  204986:	f7ff fe2b 	bl	2045e0 <__sch_ready_ahead>
  20498a:	9004      	str	r0, [sp, #16]
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
  20498c:	9904      	ldr	r1, [sp, #16]
  20498e:	9803      	ldr	r0, [sp, #12]
  204990:	f7ff f8ae 	bl	203af0 <__trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  204994:	f3ef 8309 	mrs	r3, PSP
  204998:	9301      	str	r3, [sp, #4]
  return(result);
  20499a:	9b01      	ldr	r3, [sp, #4]
  20499c:	9302      	str	r3, [sp, #8]
  20499e:	9b02      	ldr	r3, [sp, #8]
  2049a0:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  2049a4:	9b04      	ldr	r3, [sp, #16]
  2049a6:	695b      	ldr	r3, [r3, #20]
  2049a8:	429a      	cmp	r2, r3
  2049aa:	d202      	bcs.n	2049b2 <chSchDoPreemption+0x52>
  2049ac:	4806      	ldr	r0, [pc, #24]	; (2049c8 <chSchDoPreemption+0x68>)
  2049ae:	f7fe fe47 	bl	203640 <chSysHalt>
  2049b2:	9904      	ldr	r1, [sp, #16]
  2049b4:	9803      	ldr	r0, [sp, #12]
  2049b6:	f7fb fc93 	bl	2002e0 <__port_switch>
}
  2049ba:	bf00      	nop
  2049bc:	b007      	add	sp, #28
  2049be:	f85d fb04 	ldr.w	pc, [sp], #4
  2049c2:	bf00      	nop
  2049c4:	20000958 	.word	0x20000958
  2049c8:	08006444 	.word	0x08006444
  2049cc:	00000000 	.word	0x00000000

002049d0 <__rfcu_object_init>:
 *
 * @param[out] rfcup    pointer to a @p rfcu_t object
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {
  2049d0:	b082      	sub	sp, #8
  2049d2:	9001      	str	r0, [sp, #4]

  rfcup->mask = (rfcu_mask_t)0;
  2049d4:	9b01      	ldr	r3, [sp, #4]
  2049d6:	2200      	movs	r2, #0
  2049d8:	601a      	str	r2, [r3, #0]
}
  2049da:	bf00      	nop
  2049dc:	b002      	add	sp, #8
  2049de:	4770      	bx	lr

002049e0 <__dbg_object_init>:
 *
 * @param[out] sdp      pointer to a @p system_debug_t object
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {
  2049e0:	b082      	sub	sp, #8
  2049e2:	9001      	str	r0, [sp, #4]

  sdp->panic_msg = NULL;
  2049e4:	9b01      	ldr	r3, [sp, #4]
  2049e6:	2200      	movs	r2, #0
  2049e8:	601a      	str	r2, [r3, #0]

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  /* The initial state is assumed to be within a critical zone.*/
  sdp->isr_cnt  = (cnt_t)0;
  2049ea:	9b01      	ldr	r3, [sp, #4]
  2049ec:	2200      	movs	r2, #0
  2049ee:	605a      	str	r2, [r3, #4]
  sdp->lock_cnt = (cnt_t)1;
  2049f0:	9b01      	ldr	r3, [sp, #4]
  2049f2:	2201      	movs	r2, #1
  2049f4:	609a      	str	r2, [r3, #8]
#endif
}
  2049f6:	bf00      	nop
  2049f8:	b002      	add	sp, #8
  2049fa:	4770      	bx	lr
  2049fc:	0000      	movs	r0, r0
	...

00204a00 <ch_queue_init.lto_priv.0>:
static inline void ch_queue_init(ch_queue_t *qp) {
  204a00:	b082      	sub	sp, #8
  204a02:	9001      	str	r0, [sp, #4]
  qp->next = qp;
  204a04:	9b01      	ldr	r3, [sp, #4]
  204a06:	9a01      	ldr	r2, [sp, #4]
  204a08:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
  204a0a:	9b01      	ldr	r3, [sp, #4]
  204a0c:	9a01      	ldr	r2, [sp, #4]
  204a0e:	605a      	str	r2, [r3, #4]
}
  204a10:	bf00      	nop
  204a12:	b002      	add	sp, #8
  204a14:	4770      	bx	lr
  204a16:	bf00      	nop
	...

00204a20 <ch_queue_insert.lto_priv.0>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
  204a20:	b082      	sub	sp, #8
  204a22:	9001      	str	r0, [sp, #4]
  204a24:	9100      	str	r1, [sp, #0]
  p->next       = qp;
  204a26:	9b00      	ldr	r3, [sp, #0]
  204a28:	9a01      	ldr	r2, [sp, #4]
  204a2a:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
  204a2c:	9b01      	ldr	r3, [sp, #4]
  204a2e:	685a      	ldr	r2, [r3, #4]
  204a30:	9b00      	ldr	r3, [sp, #0]
  204a32:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  204a34:	9b00      	ldr	r3, [sp, #0]
  204a36:	685b      	ldr	r3, [r3, #4]
  204a38:	9a00      	ldr	r2, [sp, #0]
  204a3a:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
  204a3c:	9b01      	ldr	r3, [sp, #4]
  204a3e:	9a00      	ldr	r2, [sp, #0]
  204a40:	605a      	str	r2, [r3, #4]
}
  204a42:	bf00      	nop
  204a44:	b002      	add	sp, #8
  204a46:	4770      	bx	lr
	...

00204a50 <ch_pqueue_init>:
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
  204a50:	b082      	sub	sp, #8
  204a52:	9001      	str	r0, [sp, #4]
  pqp->next = pqp;
  204a54:	9b01      	ldr	r3, [sp, #4]
  204a56:	9a01      	ldr	r2, [sp, #4]
  204a58:	601a      	str	r2, [r3, #0]
  pqp->prev = pqp;
  204a5a:	9b01      	ldr	r3, [sp, #4]
  204a5c:	9a01      	ldr	r2, [sp, #4]
  204a5e:	605a      	str	r2, [r3, #4]
  pqp->prio = (tprio_t)0;
  204a60:	9b01      	ldr	r3, [sp, #4]
  204a62:	2200      	movs	r2, #0
  204a64:	609a      	str	r2, [r3, #8]
}
  204a66:	bf00      	nop
  204a68:	b002      	add	sp, #8
  204a6a:	4770      	bx	lr
  204a6c:	0000      	movs	r0, r0
	...

00204a70 <ch_dlist_init>:
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
  204a70:	b082      	sub	sp, #8
  204a72:	9001      	str	r0, [sp, #4]
  dlhp->next  = dlhp;
  204a74:	9b01      	ldr	r3, [sp, #4]
  204a76:	9a01      	ldr	r2, [sp, #4]
  204a78:	601a      	str	r2, [r3, #0]
  dlhp->prev  = dlhp;
  204a7a:	9b01      	ldr	r3, [sp, #4]
  204a7c:	9a01      	ldr	r2, [sp, #4]
  204a7e:	605a      	str	r2, [r3, #4]
  dlhp->delta = (sysinterval_t)-1;
  204a80:	9b01      	ldr	r3, [sp, #4]
  204a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  204a86:	609a      	str	r2, [r3, #8]
}
  204a88:	bf00      	nop
  204a8a:	b002      	add	sp, #8
  204a8c:	4770      	bx	lr
  204a8e:	bf00      	nop

00204a90 <port_timer_get_time.lto_priv.2>:
static inline systime_t port_timer_get_time(void) {
  204a90:	b508      	push	{r3, lr}
  return stGetCounter();
  204a92:	f7fb fe55 	bl	200740 <stGetCounter>
  204a96:	4603      	mov	r3, r0
}
  204a98:	4618      	mov	r0, r3
  204a9a:	bd08      	pop	{r3, pc}
  204a9c:	0000      	movs	r0, r0
	...

00204aa0 <chVTGetSystemTimeX.lto_priv.2>:
static inline systime_t chVTGetSystemTimeX(void) {
  204aa0:	b508      	push	{r3, lr}
  return port_timer_get_time();
  204aa2:	f7ff fff5 	bl	204a90 <port_timer_get_time.lto_priv.2>
  204aa6:	4603      	mov	r3, r0
}
  204aa8:	4618      	mov	r0, r3
  204aaa:	bd08      	pop	{r3, pc}
  204aac:	0000      	movs	r0, r0
	...

00204ab0 <__vt_object_init>:
 *
 * @param[out] vtlp     pointer to the @p virtual_timers_list_t structure
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {
  204ab0:	b530      	push	{r4, r5, lr}
  204ab2:	b083      	sub	sp, #12
  204ab4:	9001      	str	r0, [sp, #4]

  ch_dlist_init(&vtlp->dlist);
  204ab6:	9b01      	ldr	r3, [sp, #4]
  204ab8:	4618      	mov	r0, r3
  204aba:	f7ff ffd9 	bl	204a70 <ch_dlist_init>
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  204abe:	9b01      	ldr	r3, [sp, #4]
  204ac0:	2200      	movs	r2, #0
  204ac2:	60da      	str	r2, [r3, #12]
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
  204ac4:	9b01      	ldr	r3, [sp, #4]
  204ac6:	2202      	movs	r2, #2
  204ac8:	611a      	str	r2, [r3, #16]
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
  204aca:	f7ff ffe9 	bl	204aa0 <chVTGetSystemTimeX.lto_priv.2>
  204ace:	4603      	mov	r3, r0
  204ad0:	2200      	movs	r2, #0
  204ad2:	461c      	mov	r4, r3
  204ad4:	4615      	mov	r5, r2
  204ad6:	9b01      	ldr	r3, [sp, #4]
  204ad8:	e9c3 4506 	strd	r4, r5, [r3, #24]
#endif
}
  204adc:	bf00      	nop
  204ade:	b003      	add	sp, #12
  204ae0:	bd30      	pop	{r4, r5, pc}
  204ae2:	bf00      	nop
	...

00204af0 <__reg_object_init>:
 *
 * @param[out] rp       pointer to a @p registry_t structure
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {
  204af0:	b500      	push	{lr}
  204af2:	b083      	sub	sp, #12
  204af4:	9001      	str	r0, [sp, #4]

  ch_queue_init(&rp->queue);
  204af6:	9b01      	ldr	r3, [sp, #4]
  204af8:	4618      	mov	r0, r3
  204afa:	f7ff ff81 	bl	204a00 <ch_queue_init.lto_priv.0>
}
  204afe:	bf00      	nop
  204b00:	b003      	add	sp, #12
  204b02:	f85d fb04 	ldr.w	pc, [sp], #4
  204b06:	bf00      	nop
	...

00204b10 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
  204b10:	b082      	sub	sp, #8
  204b12:	9001      	str	r0, [sp, #4]
}
  204b14:	bf00      	nop
  (void)p;

  while (true) {
    /*lint -save -e522 [2.2] Apparently no side effects because it contains
      an asm instruction.*/
    port_wait_for_interrupt();
  204b16:	e7fd      	b.n	204b14 <__idle_thread+0x4>
	...

00204b20 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
  204b20:	b500      	push	{lr}
  204b22:	b093      	sub	sp, #76	; 0x4c
  204b24:	9001      	str	r0, [sp, #4]
  204b26:	9100      	str	r1, [sp, #0]

  /* Registering into the global system structure.*/
#if CH_CFG_SMP_MODE == TRUE
  core_id = port_get_core_id();
#else
  core_id = 0U;
  204b28:	2300      	movs	r3, #0
  204b2a:	9311      	str	r3, [sp, #68]	; 0x44
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  204b2c:	4a41      	ldr	r2, [pc, #260]	; (204c34 <chInstanceObjectInit+0x114>)
  204b2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
  204b30:	009b      	lsls	r3, r3, #2
  204b32:	4413      	add	r3, r2
  204b34:	685b      	ldr	r3, [r3, #4]
  204b36:	2b00      	cmp	r3, #0
  204b38:	bf14      	ite	ne
  204b3a:	2301      	movne	r3, #1
  204b3c:	2300      	moveq	r3, #0
  204b3e:	b2db      	uxtb	r3, r3
  204b40:	2b00      	cmp	r3, #0
  204b42:	d002      	beq.n	204b4a <chInstanceObjectInit+0x2a>
  204b44:	483c      	ldr	r0, [pc, #240]	; (204c38 <chInstanceObjectInit+0x118>)
  204b46:	f7fe fd7b 	bl	203640 <chSysHalt>
  ch_system.instances[core_id] = oip;
  204b4a:	4a3a      	ldr	r2, [pc, #232]	; (204c34 <chInstanceObjectInit+0x114>)
  204b4c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  204b4e:	009b      	lsls	r3, r3, #2
  204b50:	4413      	add	r3, r2
  204b52:	9a01      	ldr	r2, [sp, #4]
  204b54:	605a      	str	r2, [r3, #4]

  /* Core associated to this instance.*/
  oip->core_id = core_id;
  204b56:	9b01      	ldr	r3, [sp, #4]
  204b58:	9a11      	ldr	r2, [sp, #68]	; 0x44
  204b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
  204b5c:	9b01      	ldr	r3, [sp, #4]
  204b5e:	9a00      	ldr	r2, [sp, #0]
  204b60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Port initialization for the current instance.*/
  port_init(oip);
  204b62:	9801      	ldr	r0, [sp, #4]
  204b64:	f001 f894 	bl	205c90 <port_init>

  /* Ready list initialization.*/
  ch_pqueue_init(&oip->rlist.pqueue);
  204b68:	9b01      	ldr	r3, [sp, #4]
  204b6a:	4618      	mov	r0, r3
  204b6c:	f7ff ff70 	bl	204a50 <ch_pqueue_init>

#if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE)
  /* Registry initialization when SMP mode is disabled.*/
  __reg_object_init(&oip->reglist);
  204b70:	9b01      	ldr	r3, [sp, #4]
  204b72:	3330      	adds	r3, #48	; 0x30
  204b74:	4618      	mov	r0, r3
  204b76:	f7ff ffbb 	bl	204af0 <__reg_object_init>
#endif

#if CH_CFG_SMP_MODE == FALSE
  /* RFCU initialization when SMP mode is disabled.*/
  __rfcu_object_init(&oip->rfcu);
  204b7a:	9b01      	ldr	r3, [sp, #4]
  204b7c:	333c      	adds	r3, #60	; 0x3c
  204b7e:	4618      	mov	r0, r3
  204b80:	f7ff ff26 	bl	2049d0 <__rfcu_object_init>
#endif

  /* Virtual timers list initialization.*/
  __vt_object_init(&oip->vtlist);
  204b84:	9b01      	ldr	r3, [sp, #4]
  204b86:	3310      	adds	r3, #16
  204b88:	4618      	mov	r0, r3
  204b8a:	f7ff ff91 	bl	204ab0 <__vt_object_init>

  /* Debug support initialization.*/
  __dbg_object_init(&oip->dbg);
  204b8e:	9b01      	ldr	r3, [sp, #4]
  204b90:	33e4      	adds	r3, #228	; 0xe4
  204b92:	4618      	mov	r0, r3
  204b94:	f7ff ff24 	bl	2049e0 <__dbg_object_init>

#if CH_DBG_TRACE_MASK != CH_DBG_TRACE_MASK_DISABLED
  /* Trace buffer initialization.*/
  __trace_object_init(&oip->trace_buffer);
  204b98:	9b01      	ldr	r3, [sp, #4]
  204b9a:	33f0      	adds	r3, #240	; 0xf0
  204b9c:	4618      	mov	r0, r3
  204b9e:	f7fe ff47 	bl	203a30 <__trace_object_init>

  /* Now this instructions flow becomes the main thread or the idle thread
     depending on the CH_CFG_NO_IDLE_THREAD setting.*/
  {
#if CH_CFG_NO_IDLE_THREAD == FALSE
    const THD_DECL(main_thd_desc,
  204ba2:	4b26      	ldr	r3, [pc, #152]	; (204c3c <chInstanceObjectInit+0x11c>)
  204ba4:	9303      	str	r3, [sp, #12]
  204ba6:	9b00      	ldr	r3, [sp, #0]
  204ba8:	685b      	ldr	r3, [r3, #4]
  204baa:	9304      	str	r3, [sp, #16]
  204bac:	9b00      	ldr	r3, [sp, #0]
  204bae:	689b      	ldr	r3, [r3, #8]
  204bb0:	9305      	str	r3, [sp, #20]
  204bb2:	2380      	movs	r3, #128	; 0x80
  204bb4:	9306      	str	r3, [sp, #24]
  204bb6:	2300      	movs	r3, #0
  204bb8:	9307      	str	r3, [sp, #28]
  204bba:	2300      	movs	r3, #0
  204bbc:	9308      	str	r3, [sp, #32]
  204bbe:	9b01      	ldr	r3, [sp, #4]
  204bc0:	9309      	str	r3, [sp, #36]	; 0x24
                   "main", oicp->cstack_base, oicp->cstack_end,
                   NORMALPRIO, NULL, NULL, oip
    );

    oip->rlist.current = chThdObjectInit(&oip->mainthread, &main_thd_desc);
  204bc2:	9b01      	ldr	r3, [sp, #4]
  204bc4:	3394      	adds	r3, #148	; 0x94
  204bc6:	aa03      	add	r2, sp, #12
  204bc8:	4611      	mov	r1, r2
  204bca:	4618      	mov	r0, r3
  204bcc:	f000 f978 	bl	204ec0 <chThdObjectInit>
  204bd0:	4602      	mov	r2, r0
  204bd2:	9b01      	ldr	r3, [sp, #4]
  204bd4:	60da      	str	r2, [r3, #12]
    oip->rlist.current = chThdObjectInit(&oip->idlethread, &idle_thd_desc);
#endif
  }

#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(oip, oip->rlist.current);
  204bd6:	9b01      	ldr	r3, [sp, #4]
  204bd8:	f103 0230 	add.w	r2, r3, #48	; 0x30
  204bdc:	9b01      	ldr	r3, [sp, #4]
  204bde:	68db      	ldr	r3, [r3, #12]
  204be0:	3324      	adds	r3, #36	; 0x24
  204be2:	4619      	mov	r1, r3
  204be4:	4610      	mov	r0, r2
  204be6:	f7ff ff1b 	bl	204a20 <ch_queue_insert.lto_priv.0>
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
  204bea:	9b01      	ldr	r3, [sp, #4]
  204bec:	68db      	ldr	r3, [r3, #12]
  204bee:	2201      	movs	r2, #1
  204bf0:	771a      	strb	r2, [r3, #28]
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    const THD_DECL(idle_thd_desc,
  204bf2:	4b13      	ldr	r3, [pc, #76]	; (204c40 <chInstanceObjectInit+0x120>)
  204bf4:	930a      	str	r3, [sp, #40]	; 0x28
  204bf6:	9b00      	ldr	r3, [sp, #0]
  204bf8:	68db      	ldr	r3, [r3, #12]
  204bfa:	930b      	str	r3, [sp, #44]	; 0x2c
  204bfc:	9b00      	ldr	r3, [sp, #0]
  204bfe:	691b      	ldr	r3, [r3, #16]
  204c00:	930c      	str	r3, [sp, #48]	; 0x30
  204c02:	2301      	movs	r3, #1
  204c04:	930d      	str	r3, [sp, #52]	; 0x34
  204c06:	4b0f      	ldr	r3, [pc, #60]	; (204c44 <chInstanceObjectInit+0x124>)
  204c08:	930e      	str	r3, [sp, #56]	; 0x38
  204c0a:	2300      	movs	r3, #0
  204c0c:	930f      	str	r3, [sp, #60]	; 0x3c
  204c0e:	9b01      	ldr	r3, [sp, #4]
  204c10:	9310      	str	r3, [sp, #64]	; 0x40
                   "idle", oicp->idlestack_base, oicp->idlestack_end,
                   IDLEPRIO, __idle_thread, NULL, oip
    );

#if CH_DBG_FILL_THREADS == TRUE
    __thd_stackfill((uint8_t *)idle_thd_desc.wbase,
  204c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    (uint8_t *)idle_thd_desc.wend);
  204c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __thd_stackfill((uint8_t *)idle_thd_desc.wbase,
  204c16:	4611      	mov	r1, r2
  204c18:	4618      	mov	r0, r3
  204c1a:	f000 f939 	bl	204e90 <__thd_stackfill>
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdSpawnRunningI(&oip->idlethread, &idle_thd_desc);
  204c1e:	9b01      	ldr	r3, [sp, #4]
  204c20:	3344      	adds	r3, #68	; 0x44
  204c22:	aa0a      	add	r2, sp, #40	; 0x28
  204c24:	4611      	mov	r1, r2
  204c26:	4618      	mov	r0, r3
  204c28:	f000 fa42 	bl	2050b0 <chThdSpawnRunningI>
  }
#endif /* CH_CFG_NO_IDLE_THREAD == FALSE */
}
  204c2c:	bf00      	nop
  204c2e:	b013      	add	sp, #76	; 0x4c
  204c30:	f85d fb04 	ldr.w	pc, [sp], #4
  204c34:	20000948 	.word	0x20000948
  204c38:	080064b8 	.word	0x080064b8
  204c3c:	080064a8 	.word	0x080064a8
  204c40:	080064b0 	.word	0x080064b0
  204c44:	00204b11 	.word	0x00204b11
	...

00204c50 <ch_list_init>:
static inline void ch_list_init(ch_list_t *lp) {
  204c50:	b082      	sub	sp, #8
  204c52:	9001      	str	r0, [sp, #4]
  lp->next = lp;
  204c54:	9b01      	ldr	r3, [sp, #4]
  204c56:	9a01      	ldr	r2, [sp, #4]
  204c58:	601a      	str	r2, [r3, #0]
}
  204c5a:	bf00      	nop
  204c5c:	b002      	add	sp, #8
  204c5e:	4770      	bx	lr

00204c60 <ch_list_notempty>:
static inline bool ch_list_notempty(ch_list_t *lp) {
  204c60:	b082      	sub	sp, #8
  204c62:	9001      	str	r0, [sp, #4]
  return (bool)(lp->next != lp);
  204c64:	9b01      	ldr	r3, [sp, #4]
  204c66:	681b      	ldr	r3, [r3, #0]
  204c68:	9a01      	ldr	r2, [sp, #4]
  204c6a:	429a      	cmp	r2, r3
  204c6c:	bf14      	ite	ne
  204c6e:	2301      	movne	r3, #1
  204c70:	2300      	moveq	r3, #0
  204c72:	b2db      	uxtb	r3, r3
}
  204c74:	4618      	mov	r0, r3
  204c76:	b002      	add	sp, #8
  204c78:	4770      	bx	lr
  204c7a:	bf00      	nop
  204c7c:	0000      	movs	r0, r0
	...

00204c80 <ch_list_unlink>:
static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
  204c80:	b084      	sub	sp, #16
  204c82:	9001      	str	r0, [sp, #4]
  ch_list_t *p = lp->next;
  204c84:	9b01      	ldr	r3, [sp, #4]
  204c86:	681b      	ldr	r3, [r3, #0]
  204c88:	9303      	str	r3, [sp, #12]
  lp->next = p->next;
  204c8a:	9b03      	ldr	r3, [sp, #12]
  204c8c:	681a      	ldr	r2, [r3, #0]
  204c8e:	9b01      	ldr	r3, [sp, #4]
  204c90:	601a      	str	r2, [r3, #0]
  return p;
  204c92:	9b03      	ldr	r3, [sp, #12]
}
  204c94:	4618      	mov	r0, r3
  204c96:	b004      	add	sp, #16
  204c98:	4770      	bx	lr
  204c9a:	bf00      	nop
  204c9c:	0000      	movs	r0, r0
	...

00204ca0 <ch_queue_init.lto_priv.1>:
static inline void ch_queue_init(ch_queue_t *qp) {
  204ca0:	b082      	sub	sp, #8
  204ca2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
  204ca4:	9b01      	ldr	r3, [sp, #4]
  204ca6:	9a01      	ldr	r2, [sp, #4]
  204ca8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
  204caa:	9b01      	ldr	r3, [sp, #4]
  204cac:	9a01      	ldr	r2, [sp, #4]
  204cae:	605a      	str	r2, [r3, #4]
}
  204cb0:	bf00      	nop
  204cb2:	b002      	add	sp, #8
  204cb4:	4770      	bx	lr
  204cb6:	bf00      	nop
	...

00204cc0 <ch_queue_notempty.lto_priv.0>:
static inline bool ch_queue_notempty(const ch_queue_t *qp) {
  204cc0:	b082      	sub	sp, #8
  204cc2:	9001      	str	r0, [sp, #4]
  return (bool)(qp->next != qp);
  204cc4:	9b01      	ldr	r3, [sp, #4]
  204cc6:	681b      	ldr	r3, [r3, #0]
  204cc8:	9a01      	ldr	r2, [sp, #4]
  204cca:	429a      	cmp	r2, r3
  204ccc:	bf14      	ite	ne
  204cce:	2301      	movne	r3, #1
  204cd0:	2300      	moveq	r3, #0
  204cd2:	b2db      	uxtb	r3, r3
}
  204cd4:	4618      	mov	r0, r3
  204cd6:	b002      	add	sp, #8
  204cd8:	4770      	bx	lr
  204cda:	bf00      	nop
  204cdc:	0000      	movs	r0, r0
	...

00204ce0 <ch_queue_insert.lto_priv.1>:
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
  204ce0:	b082      	sub	sp, #8
  204ce2:	9001      	str	r0, [sp, #4]
  204ce4:	9100      	str	r1, [sp, #0]
  p->next       = qp;
  204ce6:	9b00      	ldr	r3, [sp, #0]
  204ce8:	9a01      	ldr	r2, [sp, #4]
  204cea:	601a      	str	r2, [r3, #0]
  p->prev       = qp->prev;
  204cec:	9b01      	ldr	r3, [sp, #4]
  204cee:	685a      	ldr	r2, [r3, #4]
  204cf0:	9b00      	ldr	r3, [sp, #0]
  204cf2:	605a      	str	r2, [r3, #4]
  p->prev->next = p;
  204cf4:	9b00      	ldr	r3, [sp, #0]
  204cf6:	685b      	ldr	r3, [r3, #4]
  204cf8:	9a00      	ldr	r2, [sp, #0]
  204cfa:	601a      	str	r2, [r3, #0]
  qp->prev      = p;
  204cfc:	9b01      	ldr	r3, [sp, #4]
  204cfe:	9a00      	ldr	r2, [sp, #0]
  204d00:	605a      	str	r2, [r3, #4]
}
  204d02:	bf00      	nop
  204d04:	b002      	add	sp, #8
  204d06:	4770      	bx	lr
	...

00204d10 <ch_queue_fifo_remove.lto_priv.0>:
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  204d10:	b084      	sub	sp, #16
  204d12:	9001      	str	r0, [sp, #4]
  ch_queue_t *p = qp->next;
  204d14:	9b01      	ldr	r3, [sp, #4]
  204d16:	681b      	ldr	r3, [r3, #0]
  204d18:	9303      	str	r3, [sp, #12]
  qp->next       = p->next;
  204d1a:	9b03      	ldr	r3, [sp, #12]
  204d1c:	681a      	ldr	r2, [r3, #0]
  204d1e:	9b01      	ldr	r3, [sp, #4]
  204d20:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
  204d22:	9b01      	ldr	r3, [sp, #4]
  204d24:	681b      	ldr	r3, [r3, #0]
  204d26:	9a01      	ldr	r2, [sp, #4]
  204d28:	605a      	str	r2, [r3, #4]
  return p;
  204d2a:	9b03      	ldr	r3, [sp, #12]
}
  204d2c:	4618      	mov	r0, r3
  204d2e:	b004      	add	sp, #16
  204d30:	4770      	bx	lr
  204d32:	bf00      	nop
	...

00204d40 <ch_queue_dequeue.lto_priv.1>:
static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
  204d40:	b082      	sub	sp, #8
  204d42:	9001      	str	r0, [sp, #4]
  p->prev->next = p->next;
  204d44:	9b01      	ldr	r3, [sp, #4]
  204d46:	685b      	ldr	r3, [r3, #4]
  204d48:	9a01      	ldr	r2, [sp, #4]
  204d4a:	6812      	ldr	r2, [r2, #0]
  204d4c:	601a      	str	r2, [r3, #0]
  p->next->prev = p->prev;
  204d4e:	9b01      	ldr	r3, [sp, #4]
  204d50:	681b      	ldr	r3, [r3, #0]
  204d52:	9a01      	ldr	r2, [sp, #4]
  204d54:	6852      	ldr	r2, [r2, #4]
  204d56:	605a      	str	r2, [r3, #4]
  return p;
  204d58:	9b01      	ldr	r3, [sp, #4]
}
  204d5a:	4618      	mov	r0, r3
  204d5c:	b002      	add	sp, #8
  204d5e:	4770      	bx	lr

00204d60 <chSysLock.lto_priv.8>:
static inline void chSysLock(void) {
  204d60:	b500      	push	{lr}
  204d62:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  204d64:	b672      	cpsid	i
}
  204d66:	bf00      	nop
  204d68:	2330      	movs	r3, #48	; 0x30
  204d6a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  204d6c:	9b01      	ldr	r3, [sp, #4]
  204d6e:	f383 8811 	msr	BASEPRI, r3
}
  204d72:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  204d74:	b662      	cpsie	i
}
  204d76:	bf00      	nop
}
  204d78:	bf00      	nop
  __dbg_check_lock();
  204d7a:	f7fe fcb1 	bl	2036e0 <__dbg_check_lock>
}
  204d7e:	bf00      	nop
  204d80:	b003      	add	sp, #12
  204d82:	f85d fb04 	ldr.w	pc, [sp], #4
  204d86:	bf00      	nop
	...

00204d90 <chSysUnlock.lto_priv.8>:
static inline void chSysUnlock(void) {
  204d90:	b500      	push	{lr}
  204d92:	b083      	sub	sp, #12
  __dbg_check_unlock();
  204d94:	f7fe fccc 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  204d98:	4b12      	ldr	r3, [pc, #72]	; (204de4 <chSysUnlock.lto_priv.8+0x54>)
  204d9a:	681b      	ldr	r3, [r3, #0]
  204d9c:	4a11      	ldr	r2, [pc, #68]	; (204de4 <chSysUnlock.lto_priv.8+0x54>)
  204d9e:	4293      	cmp	r3, r2
  204da0:	bf14      	ite	ne
  204da2:	2301      	movne	r3, #1
  204da4:	2300      	moveq	r3, #0
  204da6:	b2db      	uxtb	r3, r3
  204da8:	2b00      	cmp	r3, #0
  204daa:	d00f      	beq.n	204dcc <chSysUnlock.lto_priv.8+0x3c>
  204dac:	4b0d      	ldr	r3, [pc, #52]	; (204de4 <chSysUnlock.lto_priv.8+0x54>)
  204dae:	68db      	ldr	r3, [r3, #12]
  204db0:	689a      	ldr	r2, [r3, #8]
  204db2:	4b0c      	ldr	r3, [pc, #48]	; (204de4 <chSysUnlock.lto_priv.8+0x54>)
  204db4:	681b      	ldr	r3, [r3, #0]
  204db6:	689b      	ldr	r3, [r3, #8]
  204db8:	429a      	cmp	r2, r3
  204dba:	bf34      	ite	cc
  204dbc:	2301      	movcc	r3, #1
  204dbe:	2300      	movcs	r3, #0
  204dc0:	b2db      	uxtb	r3, r3
  204dc2:	2b00      	cmp	r3, #0
  204dc4:	d002      	beq.n	204dcc <chSysUnlock.lto_priv.8+0x3c>
  204dc6:	4808      	ldr	r0, [pc, #32]	; (204de8 <chSysUnlock.lto_priv.8+0x58>)
  204dc8:	f7fe fc3a 	bl	203640 <chSysHalt>
  204dcc:	2300      	movs	r3, #0
  204dce:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  204dd0:	9b01      	ldr	r3, [sp, #4]
  204dd2:	f383 8811 	msr	BASEPRI, r3
}
  204dd6:	bf00      	nop
}
  204dd8:	bf00      	nop
}
  204dda:	bf00      	nop
  204ddc:	b003      	add	sp, #12
  204dde:	f85d fb04 	ldr.w	pc, [sp], #4
  204de2:	bf00      	nop
  204de4:	20000958 	.word	0x20000958
  204de8:	08006500 	.word	0x08006500
  204dec:	00000000 	.word	0x00000000

00204df0 <chThdGetSelfX.lto_priv.0>:
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
  204df0:	4b01      	ldr	r3, [pc, #4]	; (204df8 <chThdGetSelfX.lto_priv.0+0x8>)
  204df2:	68db      	ldr	r3, [r3, #12]
}
  204df4:	4618      	mov	r0, r3
  204df6:	4770      	bx	lr
  204df8:	20000958 	.word	0x20000958
  204dfc:	00000000 	.word	0x00000000

00204e00 <chThdSleepS>:
 *                        state.
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {
  204e00:	b500      	push	{lr}
  204e02:	b083      	sub	sp, #12
  204e04:	9001      	str	r0, [sp, #4]

  chDbgCheck(ticks != TIME_IMMEDIATE);
  204e06:	9b01      	ldr	r3, [sp, #4]
  204e08:	2b00      	cmp	r3, #0
  204e0a:	bf0c      	ite	eq
  204e0c:	2301      	moveq	r3, #1
  204e0e:	2300      	movne	r3, #0
  204e10:	b2db      	uxtb	r3, r3
  204e12:	2b00      	cmp	r3, #0
  204e14:	d002      	beq.n	204e1c <chThdSleepS+0x1c>
  204e16:	4805      	ldr	r0, [pc, #20]	; (204e2c <chThdSleepS+0x2c>)
  204e18:	f7fe fc12 	bl	203640 <chSysHalt>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
  204e1c:	9901      	ldr	r1, [sp, #4]
  204e1e:	2008      	movs	r0, #8
  204e20:	f7ff fcde 	bl	2047e0 <chSchGoSleepTimeoutS>
}
  204e24:	bf00      	nop
  204e26:	b003      	add	sp, #12
  204e28:	f85d fb04 	ldr.w	pc, [sp], #4
  204e2c:	0800653c 	.word	0x0800653c

00204e30 <chThdDoDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  204e30:	b500      	push	{lr}
  204e32:	b085      	sub	sp, #20
  204e34:	9001      	str	r0, [sp, #4]
  204e36:	9100      	str	r1, [sp, #0]
  thread_t *tp;

  chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");
  204e38:	9b01      	ldr	r3, [sp, #4]
  204e3a:	4618      	mov	r0, r3
  204e3c:	f7ff ff40 	bl	204cc0 <ch_queue_notempty.lto_priv.0>
  204e40:	4603      	mov	r3, r0
  204e42:	f083 0301 	eor.w	r3, r3, #1
  204e46:	b2db      	uxtb	r3, r3
  204e48:	2b00      	cmp	r3, #0
  204e4a:	d002      	beq.n	204e52 <chThdDoDequeueNextI+0x22>
  204e4c:	480e      	ldr	r0, [pc, #56]	; (204e88 <chThdDoDequeueNextI+0x58>)
  204e4e:	f7fe fbf7 	bl	203640 <chSysHalt>

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));
  204e52:	9b01      	ldr	r3, [sp, #4]
  204e54:	4618      	mov	r0, r3
  204e56:	f7ff ff5b 	bl	204d10 <ch_queue_fifo_remove.lto_priv.0>
  204e5a:	9003      	str	r0, [sp, #12]

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
  204e5c:	9b03      	ldr	r3, [sp, #12]
  204e5e:	7f1b      	ldrb	r3, [r3, #28]
  204e60:	2b04      	cmp	r3, #4
  204e62:	bf14      	ite	ne
  204e64:	2301      	movne	r3, #1
  204e66:	2300      	moveq	r3, #0
  204e68:	b2db      	uxtb	r3, r3
  204e6a:	2b00      	cmp	r3, #0
  204e6c:	d002      	beq.n	204e74 <chThdDoDequeueNextI+0x44>
  204e6e:	4806      	ldr	r0, [pc, #24]	; (204e88 <chThdDoDequeueNextI+0x58>)
  204e70:	f7fe fbe6 	bl	203640 <chSysHalt>

  tp->u.rdymsg = msg;
  204e74:	9b03      	ldr	r3, [sp, #12]
  204e76:	9a00      	ldr	r2, [sp, #0]
  204e78:	635a      	str	r2, [r3, #52]	; 0x34
  (void) chSchReadyI(tp);
  204e7a:	9803      	ldr	r0, [sp, #12]
  204e7c:	f7ff fc38 	bl	2046f0 <chSchReadyI>
}
  204e80:	bf00      	nop
  204e82:	b005      	add	sp, #20
  204e84:	f85d fb04 	ldr.w	pc, [sp], #4
  204e88:	08006570 	.word	0x08006570
  204e8c:	00000000 	.word	0x00000000

00204e90 <__thd_stackfill>:
 * @param[in] startp    first address to fill
 * @param[in] endp      last address to fill +1
 *
 * @notapi
 */
void __thd_stackfill(uint8_t *startp, uint8_t *endp) {
  204e90:	b082      	sub	sp, #8
  204e92:	9001      	str	r0, [sp, #4]
  204e94:	9100      	str	r1, [sp, #0]

  do {
    *startp++ = CH_DBG_STACK_FILL_VALUE;
  204e96:	9b01      	ldr	r3, [sp, #4]
  204e98:	1c5a      	adds	r2, r3, #1
  204e9a:	9201      	str	r2, [sp, #4]
  204e9c:	2255      	movs	r2, #85	; 0x55
  204e9e:	701a      	strb	r2, [r3, #0]
  } while (likely(startp < endp));
  204ea0:	9a01      	ldr	r2, [sp, #4]
  204ea2:	9b00      	ldr	r3, [sp, #0]
  204ea4:	429a      	cmp	r2, r3
  204ea6:	bf34      	ite	cc
  204ea8:	2301      	movcc	r3, #1
  204eaa:	2300      	movcs	r3, #0
  204eac:	b2db      	uxtb	r3, r3
  204eae:	2b00      	cmp	r3, #0
  204eb0:	d1f1      	bne.n	204e96 <__thd_stackfill+0x6>
}
  204eb2:	bf00      	nop
  204eb4:	bf00      	nop
  204eb6:	b002      	add	sp, #8
  204eb8:	4770      	bx	lr
  204eba:	bf00      	nop
  204ebc:	0000      	movs	r0, r0
	...

00204ec0 <chThdObjectInit>:
 * @return              The same thread pointer passed as parameter.
 *
 * @init
 */
thread_t *chThdObjectInit(thread_t *tp,
                          const thread_descriptor_t *tdp) {
  204ec0:	b500      	push	{lr}
  204ec2:	b083      	sub	sp, #12
  204ec4:	9001      	str	r0, [sp, #4]
  204ec6:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);
  204ec8:	9b01      	ldr	r3, [sp, #4]
  204eca:	2b00      	cmp	r3, #0
  204ecc:	bf0c      	ite	eq
  204ece:	2301      	moveq	r3, #1
  204ed0:	2300      	movne	r3, #0
  204ed2:	b2db      	uxtb	r3, r3
  204ed4:	2b00      	cmp	r3, #0
  204ed6:	d002      	beq.n	204ede <chThdObjectInit+0x1e>
  204ed8:	4829      	ldr	r0, [pc, #164]	; (204f80 <chThdObjectInit+0xc0>)
  204eda:	f7fe fbb1 	bl	203640 <chSysHalt>
  chDbgCheck(tdp != NULL);
  204ede:	9b00      	ldr	r3, [sp, #0]
  204ee0:	2b00      	cmp	r3, #0
  204ee2:	bf0c      	ite	eq
  204ee4:	2301      	moveq	r3, #1
  204ee6:	2300      	movne	r3, #0
  204ee8:	b2db      	uxtb	r3, r3
  204eea:	2b00      	cmp	r3, #0
  204eec:	d002      	beq.n	204ef4 <chThdObjectInit+0x34>
  204eee:	4824      	ldr	r0, [pc, #144]	; (204f80 <chThdObjectInit+0xc0>)
  204ef0:	f7fe fba6 	bl	203640 <chSysHalt>

  /* Stack boundaries.*/
  tp->wabase = (void *)tdp->wbase;
  204ef4:	9b00      	ldr	r3, [sp, #0]
  204ef6:	685a      	ldr	r2, [r3, #4]
  204ef8:	9b01      	ldr	r3, [sp, #4]
  204efa:	615a      	str	r2, [r3, #20]
  tp->waend  = (void *)tdp->wend;
  204efc:	9b00      	ldr	r3, [sp, #0]
  204efe:	689a      	ldr	r2, [r3, #8]
  204f00:	9b01      	ldr	r3, [sp, #4]
  204f02:	619a      	str	r2, [r3, #24]

  /* Thread-related fields.*/
  tp->hdr.pqueue.prio   = tdp->prio;
  204f04:	9b00      	ldr	r3, [sp, #0]
  204f06:	68da      	ldr	r2, [r3, #12]
  204f08:	9b01      	ldr	r3, [sp, #4]
  204f0a:	609a      	str	r2, [r3, #8]
  tp->state             = CH_STATE_WTSTART;
  204f0c:	9b01      	ldr	r3, [sp, #4]
  204f0e:	2202      	movs	r2, #2
  204f10:	771a      	strb	r2, [r3, #28]
  tp->flags             = (tmode_t)0;
  204f12:	9b01      	ldr	r3, [sp, #4]
  204f14:	2200      	movs	r2, #0
  204f16:	775a      	strb	r2, [r3, #29]
  if (tdp->owner != NULL) {
  204f18:	9b00      	ldr	r3, [sp, #0]
  204f1a:	699b      	ldr	r3, [r3, #24]
  204f1c:	2b00      	cmp	r3, #0
  204f1e:	d004      	beq.n	204f2a <chThdObjectInit+0x6a>
    tp->owner           = tdp->owner;
  204f20:	9b00      	ldr	r3, [sp, #0]
  204f22:	699a      	ldr	r2, [r3, #24]
  204f24:	9b01      	ldr	r3, [sp, #4]
  204f26:	611a      	str	r2, [r3, #16]
  204f28:	e002      	b.n	204f30 <chThdObjectInit+0x70>
  }
  else {
    tp->owner           = currcore;
  204f2a:	9b01      	ldr	r3, [sp, #4]
  204f2c:	4a15      	ldr	r2, [pc, #84]	; (204f84 <chThdObjectInit+0xc4>)
  204f2e:	611a      	str	r2, [r3, #16]
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->dispose           = NULL;
  204f30:	9b01      	ldr	r3, [sp, #4]
  204f32:	2200      	movs	r2, #0
  204f34:	62da      	str	r2, [r3, #44]	; 0x2c
  tp->object            = NULL;
  204f36:	9b01      	ldr	r3, [sp, #4]
  204f38:	2200      	movs	r2, #0
  204f3a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  ch_list_init(&tp->waiting);
  204f3c:	9b01      	ldr	r3, [sp, #4]
  204f3e:	3338      	adds	r3, #56	; 0x38
  204f40:	4618      	mov	r0, r3
  204f42:	f7ff fe85 	bl	204c50 <ch_list_init>
#endif

  /* Mutex-related fields.*/
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio          = tdp->prio;
  204f46:	9b00      	ldr	r3, [sp, #0]
  204f48:	68da      	ldr	r2, [r3, #12]
  204f4a:	9b01      	ldr	r3, [sp, #4]
  204f4c:	64da      	str	r2, [r3, #76]	; 0x4c
  tp->mtxlist           = NULL;
  204f4e:	9b01      	ldr	r3, [sp, #4]
  204f50:	2200      	movs	r2, #0
  204f52:	649a      	str	r2, [r3, #72]	; 0x48
#endif

  /* Events-related fields.*/
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending          = (eventmask_t)0;
  204f54:	9b01      	ldr	r3, [sp, #4]
  204f56:	2200      	movs	r2, #0
  204f58:	645a      	str	r2, [r3, #68]	; 0x44
  tp->time              = (systime_t)0;
#endif

  /* Registry-related fields.*/
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs              = (trefs_t)1;
  204f5a:	9b01      	ldr	r3, [sp, #4]
  204f5c:	2201      	movs	r2, #1
  204f5e:	779a      	strb	r2, [r3, #30]
  tp->name              = tdp->name;
  204f60:	9b00      	ldr	r3, [sp, #0]
  204f62:	681a      	ldr	r2, [r3, #0]
  204f64:	9b01      	ldr	r3, [sp, #4]
  204f66:	621a      	str	r2, [r3, #32]
#endif

  /* Messages-related fields.*/
#if CH_CFG_USE_MESSAGES == TRUE
  ch_queue_init(&tp->msgqueue);
  204f68:	9b01      	ldr	r3, [sp, #4]
  204f6a:	333c      	adds	r3, #60	; 0x3c
  204f6c:	4618      	mov	r0, r3
  204f6e:	f7ff fe97 	bl	204ca0 <ch_queue_init.lto_priv.1>
#endif

  /* Custom thread initialization code.*/
  CH_CFG_THREAD_INIT_HOOK(tp);

  return tp;
  204f72:	9b01      	ldr	r3, [sp, #4]
  204f74:	bf00      	nop
  204f76:	bf00      	nop
}
  204f78:	4618      	mov	r0, r3
  204f7a:	b003      	add	sp, #12
  204f7c:	f85d fb04 	ldr.w	pc, [sp], #4
  204f80:	080064d8 	.word	0x080064d8
  204f84:	20000958 	.word	0x20000958
	...

00204f90 <chThdSpawnSuspendedI>:
 * @return              Reference to the @p thread_t object.
 *
 * @api
 */
thread_t *chThdSpawnSuspendedI(thread_t *tp,
                               const thread_descriptor_t *tdp) {
  204f90:	b500      	push	{lr}
  204f92:	b083      	sub	sp, #12
  204f94:	9001      	str	r0, [sp, #4]
  204f96:	9100      	str	r1, [sp, #0]

  chDbgCheck(tp != NULL);
  204f98:	9b01      	ldr	r3, [sp, #4]
  204f9a:	2b00      	cmp	r3, #0
  204f9c:	bf0c      	ite	eq
  204f9e:	2301      	moveq	r3, #1
  204fa0:	2300      	movne	r3, #0
  204fa2:	b2db      	uxtb	r3, r3
  204fa4:	2b00      	cmp	r3, #0
  204fa6:	d002      	beq.n	204fae <chThdSpawnSuspendedI+0x1e>
  204fa8:	483f      	ldr	r0, [pc, #252]	; (2050a8 <chThdSpawnSuspendedI+0x118>)
  204faa:	f7fe fb49 	bl	203640 <chSysHalt>
  chDbgCheck(tdp != NULL);
  204fae:	9b00      	ldr	r3, [sp, #0]
  204fb0:	2b00      	cmp	r3, #0
  204fb2:	bf0c      	ite	eq
  204fb4:	2301      	moveq	r3, #1
  204fb6:	2300      	movne	r3, #0
  204fb8:	b2db      	uxtb	r3, r3
  204fba:	2b00      	cmp	r3, #0
  204fbc:	d002      	beq.n	204fc4 <chThdSpawnSuspendedI+0x34>
  204fbe:	483a      	ldr	r0, [pc, #232]	; (2050a8 <chThdSpawnSuspendedI+0x118>)
  204fc0:	f7fe fb3e 	bl	203640 <chSysHalt>

  /* Checks related to the working area geometry.*/
  chDbgCheck((tdp != NULL) &&
  204fc4:	9b00      	ldr	r3, [sp, #0]
  204fc6:	2b00      	cmp	r3, #0
  204fc8:	bf0c      	ite	eq
  204fca:	2301      	moveq	r3, #1
  204fcc:	2300      	movne	r3, #0
  204fce:	b2db      	uxtb	r3, r3
  204fd0:	2b00      	cmp	r3, #0
  204fd2:	d10a      	bne.n	204fea <chThdSpawnSuspendedI+0x5a>
  204fd4:	9b00      	ldr	r3, [sp, #0]
  204fd6:	685b      	ldr	r3, [r3, #4]
  204fd8:	f003 031f 	and.w	r3, r3, #31
  204fdc:	2b00      	cmp	r3, #0
  204fde:	bf14      	ite	ne
  204fe0:	2301      	movne	r3, #1
  204fe2:	2300      	moveq	r3, #0
  204fe4:	b2db      	uxtb	r3, r3
  204fe6:	2b00      	cmp	r3, #0
  204fe8:	d001      	beq.n	204fee <chThdSpawnSuspendedI+0x5e>
  204fea:	2301      	movs	r3, #1
  204fec:	e000      	b.n	204ff0 <chThdSpawnSuspendedI+0x60>
  204fee:	2300      	movs	r3, #0
  204ff0:	2b00      	cmp	r3, #0
  204ff2:	d10a      	bne.n	20500a <chThdSpawnSuspendedI+0x7a>
  204ff4:	9b00      	ldr	r3, [sp, #0]
  204ff6:	689b      	ldr	r3, [r3, #8]
  204ff8:	f003 031f 	and.w	r3, r3, #31
  204ffc:	2b00      	cmp	r3, #0
  204ffe:	bf14      	ite	ne
  205000:	2301      	movne	r3, #1
  205002:	2300      	moveq	r3, #0
  205004:	b2db      	uxtb	r3, r3
  205006:	2b00      	cmp	r3, #0
  205008:	d001      	beq.n	20500e <chThdSpawnSuspendedI+0x7e>
  20500a:	2301      	movs	r3, #1
  20500c:	e000      	b.n	205010 <chThdSpawnSuspendedI+0x80>
  20500e:	2300      	movs	r3, #0
  205010:	2b00      	cmp	r3, #0
  205012:	d10a      	bne.n	20502a <chThdSpawnSuspendedI+0x9a>
  205014:	9b00      	ldr	r3, [sp, #0]
  205016:	689a      	ldr	r2, [r3, #8]
  205018:	9b00      	ldr	r3, [sp, #0]
  20501a:	685b      	ldr	r3, [r3, #4]
  20501c:	429a      	cmp	r2, r3
  20501e:	bf94      	ite	ls
  205020:	2301      	movls	r3, #1
  205022:	2300      	movhi	r3, #0
  205024:	b2db      	uxtb	r3, r3
  205026:	2b00      	cmp	r3, #0
  205028:	d001      	beq.n	20502e <chThdSpawnSuspendedI+0x9e>
  20502a:	2301      	movs	r3, #1
  20502c:	e000      	b.n	205030 <chThdSpawnSuspendedI+0xa0>
  20502e:	2300      	movs	r3, #0
  205030:	2b00      	cmp	r3, #0
  205032:	d10c      	bne.n	20504e <chThdSpawnSuspendedI+0xbe>
  205034:	9b00      	ldr	r3, [sp, #0]
  205036:	689b      	ldr	r3, [r3, #8]
  205038:	461a      	mov	r2, r3
  20503a:	9b00      	ldr	r3, [sp, #0]
  20503c:	685b      	ldr	r3, [r3, #4]
  20503e:	1ad3      	subs	r3, r2, r3
  205040:	2bbf      	cmp	r3, #191	; 0xbf
  205042:	bf94      	ite	ls
  205044:	2301      	movls	r3, #1
  205046:	2300      	movhi	r3, #0
  205048:	b2db      	uxtb	r3, r3
  20504a:	2b00      	cmp	r3, #0
  20504c:	d002      	beq.n	205054 <chThdSpawnSuspendedI+0xc4>
  20504e:	4816      	ldr	r0, [pc, #88]	; (2050a8 <chThdSpawnSuspendedI+0x118>)
  205050:	f7fe faf6 	bl	203640 <chSysHalt>
             MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
             (tdp->wend > tdp->wbase) &&
             (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_STACK_SIZE(0)));

  /* Thread object initialization.*/
  tp = chThdObjectInit(tp, tdp);
  205054:	9900      	ldr	r1, [sp, #0]
  205056:	9801      	ldr	r0, [sp, #4]
  205058:	f7ff ff32 	bl	204ec0 <chThdObjectInit>
  20505c:	9001      	str	r0, [sp, #4]

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tp->wabase, tp->waend, tdp->funcp, tdp->arg);
  20505e:	9b01      	ldr	r3, [sp, #4]
  205060:	699b      	ldr	r3, [r3, #24]
  205062:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  205066:	9b01      	ldr	r3, [sp, #4]
  205068:	60da      	str	r2, [r3, #12]
  20506a:	9b00      	ldr	r3, [sp, #0]
  20506c:	691a      	ldr	r2, [r3, #16]
  20506e:	9b01      	ldr	r3, [sp, #4]
  205070:	68db      	ldr	r3, [r3, #12]
  205072:	601a      	str	r2, [r3, #0]
  205074:	9b00      	ldr	r3, [sp, #0]
  205076:	695a      	ldr	r2, [r3, #20]
  205078:	9b01      	ldr	r3, [sp, #4]
  20507a:	68db      	ldr	r3, [r3, #12]
  20507c:	605a      	str	r2, [r3, #4]
  20507e:	9b01      	ldr	r3, [sp, #4]
  205080:	68db      	ldr	r3, [r3, #12]
  205082:	4a0a      	ldr	r2, [pc, #40]	; (2050ac <chThdSpawnSuspendedI+0x11c>)
  205084:	621a      	str	r2, [r3, #32]

  /* Registry-related fields.*/
#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(tp->owner, tp);
  205086:	9b01      	ldr	r3, [sp, #4]
  205088:	691b      	ldr	r3, [r3, #16]
  20508a:	f103 0230 	add.w	r2, r3, #48	; 0x30
  20508e:	9b01      	ldr	r3, [sp, #4]
  205090:	3324      	adds	r3, #36	; 0x24
  205092:	4619      	mov	r1, r3
  205094:	4610      	mov	r0, r2
  205096:	f7ff fe23 	bl	204ce0 <ch_queue_insert.lto_priv.1>
#endif

  return tp;
  20509a:	9b01      	ldr	r3, [sp, #4]
  20509c:	bf00      	nop
  20509e:	bf00      	nop
}
  2050a0:	4618      	mov	r0, r3
  2050a2:	b003      	add	sp, #12
  2050a4:	f85d fb04 	ldr.w	pc, [sp], #4
  2050a8:	080064e8 	.word	0x080064e8
  2050ac:	002002f1 	.word	0x002002f1

002050b0 <chThdSpawnRunningI>:
 * @param[in] tdp       pointer to a @p thread_descriptor_t object
 * @return              Reference to the @p thread_t object.
 *
 * @iclass
 */
thread_t *chThdSpawnRunningI(thread_t *tp, const thread_descriptor_t *tdp) {
  2050b0:	b500      	push	{lr}
  2050b2:	b083      	sub	sp, #12
  2050b4:	9001      	str	r0, [sp, #4]
  2050b6:	9100      	str	r1, [sp, #0]

  return chSchReadyI(chThdSpawnSuspendedI(tp, tdp));
  2050b8:	9900      	ldr	r1, [sp, #0]
  2050ba:	9801      	ldr	r0, [sp, #4]
  2050bc:	f7ff ff68 	bl	204f90 <chThdSpawnSuspendedI>
  2050c0:	4603      	mov	r3, r0
  2050c2:	4618      	mov	r0, r3
  2050c4:	f7ff fb14 	bl	2046f0 <chSchReadyI>
  2050c8:	4603      	mov	r3, r0
}
  2050ca:	4618      	mov	r0, r3
  2050cc:	b003      	add	sp, #12
  2050ce:	f85d fb04 	ldr.w	pc, [sp], #4
  2050d2:	bf00      	nop
	...

002050e0 <chThdCreateStatic>:
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(stkline_t *wbase, size_t wsize,
                            tprio_t prio, tfunc_t func, void *arg) {
  2050e0:	b500      	push	{lr}
  2050e2:	b091      	sub	sp, #68	; 0x44
  2050e4:	9003      	str	r0, [sp, #12]
  2050e6:	9102      	str	r1, [sp, #8]
  2050e8:	9201      	str	r2, [sp, #4]
  2050ea:	9300      	str	r3, [sp, #0]
  thread_t *tp;
  uint8_t *wend, *stkbase, *stktop;

  /* Checks related to the working area size and position.*/
  chDbgCheck((wbase != NULL) &&
  2050ec:	9b03      	ldr	r3, [sp, #12]
  2050ee:	2b00      	cmp	r3, #0
  2050f0:	bf0c      	ite	eq
  2050f2:	2301      	moveq	r3, #1
  2050f4:	2300      	movne	r3, #0
  2050f6:	b2db      	uxtb	r3, r3
  2050f8:	2b00      	cmp	r3, #0
  2050fa:	d109      	bne.n	205110 <chThdCreateStatic+0x30>
  2050fc:	9b02      	ldr	r3, [sp, #8]
  2050fe:	f240 121f 	movw	r2, #287	; 0x11f
  205102:	4293      	cmp	r3, r2
  205104:	bf94      	ite	ls
  205106:	2301      	movls	r3, #1
  205108:	2300      	movhi	r3, #0
  20510a:	b2db      	uxtb	r3, r3
  20510c:	2b00      	cmp	r3, #0
  20510e:	d002      	beq.n	205116 <chThdCreateStatic+0x36>
  205110:	4842      	ldr	r0, [pc, #264]	; (20521c <chThdCreateStatic+0x13c>)
  205112:	f7fe fa95 	bl	203640 <chSysHalt>
             (wsize >= THD_WORKING_AREA_SIZE(0)));

  /* Other checks.*/
  chDbgCheck((prio <= HIGHPRIO) && (func != NULL));
  205116:	9b01      	ldr	r3, [sp, #4]
  205118:	2bff      	cmp	r3, #255	; 0xff
  20511a:	bf8c      	ite	hi
  20511c:	2301      	movhi	r3, #1
  20511e:	2300      	movls	r3, #0
  205120:	b2db      	uxtb	r3, r3
  205122:	2b00      	cmp	r3, #0
  205124:	d107      	bne.n	205136 <chThdCreateStatic+0x56>
  205126:	9b00      	ldr	r3, [sp, #0]
  205128:	2b00      	cmp	r3, #0
  20512a:	bf0c      	ite	eq
  20512c:	2301      	moveq	r3, #1
  20512e:	2300      	movne	r3, #0
  205130:	b2db      	uxtb	r3, r3
  205132:	2b00      	cmp	r3, #0
  205134:	d002      	beq.n	20513c <chThdCreateStatic+0x5c>
  205136:	4839      	ldr	r0, [pc, #228]	; (20521c <chThdCreateStatic+0x13c>)
  205138:	f7fe fa82 	bl	203640 <chSysHalt>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Special situation where the working area is already in use by an
     active thread.*/
  chDbgAssert(chRegFindThreadByWorkingArea(wbase) == NULL,
  20513c:	9803      	ldr	r0, [sp, #12]
  20513e:	f000 faaf 	bl	2056a0 <chRegFindThreadByWorkingArea>
  205142:	4603      	mov	r3, r0
  205144:	2b00      	cmp	r3, #0
  205146:	bf14      	ite	ne
  205148:	2301      	movne	r3, #1
  20514a:	2300      	moveq	r3, #0
  20514c:	b2db      	uxtb	r3, r3
  20514e:	2b00      	cmp	r3, #0
  205150:	d002      	beq.n	205158 <chThdCreateStatic+0x78>
  205152:	4832      	ldr	r0, [pc, #200]	; (20521c <chThdCreateStatic+0x13c>)
  205154:	f7fe fa74 	bl	203640 <chSysHalt>
              "working area in use");
#endif

  /* Working area end address.*/
  wend = (uint8_t *)wbase + wsize;
  205158:	9a03      	ldr	r2, [sp, #12]
  20515a:	9b02      	ldr	r3, [sp, #8]
  20515c:	4413      	add	r3, r2
  20515e:	930f      	str	r3, [sp, #60]	; 0x3c

  /* Stack area addresses.
     The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure must be aligned to the required
     stack alignment because it represents the stack top.*/
  stkbase = (uint8_t *)wbase;
  205160:	9b03      	ldr	r3, [sp, #12]
  205162:	930e      	str	r3, [sp, #56]	; 0x38
  stktop  = wend - MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN);
  205164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  205166:	3b60      	subs	r3, #96	; 0x60
  205168:	930d      	str	r3, [sp, #52]	; 0x34
  chDbgCheck(MEM_IS_ALIGNED(stkbase, PORT_WORKING_AREA_ALIGN) &&
  20516a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  20516c:	f003 031f 	and.w	r3, r3, #31
  205170:	2b00      	cmp	r3, #0
  205172:	bf14      	ite	ne
  205174:	2301      	movne	r3, #1
  205176:	2300      	moveq	r3, #0
  205178:	b2db      	uxtb	r3, r3
  20517a:	2b00      	cmp	r3, #0
  20517c:	d109      	bne.n	205192 <chThdCreateStatic+0xb2>
  20517e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  205180:	f003 031f 	and.w	r3, r3, #31
  205184:	2b00      	cmp	r3, #0
  205186:	bf14      	ite	ne
  205188:	2301      	movne	r3, #1
  20518a:	2300      	moveq	r3, #0
  20518c:	b2db      	uxtb	r3, r3
  20518e:	2b00      	cmp	r3, #0
  205190:	d002      	beq.n	205198 <chThdCreateStatic+0xb8>
  205192:	4822      	ldr	r0, [pc, #136]	; (20521c <chThdCreateStatic+0x13c>)
  205194:	f7fe fa54 	bl	203640 <chSysHalt>
             MEM_IS_ALIGNED(stktop, PORT_STACK_ALIGN));

#if CH_DBG_FILL_THREADS == TRUE
  /* Filling the thread stack area.*/
  __thd_stackfill(stkbase, stktop);
  205198:	990d      	ldr	r1, [sp, #52]	; 0x34
  20519a:	980e      	ldr	r0, [sp, #56]	; 0x38
  20519c:	f7ff fe78 	bl	204e90 <__thd_stackfill>
#endif

  /* Initializing the thread_t structure using the passed parameters.*/
  THD_DESC_DECL(desc, "noname", wbase, wend, prio, func, arg, currcore, NULL);
  2051a0:	4b1f      	ldr	r3, [pc, #124]	; (205220 <chThdCreateStatic+0x140>)
  2051a2:	9305      	str	r3, [sp, #20]
  2051a4:	9b03      	ldr	r3, [sp, #12]
  2051a6:	9306      	str	r3, [sp, #24]
  2051a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  2051aa:	9307      	str	r3, [sp, #28]
  2051ac:	9b01      	ldr	r3, [sp, #4]
  2051ae:	9308      	str	r3, [sp, #32]
  2051b0:	9b00      	ldr	r3, [sp, #0]
  2051b2:	9309      	str	r3, [sp, #36]	; 0x24
  2051b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
  2051b6:	930a      	str	r3, [sp, #40]	; 0x28
  2051b8:	4b1a      	ldr	r3, [pc, #104]	; (205224 <chThdCreateStatic+0x144>)
  2051ba:	930b      	str	r3, [sp, #44]	; 0x2c
  tp = chThdObjectInit(threadref(stktop), &desc);
  2051bc:	ab05      	add	r3, sp, #20
  2051be:	4619      	mov	r1, r3
  2051c0:	980d      	ldr	r0, [sp, #52]	; 0x34
  2051c2:	f7ff fe7d 	bl	204ec0 <chThdObjectInit>
  2051c6:	900c      	str	r0, [sp, #48]	; 0x30

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wbase, tp, func, arg);
  2051c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051ca:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
  2051ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051d0:	60da      	str	r2, [r3, #12]
  2051d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051d4:	68db      	ldr	r3, [r3, #12]
  2051d6:	9a00      	ldr	r2, [sp, #0]
  2051d8:	601a      	str	r2, [r3, #0]
  2051da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051dc:	68db      	ldr	r3, [r3, #12]
  2051de:	9a12      	ldr	r2, [sp, #72]	; 0x48
  2051e0:	605a      	str	r2, [r3, #4]
  2051e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051e4:	68db      	ldr	r3, [r3, #12]
  2051e6:	4a10      	ldr	r2, [pc, #64]	; (205228 <chThdCreateStatic+0x148>)
  2051e8:	621a      	str	r2, [r3, #32]

  chSysLock();
  2051ea:	f7ff fdb9 	bl	204d60 <chSysLock.lto_priv.8>

#if CH_CFG_USE_REGISTRY == TRUE
  REG_INSERT(tp->owner, tp);
  2051ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051f0:	691b      	ldr	r3, [r3, #16]
  2051f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
  2051f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  2051f8:	3324      	adds	r3, #36	; 0x24
  2051fa:	4619      	mov	r1, r3
  2051fc:	4610      	mov	r0, r2
  2051fe:	f7ff fd6f 	bl	204ce0 <ch_queue_insert.lto_priv.1>
#endif

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
  205202:	2100      	movs	r1, #0
  205204:	980c      	ldr	r0, [sp, #48]	; 0x30
  205206:	f7ff fb23 	bl	204850 <chSchWakeupS>
  chSysUnlock();
  20520a:	f7ff fdc1 	bl	204d90 <chSysUnlock.lto_priv.8>

  return tp;
  20520e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  205210:	bf00      	nop
}
  205212:	4618      	mov	r0, r3
  205214:	b011      	add	sp, #68	; 0x44
  205216:	f85d fb04 	ldr.w	pc, [sp], #4
  20521a:	bf00      	nop
  20521c:	0800650c 	.word	0x0800650c
  205220:	080064d0 	.word	0x080064d0
  205224:	20000958 	.word	0x20000958
  205228:	002002f1 	.word	0x002002f1
  20522c:	00000000 	.word	0x00000000

00205230 <chThdRelease>:
 *
 * @param[in] tp        pointer to the thread
 *
 * @api
 */
void chThdRelease(thread_t *tp) {
  205230:	b500      	push	{lr}
  205232:	b083      	sub	sp, #12
  205234:	9001      	str	r0, [sp, #4]

  chSysLock();
  205236:	f7ff fd93 	bl	204d60 <chSysLock.lto_priv.8>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
  20523a:	9b01      	ldr	r3, [sp, #4]
  20523c:	7f9b      	ldrb	r3, [r3, #30]
  20523e:	2b00      	cmp	r3, #0
  205240:	bf0c      	ite	eq
  205242:	2301      	moveq	r3, #1
  205244:	2300      	movne	r3, #0
  205246:	b2db      	uxtb	r3, r3
  205248:	2b00      	cmp	r3, #0
  20524a:	d002      	beq.n	205252 <chThdRelease+0x22>
  20524c:	4813      	ldr	r0, [pc, #76]	; (20529c <chThdRelease+0x6c>)
  20524e:	f7fe f9f7 	bl	203640 <chSysHalt>
  tp->refs--;
  205252:	9b01      	ldr	r3, [sp, #4]
  205254:	7f9b      	ldrb	r3, [r3, #30]
  205256:	3b01      	subs	r3, #1
  205258:	b2da      	uxtb	r2, r3
  20525a:	9b01      	ldr	r3, [sp, #4]
  20525c:	779a      	strb	r2, [r3, #30]

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
  20525e:	9b01      	ldr	r3, [sp, #4]
  205260:	7f9b      	ldrb	r3, [r3, #30]
  205262:	2b00      	cmp	r3, #0
  205264:	d113      	bne.n	20528e <chThdRelease+0x5e>
  205266:	9b01      	ldr	r3, [sp, #4]
  205268:	7f1b      	ldrb	r3, [r3, #28]
  20526a:	2b0f      	cmp	r3, #15
  20526c:	d10f      	bne.n	20528e <chThdRelease+0x5e>

    /* Removing from registry.*/
    REG_REMOVE(tp);
  20526e:	9b01      	ldr	r3, [sp, #4]
  205270:	3324      	adds	r3, #36	; 0x24
  205272:	4618      	mov	r0, r3
  205274:	f7ff fd64 	bl	204d40 <ch_queue_dequeue.lto_priv.1>
    chSysUnlock();
  205278:	f7ff fd8a 	bl	204d90 <chSysUnlock.lto_priv.8>

#if (CH_CFG_USE_DYNAMIC == TRUE) || defined(__DOXYGEN__)
    /* Calling thread dispose function, if any.*/
    if (tp->dispose != NULL) {
  20527c:	9b01      	ldr	r3, [sp, #4]
  20527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  205280:	2b00      	cmp	r3, #0
  205282:	d007      	beq.n	205294 <chThdRelease+0x64>
      tp->dispose(tp);
  205284:	9b01      	ldr	r3, [sp, #4]
  205286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  205288:	9801      	ldr	r0, [sp, #4]
  20528a:	4798      	blx	r3
    }
#endif

    return;
  20528c:	e002      	b.n	205294 <chThdRelease+0x64>
  }
  chSysUnlock();
  20528e:	f7ff fd7f 	bl	204d90 <chSysUnlock.lto_priv.8>
  205292:	e000      	b.n	205296 <chThdRelease+0x66>
    return;
  205294:	bf00      	nop
}
  205296:	b003      	add	sp, #12
  205298:	f85d fb04 	ldr.w	pc, [sp], #4
  20529c:	08006520 	.word	0x08006520

002052a0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
  2052a0:	b500      	push	{lr}
  2052a2:	b083      	sub	sp, #12
  2052a4:	9001      	str	r0, [sp, #4]

  chSysLock();
  2052a6:	f7ff fd5b 	bl	204d60 <chSysLock.lto_priv.8>
  chThdExitS(msg);
  2052aa:	9801      	ldr	r0, [sp, #4]
  2052ac:	f000 f808 	bl	2052c0 <chThdExitS>
  /* The thread never returns here.*/
}
  2052b0:	bf00      	nop
  2052b2:	b003      	add	sp, #12
  2052b4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002052c0 <chThdExitS>:
 *
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  2052c0:	b500      	push	{lr}
  2052c2:	b085      	sub	sp, #20
  2052c4:	9001      	str	r0, [sp, #4]
  thread_t *currtp = chThdGetSelfX();
  2052c6:	f7ff fd93 	bl	204df0 <chThdGetSelfX.lto_priv.0>
  2052ca:	9003      	str	r0, [sp, #12]

  /* Storing exit message.*/
  currtp->u.exitcode = msg;
  2052cc:	9b03      	ldr	r3, [sp, #12]
  2052ce:	9a01      	ldr	r2, [sp, #4]
  2052d0:	635a      	str	r2, [r3, #52]	; 0x34
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(currtp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
  2052d2:	e008      	b.n	2052e6 <chThdExitS+0x26>
    (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
  2052d4:	9b03      	ldr	r3, [sp, #12]
  2052d6:	3338      	adds	r3, #56	; 0x38
  2052d8:	4618      	mov	r0, r3
  2052da:	f7ff fcd1 	bl	204c80 <ch_list_unlink>
  2052de:	4603      	mov	r3, r0
  2052e0:	4618      	mov	r0, r3
  2052e2:	f7ff fa05 	bl	2046f0 <chSchReadyI>
  while (unlikely(ch_list_notempty(&currtp->waiting))) {
  2052e6:	9b03      	ldr	r3, [sp, #12]
  2052e8:	3338      	adds	r3, #56	; 0x38
  2052ea:	4618      	mov	r0, r3
  2052ec:	f7ff fcb8 	bl	204c60 <ch_list_notempty>
  2052f0:	4603      	mov	r3, r0
  2052f2:	2b00      	cmp	r3, #0
  2052f4:	d1ee      	bne.n	2052d4 <chThdExitS+0x14>
  }
#endif

#if CH_CFG_USE_REGISTRY == TRUE
  if (unlikely(currtp->refs == (trefs_t)0)) {
  2052f6:	9b03      	ldr	r3, [sp, #12]
  2052f8:	7f9b      	ldrb	r3, [r3, #30]
  2052fa:	2b00      	cmp	r3, #0
  2052fc:	bf0c      	ite	eq
  2052fe:	2301      	moveq	r3, #1
  205300:	2300      	movne	r3, #0
  205302:	b2db      	uxtb	r3, r3
  205304:	2b00      	cmp	r3, #0
  205306:	d008      	beq.n	20531a <chThdExitS+0x5a>
#if CH_CFG_USE_DYNAMIC == TRUE
    /* Threads without a dispose callback are immediately removed from the
       registry because there is no memory to be recovered.*/
    if (currtp->dispose == NULL) {
  205308:	9b03      	ldr	r3, [sp, #12]
  20530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  20530c:	2b00      	cmp	r3, #0
  20530e:	d104      	bne.n	20531a <chThdExitS+0x5a>
      REG_REMOVE(currtp);
  205310:	9b03      	ldr	r3, [sp, #12]
  205312:	3324      	adds	r3, #36	; 0x24
  205314:	4618      	mov	r0, r3
  205316:	f7ff fd13 	bl	204d40 <ch_queue_dequeue.lto_priv.1>
#endif
  }
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
  20531a:	200f      	movs	r0, #15
  20531c:	f7ff fa08 	bl	204730 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
  205320:	4803      	ldr	r0, [pc, #12]	; (205330 <chThdExitS+0x70>)
  205322:	f7fe f98d 	bl	203640 <chSysHalt>
}
  205326:	bf00      	nop
  205328:	b005      	add	sp, #20
  20532a:	f85d fb04 	ldr.w	pc, [sp], #4
  20532e:	bf00      	nop
  205330:	08006530 	.word	0x08006530
	...

00205340 <chThdSleep>:
 *                        state.
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
  205340:	b500      	push	{lr}
  205342:	b083      	sub	sp, #12
  205344:	9001      	str	r0, [sp, #4]

  chSysLock();
  205346:	f7ff fd0b 	bl	204d60 <chSysLock.lto_priv.8>
  chThdSleepS(time);
  20534a:	9801      	ldr	r0, [sp, #4]
  20534c:	f7ff fd58 	bl	204e00 <chThdSleepS>
  chSysUnlock();
  205350:	f7ff fd1e 	bl	204d90 <chSysUnlock.lto_priv.8>
}
  205354:	bf00      	nop
  205356:	b003      	add	sp, #12
  205358:	f85d fb04 	ldr.w	pc, [sp], #4
  20535c:	0000      	movs	r0, r0
	...

00205360 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
  205360:	b500      	push	{lr}
  205362:	b085      	sub	sp, #20
  205364:	9001      	str	r0, [sp, #4]
  205366:	9100      	str	r1, [sp, #0]

  if (*trp != NULL) {
  205368:	9b01      	ldr	r3, [sp, #4]
  20536a:	681b      	ldr	r3, [r3, #0]
  20536c:	2b00      	cmp	r3, #0
  20536e:	d017      	beq.n	2053a0 <chThdResumeI+0x40>
    thread_t *tp = *trp;
  205370:	9b01      	ldr	r3, [sp, #4]
  205372:	681b      	ldr	r3, [r3, #0]
  205374:	9303      	str	r3, [sp, #12]

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
  205376:	9b03      	ldr	r3, [sp, #12]
  205378:	7f1b      	ldrb	r3, [r3, #28]
  20537a:	2b03      	cmp	r3, #3
  20537c:	bf14      	ite	ne
  20537e:	2301      	movne	r3, #1
  205380:	2300      	moveq	r3, #0
  205382:	b2db      	uxtb	r3, r3
  205384:	2b00      	cmp	r3, #0
  205386:	d002      	beq.n	20538e <chThdResumeI+0x2e>
  205388:	4807      	ldr	r0, [pc, #28]	; (2053a8 <chThdResumeI+0x48>)
  20538a:	f7fe f959 	bl	203640 <chSysHalt>

    *trp = NULL;
  20538e:	9b01      	ldr	r3, [sp, #4]
  205390:	2200      	movs	r2, #0
  205392:	601a      	str	r2, [r3, #0]
    tp->u.rdymsg = msg;
  205394:	9b03      	ldr	r3, [sp, #12]
  205396:	9a00      	ldr	r2, [sp, #0]
  205398:	635a      	str	r2, [r3, #52]	; 0x34
    (void) chSchReadyI(tp);
  20539a:	9803      	ldr	r0, [sp, #12]
  20539c:	f7ff f9a8 	bl	2046f0 <chSchReadyI>
  }
}
  2053a0:	bf00      	nop
  2053a2:	b005      	add	sp, #20
  2053a4:	f85d fb04 	ldr.w	pc, [sp], #4
  2053a8:	08006548 	.word	0x08006548
  2053ac:	00000000 	.word	0x00000000

002053b0 <chThdQueueObjectInit>:
 *
 * @param[out] tqp      pointer to a @p threads_queue_t object
 *
 * @init
 */
void chThdQueueObjectInit(threads_queue_t *tqp) {
  2053b0:	b500      	push	{lr}
  2053b2:	b083      	sub	sp, #12
  2053b4:	9001      	str	r0, [sp, #4]

  chDbgCheck(tqp);
  2053b6:	9b01      	ldr	r3, [sp, #4]
  2053b8:	2b00      	cmp	r3, #0
  2053ba:	bf0c      	ite	eq
  2053bc:	2301      	moveq	r3, #1
  2053be:	2300      	movne	r3, #0
  2053c0:	b2db      	uxtb	r3, r3
  2053c2:	2b00      	cmp	r3, #0
  2053c4:	d002      	beq.n	2053cc <chThdQueueObjectInit+0x1c>
  2053c6:	4805      	ldr	r0, [pc, #20]	; (2053dc <chThdQueueObjectInit+0x2c>)
  2053c8:	f7fe f93a 	bl	203640 <chSysHalt>

  ch_queue_init(&tqp->queue);
  2053cc:	9b01      	ldr	r3, [sp, #4]
  2053ce:	4618      	mov	r0, r3
  2053d0:	f7ff fc66 	bl	204ca0 <ch_queue_init.lto_priv.1>
}
  2053d4:	bf00      	nop
  2053d6:	b003      	add	sp, #12
  2053d8:	f85d fb04 	ldr.w	pc, [sp], #4
  2053dc:	08006558 	.word	0x08006558

002053e0 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
  2053e0:	b500      	push	{lr}
  2053e2:	b085      	sub	sp, #20
  2053e4:	9001      	str	r0, [sp, #4]
  2053e6:	9100      	str	r1, [sp, #0]
  thread_t *currtp = chThdGetSelfX();
  2053e8:	f7ff fd02 	bl	204df0 <chThdGetSelfX.lto_priv.0>
  2053ec:	9003      	str	r0, [sp, #12]

  if (unlikely(TIME_IMMEDIATE == timeout)) {
  2053ee:	9b00      	ldr	r3, [sp, #0]
  2053f0:	2b00      	cmp	r3, #0
  2053f2:	bf0c      	ite	eq
  2053f4:	2301      	moveq	r3, #1
  2053f6:	2300      	movne	r3, #0
  2053f8:	b2db      	uxtb	r3, r3
  2053fa:	2b00      	cmp	r3, #0
  2053fc:	d002      	beq.n	205404 <chThdEnqueueTimeoutS+0x24>
    return MSG_TIMEOUT;
  2053fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  205402:	e009      	b.n	205418 <chThdEnqueueTimeoutS+0x38>
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
  205404:	9b01      	ldr	r3, [sp, #4]
  205406:	9903      	ldr	r1, [sp, #12]
  205408:	4618      	mov	r0, r3
  20540a:	f7ff fc69 	bl	204ce0 <ch_queue_insert.lto_priv.1>

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
  20540e:	9900      	ldr	r1, [sp, #0]
  205410:	2004      	movs	r0, #4
  205412:	f7ff f9e5 	bl	2047e0 <chSchGoSleepTimeoutS>
  205416:	4603      	mov	r3, r0
}
  205418:	4618      	mov	r0, r3
  20541a:	b005      	add	sp, #20
  20541c:	f85d fb04 	ldr.w	pc, [sp], #4

00205420 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
  205420:	b500      	push	{lr}
  205422:	b083      	sub	sp, #12
  205424:	9001      	str	r0, [sp, #4]
  205426:	9100      	str	r1, [sp, #0]

  if (ch_queue_notempty(&tqp->queue)) {
  205428:	9b01      	ldr	r3, [sp, #4]
  20542a:	4618      	mov	r0, r3
  20542c:	f7ff fc48 	bl	204cc0 <ch_queue_notempty.lto_priv.0>
  205430:	4603      	mov	r3, r0
  205432:	2b00      	cmp	r3, #0
  205434:	d003      	beq.n	20543e <chThdDequeueNextI+0x1e>
    chThdDoDequeueNextI(tqp, msg);
  205436:	9900      	ldr	r1, [sp, #0]
  205438:	9801      	ldr	r0, [sp, #4]
  20543a:	f7ff fcf9 	bl	204e30 <chThdDoDequeueNextI>
  }
}
  20543e:	bf00      	nop
  205440:	b003      	add	sp, #12
  205442:	f85d fb04 	ldr.w	pc, [sp], #4
  205446:	bf00      	nop
	...

00205450 <tm_stop>:
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {
  205450:	b4f0      	push	{r4, r5, r6, r7}
  205452:	b084      	sub	sp, #16
  205454:	9003      	str	r0, [sp, #12]
  205456:	9102      	str	r1, [sp, #8]
  205458:	9201      	str	r2, [sp, #4]

  tmp->n++;
  20545a:	9b03      	ldr	r3, [sp, #12]
  20545c:	68db      	ldr	r3, [r3, #12]
  20545e:	1c5a      	adds	r2, r3, #1
  205460:	9b03      	ldr	r3, [sp, #12]
  205462:	60da      	str	r2, [r3, #12]
  tmp->last = (now - tmp->last) - offset;
  205464:	9b03      	ldr	r3, [sp, #12]
  205466:	689b      	ldr	r3, [r3, #8]
  205468:	9a02      	ldr	r2, [sp, #8]
  20546a:	1ad2      	subs	r2, r2, r3
  20546c:	9b01      	ldr	r3, [sp, #4]
  20546e:	1ad2      	subs	r2, r2, r3
  205470:	9b03      	ldr	r3, [sp, #12]
  205472:	609a      	str	r2, [r3, #8]
  tmp->cumulative += (rttime_t)tmp->last;
  205474:	9b03      	ldr	r3, [sp, #12]
  205476:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
  20547a:	9903      	ldr	r1, [sp, #12]
  20547c:	6889      	ldr	r1, [r1, #8]
  20547e:	2000      	movs	r0, #0
  205480:	460c      	mov	r4, r1
  205482:	4605      	mov	r5, r0
  205484:	1916      	adds	r6, r2, r4
  205486:	eb43 0705 	adc.w	r7, r3, r5
  20548a:	9b03      	ldr	r3, [sp, #12]
  20548c:	e9c3 6704 	strd	r6, r7, [r3, #16]
  if (tmp->last > tmp->worst) {
  205490:	9b03      	ldr	r3, [sp, #12]
  205492:	689a      	ldr	r2, [r3, #8]
  205494:	9b03      	ldr	r3, [sp, #12]
  205496:	685b      	ldr	r3, [r3, #4]
  205498:	429a      	cmp	r2, r3
  20549a:	d903      	bls.n	2054a4 <tm_stop+0x54>
    tmp->worst = tmp->last;
  20549c:	9b03      	ldr	r3, [sp, #12]
  20549e:	689a      	ldr	r2, [r3, #8]
  2054a0:	9b03      	ldr	r3, [sp, #12]
  2054a2:	605a      	str	r2, [r3, #4]
  }
  if (tmp->last < tmp->best) {
  2054a4:	9b03      	ldr	r3, [sp, #12]
  2054a6:	689a      	ldr	r2, [r3, #8]
  2054a8:	9b03      	ldr	r3, [sp, #12]
  2054aa:	681b      	ldr	r3, [r3, #0]
  2054ac:	429a      	cmp	r2, r3
  2054ae:	d203      	bcs.n	2054b8 <tm_stop+0x68>
    tmp->best = tmp->last;
  2054b0:	9b03      	ldr	r3, [sp, #12]
  2054b2:	689a      	ldr	r2, [r3, #8]
  2054b4:	9b03      	ldr	r3, [sp, #12]
  2054b6:	601a      	str	r2, [r3, #0]
  }
}
  2054b8:	bf00      	nop
  2054ba:	b004      	add	sp, #16
  2054bc:	bcf0      	pop	{r4, r5, r6, r7}
  2054be:	4770      	bx	lr

002054c0 <chTMObjectInit>:
 *
 * @param[out] tmp      pointer to a @p time_measurement_t object
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {
  2054c0:	b082      	sub	sp, #8
  2054c2:	9001      	str	r0, [sp, #4]

  tmp->best       = (rtcnt_t)-1;
  2054c4:	9b01      	ldr	r3, [sp, #4]
  2054c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  2054ca:	601a      	str	r2, [r3, #0]
  tmp->worst      = (rtcnt_t)0;
  2054cc:	9b01      	ldr	r3, [sp, #4]
  2054ce:	2200      	movs	r2, #0
  2054d0:	605a      	str	r2, [r3, #4]
  tmp->last       = (rtcnt_t)0;
  2054d2:	9b01      	ldr	r3, [sp, #4]
  2054d4:	2200      	movs	r2, #0
  2054d6:	609a      	str	r2, [r3, #8]
  tmp->n          = (ucnt_t)0;
  2054d8:	9b01      	ldr	r3, [sp, #4]
  2054da:	2200      	movs	r2, #0
  2054dc:	60da      	str	r2, [r3, #12]
  tmp->cumulative = (rttime_t)0;
  2054de:	9901      	ldr	r1, [sp, #4]
  2054e0:	f04f 0200 	mov.w	r2, #0
  2054e4:	f04f 0300 	mov.w	r3, #0
  2054e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
  2054ec:	bf00      	nop
  2054ee:	b002      	add	sp, #8
  2054f0:	4770      	bx	lr
  2054f2:	bf00      	nop
	...

00205500 <chTMStartMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t object
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {
  205500:	b082      	sub	sp, #8
  205502:	9001      	str	r0, [sp, #4]
  return DWT->CYCCNT;
  205504:	4b03      	ldr	r3, [pc, #12]	; (205514 <chTMStartMeasurementX+0x14>)
  205506:	685a      	ldr	r2, [r3, #4]

  tmp->last = chSysGetRealtimeCounterX();
  205508:	9b01      	ldr	r3, [sp, #4]
  20550a:	609a      	str	r2, [r3, #8]
}
  20550c:	bf00      	nop
  20550e:	b002      	add	sp, #8
  205510:	4770      	bx	lr
  205512:	bf00      	nop
  205514:	e0001000 	.word	0xe0001000
	...

00205520 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t object
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
  205520:	b500      	push	{lr}
  205522:	b083      	sub	sp, #12
  205524:	9001      	str	r0, [sp, #4]
  205526:	4b06      	ldr	r3, [pc, #24]	; (205540 <chTMStopMeasurementX+0x20>)
  205528:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch_system.tmc.offset);
  20552a:	4a06      	ldr	r2, [pc, #24]	; (205544 <chTMStopMeasurementX+0x24>)
  20552c:	6892      	ldr	r2, [r2, #8]
  20552e:	4619      	mov	r1, r3
  205530:	9801      	ldr	r0, [sp, #4]
  205532:	f7ff ff8d 	bl	205450 <tm_stop>
}
  205536:	bf00      	nop
  205538:	b003      	add	sp, #12
  20553a:	f85d fb04 	ldr.w	pc, [sp], #4
  20553e:	bf00      	nop
  205540:	e0001000 	.word	0xe0001000
  205544:	20000948 	.word	0x20000948
	...

00205550 <chSysLock.lto_priv.9>:
static inline void chSysLock(void) {
  205550:	b500      	push	{lr}
  205552:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  205554:	b672      	cpsid	i
}
  205556:	bf00      	nop
  205558:	2330      	movs	r3, #48	; 0x30
  20555a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20555c:	9b01      	ldr	r3, [sp, #4]
  20555e:	f383 8811 	msr	BASEPRI, r3
}
  205562:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  205564:	b662      	cpsie	i
}
  205566:	bf00      	nop
}
  205568:	bf00      	nop
  __dbg_check_lock();
  20556a:	f7fe f8b9 	bl	2036e0 <__dbg_check_lock>
}
  20556e:	bf00      	nop
  205570:	b003      	add	sp, #12
  205572:	f85d fb04 	ldr.w	pc, [sp], #4
  205576:	bf00      	nop
	...

00205580 <chSysUnlock.lto_priv.9>:
static inline void chSysUnlock(void) {
  205580:	b500      	push	{lr}
  205582:	b083      	sub	sp, #12
  __dbg_check_unlock();
  205584:	f7fe f8d4 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  205588:	4b12      	ldr	r3, [pc, #72]	; (2055d4 <chSysUnlock.lto_priv.9+0x54>)
  20558a:	681b      	ldr	r3, [r3, #0]
  20558c:	4a11      	ldr	r2, [pc, #68]	; (2055d4 <chSysUnlock.lto_priv.9+0x54>)
  20558e:	4293      	cmp	r3, r2
  205590:	bf14      	ite	ne
  205592:	2301      	movne	r3, #1
  205594:	2300      	moveq	r3, #0
  205596:	b2db      	uxtb	r3, r3
  205598:	2b00      	cmp	r3, #0
  20559a:	d00f      	beq.n	2055bc <chSysUnlock.lto_priv.9+0x3c>
  20559c:	4b0d      	ldr	r3, [pc, #52]	; (2055d4 <chSysUnlock.lto_priv.9+0x54>)
  20559e:	68db      	ldr	r3, [r3, #12]
  2055a0:	689a      	ldr	r2, [r3, #8]
  2055a2:	4b0c      	ldr	r3, [pc, #48]	; (2055d4 <chSysUnlock.lto_priv.9+0x54>)
  2055a4:	681b      	ldr	r3, [r3, #0]
  2055a6:	689b      	ldr	r3, [r3, #8]
  2055a8:	429a      	cmp	r2, r3
  2055aa:	bf34      	ite	cc
  2055ac:	2301      	movcc	r3, #1
  2055ae:	2300      	movcs	r3, #0
  2055b0:	b2db      	uxtb	r3, r3
  2055b2:	2b00      	cmp	r3, #0
  2055b4:	d002      	beq.n	2055bc <chSysUnlock.lto_priv.9+0x3c>
  2055b6:	4808      	ldr	r0, [pc, #32]	; (2055d8 <chSysUnlock.lto_priv.9+0x58>)
  2055b8:	f7fe f842 	bl	203640 <chSysHalt>
  2055bc:	2300      	movs	r3, #0
  2055be:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2055c0:	9b01      	ldr	r3, [sp, #4]
  2055c2:	f383 8811 	msr	BASEPRI, r3
}
  2055c6:	bf00      	nop
}
  2055c8:	bf00      	nop
}
  2055ca:	bf00      	nop
  2055cc:	b003      	add	sp, #12
  2055ce:	f85d fb04 	ldr.w	pc, [sp], #4
  2055d2:	bf00      	nop
  2055d4:	20000958 	.word	0x20000958
  2055d8:	08006584 	.word	0x08006584
  2055dc:	00000000 	.word	0x00000000

002055e0 <chThdGetWorkingAreaX>:
static inline stkline_t *chThdGetWorkingAreaX(thread_t *tp) {
  2055e0:	b082      	sub	sp, #8
  2055e2:	9001      	str	r0, [sp, #4]
  return tp->wabase;
  2055e4:	9b01      	ldr	r3, [sp, #4]
  2055e6:	695b      	ldr	r3, [r3, #20]
}
  2055e8:	4618      	mov	r0, r3
  2055ea:	b002      	add	sp, #8
  2055ec:	4770      	bx	lr
  2055ee:	bf00      	nop

002055f0 <chRegFirstThread>:
 *
 * @return              A reference to the most ancient thread.
 *
 * @api
 */
thread_t *chRegFirstThread(void) {
  2055f0:	b500      	push	{lr}
  2055f2:	b083      	sub	sp, #12
  thread_t *tp;
  uint8_t *p;

  chSysLock();
  2055f4:	f7ff ffac 	bl	205550 <chSysLock.lto_priv.9>
  p = (uint8_t *)REG_HEADER(currcore)->next;
  2055f8:	4b09      	ldr	r3, [pc, #36]	; (205620 <chRegFirstThread+0x30>)
  2055fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  2055fc:	9301      	str	r3, [sp, #4]
  /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
  tp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  2055fe:	9b01      	ldr	r3, [sp, #4]
  205600:	3b24      	subs	r3, #36	; 0x24
  205602:	9300      	str	r3, [sp, #0]
  /*lint -restore*/
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
  205604:	9b00      	ldr	r3, [sp, #0]
  205606:	7f9b      	ldrb	r3, [r3, #30]
  205608:	3301      	adds	r3, #1
  20560a:	b2da      	uxtb	r2, r3
  20560c:	9b00      	ldr	r3, [sp, #0]
  20560e:	779a      	strb	r2, [r3, #30]
#endif
  chSysUnlock();
  205610:	f7ff ffb6 	bl	205580 <chSysUnlock.lto_priv.9>

  return tp;
  205614:	9b00      	ldr	r3, [sp, #0]
}
  205616:	4618      	mov	r0, r3
  205618:	b003      	add	sp, #12
  20561a:	f85d fb04 	ldr.w	pc, [sp], #4
  20561e:	bf00      	nop
  205620:	20000958 	.word	0x20000958
	...

00205630 <chRegNextThread>:
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
  205630:	b500      	push	{lr}
  205632:	b087      	sub	sp, #28
  205634:	9001      	str	r0, [sp, #4]
  thread_t *ntp;
  ch_queue_t *nqp;

  chSysLock();
  205636:	f7ff ff8b 	bl	205550 <chSysLock.lto_priv.9>

  /* Next element in the registry queue.*/
  nqp = tp->rqueue.next;
  20563a:	9b01      	ldr	r3, [sp, #4]
  20563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  20563e:	9304      	str	r3, [sp, #16]
  if (nqp == REG_HEADER(currcore)) {
  205640:	9b04      	ldr	r3, [sp, #16]
  205642:	4a14      	ldr	r2, [pc, #80]	; (205694 <chRegNextThread+0x64>)
  205644:	4293      	cmp	r3, r2
  205646:	d102      	bne.n	20564e <chRegNextThread+0x1e>
    ntp = NULL;
  205648:	2300      	movs	r3, #0
  20564a:	9305      	str	r3, [sp, #20]
  20564c:	e016      	b.n	20567c <chRegNextThread+0x4c>
  }
  else {
    uint8_t *p = (uint8_t *)nqp;
  20564e:	9b04      	ldr	r3, [sp, #16]
  205650:	9303      	str	r3, [sp, #12]
    /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
    ntp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  205652:	9b03      	ldr	r3, [sp, #12]
  205654:	3b24      	subs	r3, #36	; 0x24
  205656:	9305      	str	r3, [sp, #20]
    /*lint -restore*/

#if CH_CFG_USE_DYNAMIC == TRUE
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
  205658:	9b05      	ldr	r3, [sp, #20]
  20565a:	7f9b      	ldrb	r3, [r3, #30]
  20565c:	2bff      	cmp	r3, #255	; 0xff
  20565e:	bf0c      	ite	eq
  205660:	2301      	moveq	r3, #1
  205662:	2300      	movne	r3, #0
  205664:	b2db      	uxtb	r3, r3
  205666:	2b00      	cmp	r3, #0
  205668:	d002      	beq.n	205670 <chRegNextThread+0x40>
  20566a:	480b      	ldr	r0, [pc, #44]	; (205698 <chRegNextThread+0x68>)
  20566c:	f7fd ffe8 	bl	203640 <chSysHalt>

    ntp->refs++;
  205670:	9b05      	ldr	r3, [sp, #20]
  205672:	7f9b      	ldrb	r3, [r3, #30]
  205674:	3301      	adds	r3, #1
  205676:	b2da      	uxtb	r2, r3
  205678:	9b05      	ldr	r3, [sp, #20]
  20567a:	779a      	strb	r2, [r3, #30]
#endif
  }
  chSysUnlock();
  20567c:	f7ff ff80 	bl	205580 <chSysUnlock.lto_priv.9>
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
  205680:	9801      	ldr	r0, [sp, #4]
  205682:	f7ff fdd5 	bl	205230 <chThdRelease>
#endif

  return ntp;
  205686:	9b05      	ldr	r3, [sp, #20]
  205688:	bf00      	nop
  20568a:	bf00      	nop
}
  20568c:	4618      	mov	r0, r3
  20568e:	b007      	add	sp, #28
  205690:	f85d fb04 	ldr.w	pc, [sp], #4
  205694:	20000988 	.word	0x20000988
  205698:	08006590 	.word	0x08006590
  20569c:	00000000 	.word	0x00000000

002056a0 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkline_t *wa) {
  2056a0:	b500      	push	{lr}
  2056a2:	b085      	sub	sp, #20
  2056a4:	9001      	str	r0, [sp, #4]
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  2056a6:	f7ff ffa3 	bl	2055f0 <chRegFirstThread>
  2056aa:	9003      	str	r0, [sp, #12]
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
  2056ac:	9803      	ldr	r0, [sp, #12]
  2056ae:	f7ff ff97 	bl	2055e0 <chThdGetWorkingAreaX>
  2056b2:	4602      	mov	r2, r0
  2056b4:	9b01      	ldr	r3, [sp, #4]
  2056b6:	4293      	cmp	r3, r2
  2056b8:	d101      	bne.n	2056be <chRegFindThreadByWorkingArea+0x1e>
      return ctp;
  2056ba:	9b03      	ldr	r3, [sp, #12]
  2056bc:	e007      	b.n	2056ce <chRegFindThreadByWorkingArea+0x2e>
    }
    ctp = chRegNextThread(ctp);
  2056be:	9803      	ldr	r0, [sp, #12]
  2056c0:	f7ff ffb6 	bl	205630 <chRegNextThread>
  2056c4:	9003      	str	r0, [sp, #12]
  } while (ctp != NULL);
  2056c6:	9b03      	ldr	r3, [sp, #12]
  2056c8:	2b00      	cmp	r3, #0
  2056ca:	d1ef      	bne.n	2056ac <chRegFindThreadByWorkingArea+0xc>

  return NULL;
  2056cc:	2300      	movs	r3, #0
}
  2056ce:	4618      	mov	r0, r3
  2056d0:	b005      	add	sp, #20
  2056d2:	f85d fb04 	ldr.w	pc, [sp], #4
  2056d6:	bf00      	nop
	...

002056e0 <ch_queue_init.lto_priv.3>:
static inline void ch_queue_init(ch_queue_t *qp) {
  2056e0:	b082      	sub	sp, #8
  2056e2:	9001      	str	r0, [sp, #4]
  qp->next = qp;
  2056e4:	9b01      	ldr	r3, [sp, #4]
  2056e6:	9a01      	ldr	r2, [sp, #4]
  2056e8:	601a      	str	r2, [r3, #0]
  qp->prev = qp;
  2056ea:	9b01      	ldr	r3, [sp, #4]
  2056ec:	9a01      	ldr	r2, [sp, #4]
  2056ee:	605a      	str	r2, [r3, #4]
}
  2056f0:	bf00      	nop
  2056f2:	b002      	add	sp, #8
  2056f4:	4770      	bx	lr
  2056f6:	bf00      	nop
	...

00205700 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
  205700:	b500      	push	{lr}
  205702:	b083      	sub	sp, #12
  205704:	9001      	str	r0, [sp, #4]

  chDbgCheck(mp != NULL);
  205706:	9b01      	ldr	r3, [sp, #4]
  205708:	2b00      	cmp	r3, #0
  20570a:	bf0c      	ite	eq
  20570c:	2301      	moveq	r3, #1
  20570e:	2300      	movne	r3, #0
  205710:	b2db      	uxtb	r3, r3
  205712:	2b00      	cmp	r3, #0
  205714:	d002      	beq.n	20571c <chMtxObjectInit+0x1c>
  205716:	4807      	ldr	r0, [pc, #28]	; (205734 <chMtxObjectInit+0x34>)
  205718:	f7fd ff92 	bl	203640 <chSysHalt>

  ch_queue_init(&mp->queue);
  20571c:	9b01      	ldr	r3, [sp, #4]
  20571e:	4618      	mov	r0, r3
  205720:	f7ff ffde 	bl	2056e0 <ch_queue_init.lto_priv.3>
  mp->owner = NULL;
  205724:	9b01      	ldr	r3, [sp, #4]
  205726:	2200      	movs	r2, #0
  205728:	609a      	str	r2, [r3, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
  20572a:	bf00      	nop
  20572c:	b003      	add	sp, #12
  20572e:	f85d fb04 	ldr.w	pc, [sp], #4
  205732:	bf00      	nop
  205734:	080065a0 	.word	0x080065a0
	...

00205740 <chEvtObjectInit>:
 *
 * @param[in] esp       pointer to an @p event_source_t object
 *
 * @init
 */
void chEvtObjectInit(event_source_t *esp) {
  205740:	b500      	push	{lr}
  205742:	b083      	sub	sp, #12
  205744:	9001      	str	r0, [sp, #4]

  chDbgCheck(esp != NULL);
  205746:	9b01      	ldr	r3, [sp, #4]
  205748:	2b00      	cmp	r3, #0
  20574a:	bf0c      	ite	eq
  20574c:	2301      	moveq	r3, #1
  20574e:	2300      	movne	r3, #0
  205750:	b2db      	uxtb	r3, r3
  205752:	2b00      	cmp	r3, #0
  205754:	d002      	beq.n	20575c <chEvtObjectInit+0x1c>
  205756:	4805      	ldr	r0, [pc, #20]	; (20576c <chEvtObjectInit+0x2c>)
  205758:	f7fd ff72 	bl	203640 <chSysHalt>

  esp->next = (event_listener_t *)esp;
  20575c:	9b01      	ldr	r3, [sp, #4]
  20575e:	9a01      	ldr	r2, [sp, #4]
  205760:	601a      	str	r2, [r3, #0]
}
  205762:	bf00      	nop
  205764:	b003      	add	sp, #12
  205766:	f85d fb04 	ldr.w	pc, [sp], #4
  20576a:	bf00      	nop
  20576c:	080065b0 	.word	0x080065b0

00205770 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
  205770:	b500      	push	{lr}
  205772:	b083      	sub	sp, #12
  205774:	9001      	str	r0, [sp, #4]
  205776:	9100      	str	r1, [sp, #0]

  chDbgCheckClassI();
  205778:	f7fe f8d2 	bl	203920 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
  20577c:	9b01      	ldr	r3, [sp, #4]
  20577e:	2b00      	cmp	r3, #0
  205780:	bf0c      	ite	eq
  205782:	2301      	moveq	r3, #1
  205784:	2300      	movne	r3, #0
  205786:	b2db      	uxtb	r3, r3
  205788:	2b00      	cmp	r3, #0
  20578a:	d002      	beq.n	205792 <chEvtSignalI+0x22>
  20578c:	4815      	ldr	r0, [pc, #84]	; (2057e4 <chEvtSignalI+0x74>)
  20578e:	f7fd ff57 	bl	203640 <chSysHalt>

  tp->epending |= events;
  205792:	9b01      	ldr	r3, [sp, #4]
  205794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  205796:	9b00      	ldr	r3, [sp, #0]
  205798:	431a      	orrs	r2, r3
  20579a:	9b01      	ldr	r3, [sp, #4]
  20579c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
  20579e:	9b01      	ldr	r3, [sp, #4]
  2057a0:	7f1b      	ldrb	r3, [r3, #28]
  2057a2:	2b0a      	cmp	r3, #10
  2057a4:	d106      	bne.n	2057b4 <chEvtSignalI+0x44>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2057a6:	9b01      	ldr	r3, [sp, #4]
  2057a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  2057aa:	9b01      	ldr	r3, [sp, #4]
  2057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2057ae:	4013      	ands	r3, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
  2057b0:	2b00      	cmp	r3, #0
  2057b2:	d10c      	bne.n	2057ce <chEvtSignalI+0x5e>
      ((tp->state == CH_STATE_WTANDEVT) &&
  2057b4:	9b01      	ldr	r3, [sp, #4]
  2057b6:	7f1b      	ldrb	r3, [r3, #28]
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
  2057b8:	2b0b      	cmp	r3, #11
  2057ba:	d10e      	bne.n	2057da <chEvtSignalI+0x6a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
  2057bc:	9b01      	ldr	r3, [sp, #4]
  2057be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  2057c0:	9b01      	ldr	r3, [sp, #4]
  2057c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  2057c4:	401a      	ands	r2, r3
  2057c6:	9b01      	ldr	r3, [sp, #4]
  2057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      ((tp->state == CH_STATE_WTANDEVT) &&
  2057ca:	429a      	cmp	r2, r3
  2057cc:	d105      	bne.n	2057da <chEvtSignalI+0x6a>
    tp->u.rdymsg = MSG_OK;
  2057ce:	9b01      	ldr	r3, [sp, #4]
  2057d0:	2200      	movs	r2, #0
  2057d2:	635a      	str	r2, [r3, #52]	; 0x34
    (void) chSchReadyI(tp);
  2057d4:	9801      	ldr	r0, [sp, #4]
  2057d6:	f7fe ff8b 	bl	2046f0 <chSchReadyI>
  }
}
  2057da:	bf00      	nop
  2057dc:	b003      	add	sp, #12
  2057de:	f85d fb04 	ldr.w	pc, [sp], #4
  2057e2:	bf00      	nop
  2057e4:	080065c0 	.word	0x080065c0
	...

002057f0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to an @p event_source_t object
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  2057f0:	b500      	push	{lr}
  2057f2:	b085      	sub	sp, #20
  2057f4:	9001      	str	r0, [sp, #4]
  2057f6:	9100      	str	r1, [sp, #0]
  event_listener_t *elp;

  chDbgCheckClassI();
  2057f8:	f7fe f892 	bl	203920 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
  2057fc:	9b01      	ldr	r3, [sp, #4]
  2057fe:	2b00      	cmp	r3, #0
  205800:	bf0c      	ite	eq
  205802:	2301      	moveq	r3, #1
  205804:	2300      	movne	r3, #0
  205806:	b2db      	uxtb	r3, r3
  205808:	2b00      	cmp	r3, #0
  20580a:	d002      	beq.n	205812 <chEvtBroadcastFlagsI+0x22>
  20580c:	4814      	ldr	r0, [pc, #80]	; (205860 <chEvtBroadcastFlagsI+0x70>)
  20580e:	f7fd ff17 	bl	203640 <chSysHalt>

  elp = esp->next;
  205812:	9b01      	ldr	r3, [sp, #4]
  205814:	681b      	ldr	r3, [r3, #0]
  205816:	9303      	str	r3, [sp, #12]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
  205818:	e019      	b.n	20584e <chEvtBroadcastFlagsI+0x5e>
  /*lint -restore*/
    elp->flags |= flags;
  20581a:	9b03      	ldr	r3, [sp, #12]
  20581c:	68da      	ldr	r2, [r3, #12]
  20581e:	9b00      	ldr	r3, [sp, #0]
  205820:	431a      	orrs	r2, r3
  205822:	9b03      	ldr	r3, [sp, #12]
  205824:	60da      	str	r2, [r3, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
  205826:	9b00      	ldr	r3, [sp, #0]
  205828:	2b00      	cmp	r3, #0
  20582a:	d005      	beq.n	205838 <chEvtBroadcastFlagsI+0x48>
        ((flags & elp->wflags) != (eventflags_t)0)) {
  20582c:	9b03      	ldr	r3, [sp, #12]
  20582e:	691a      	ldr	r2, [r3, #16]
  205830:	9b00      	ldr	r3, [sp, #0]
  205832:	4013      	ands	r3, r2
    if ((flags == (eventflags_t)0) ||
  205834:	2b00      	cmp	r3, #0
  205836:	d007      	beq.n	205848 <chEvtBroadcastFlagsI+0x58>
      chEvtSignalI(elp->listener, elp->events);
  205838:	9b03      	ldr	r3, [sp, #12]
  20583a:	685a      	ldr	r2, [r3, #4]
  20583c:	9b03      	ldr	r3, [sp, #12]
  20583e:	689b      	ldr	r3, [r3, #8]
  205840:	4619      	mov	r1, r3
  205842:	4610      	mov	r0, r2
  205844:	f7ff ff94 	bl	205770 <chEvtSignalI>
    }
    elp = elp->next;
  205848:	9b03      	ldr	r3, [sp, #12]
  20584a:	681b      	ldr	r3, [r3, #0]
  20584c:	9303      	str	r3, [sp, #12]
  while (elp != (event_listener_t *)esp) {
  20584e:	9a03      	ldr	r2, [sp, #12]
  205850:	9b01      	ldr	r3, [sp, #4]
  205852:	429a      	cmp	r2, r3
  205854:	d1e1      	bne.n	20581a <chEvtBroadcastFlagsI+0x2a>
  }
}
  205856:	bf00      	nop
  205858:	bf00      	nop
  20585a:	b005      	add	sp, #20
  20585c:	f85d fb04 	ldr.w	pc, [sp], #4
  205860:	080065d0 	.word	0x080065d0
	...

00205870 <chSysLock.lto_priv.17>:
static inline void chSysLock(void) {
  205870:	b500      	push	{lr}
  205872:	b083      	sub	sp, #12
  __ASM volatile ("cpsid i" : : : "memory");
  205874:	b672      	cpsid	i
}
  205876:	bf00      	nop
  205878:	2330      	movs	r3, #48	; 0x30
  20587a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  20587c:	9b01      	ldr	r3, [sp, #4]
  20587e:	f383 8811 	msr	BASEPRI, r3
}
  205882:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  205884:	b662      	cpsie	i
}
  205886:	bf00      	nop
}
  205888:	bf00      	nop
  __dbg_check_lock();
  20588a:	f7fd ff29 	bl	2036e0 <__dbg_check_lock>
}
  20588e:	bf00      	nop
  205890:	b003      	add	sp, #12
  205892:	f85d fb04 	ldr.w	pc, [sp], #4
  205896:	bf00      	nop
	...

002058a0 <chSysUnlock.lto_priv.17>:
static inline void chSysUnlock(void) {
  2058a0:	b500      	push	{lr}
  2058a2:	b083      	sub	sp, #12
  __dbg_check_unlock();
  2058a4:	f7fd ff44 	bl	203730 <__dbg_check_unlock>
  chDbgAssert((currcore->rlist.pqueue.next == &currcore->rlist.pqueue) ||
  2058a8:	4b12      	ldr	r3, [pc, #72]	; (2058f4 <chSysUnlock.lto_priv.17+0x54>)
  2058aa:	681b      	ldr	r3, [r3, #0]
  2058ac:	4a11      	ldr	r2, [pc, #68]	; (2058f4 <chSysUnlock.lto_priv.17+0x54>)
  2058ae:	4293      	cmp	r3, r2
  2058b0:	bf14      	ite	ne
  2058b2:	2301      	movne	r3, #1
  2058b4:	2300      	moveq	r3, #0
  2058b6:	b2db      	uxtb	r3, r3
  2058b8:	2b00      	cmp	r3, #0
  2058ba:	d00f      	beq.n	2058dc <chSysUnlock.lto_priv.17+0x3c>
  2058bc:	4b0d      	ldr	r3, [pc, #52]	; (2058f4 <chSysUnlock.lto_priv.17+0x54>)
  2058be:	68db      	ldr	r3, [r3, #12]
  2058c0:	689a      	ldr	r2, [r3, #8]
  2058c2:	4b0c      	ldr	r3, [pc, #48]	; (2058f4 <chSysUnlock.lto_priv.17+0x54>)
  2058c4:	681b      	ldr	r3, [r3, #0]
  2058c6:	689b      	ldr	r3, [r3, #8]
  2058c8:	429a      	cmp	r2, r3
  2058ca:	bf34      	ite	cc
  2058cc:	2301      	movcc	r3, #1
  2058ce:	2300      	movcs	r3, #0
  2058d0:	b2db      	uxtb	r3, r3
  2058d2:	2b00      	cmp	r3, #0
  2058d4:	d002      	beq.n	2058dc <chSysUnlock.lto_priv.17+0x3c>
  2058d6:	4808      	ldr	r0, [pc, #32]	; (2058f8 <chSysUnlock.lto_priv.17+0x58>)
  2058d8:	f7fd feb2 	bl	203640 <chSysHalt>
  2058dc:	2300      	movs	r3, #0
  2058de:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  2058e0:	9b01      	ldr	r3, [sp, #4]
  2058e2:	f383 8811 	msr	BASEPRI, r3
}
  2058e6:	bf00      	nop
}
  2058e8:	bf00      	nop
}
  2058ea:	bf00      	nop
  2058ec:	b003      	add	sp, #12
  2058ee:	f85d fb04 	ldr.w	pc, [sp], #4
  2058f2:	bf00      	nop
  2058f4:	20000958 	.word	0x20000958
  2058f8:	080065fc 	.word	0x080065fc
  2058fc:	00000000 	.word	0x00000000

00205900 <__core_init>:
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.basemem = __heap_base__;
  205900:	4b03      	ldr	r3, [pc, #12]	; (205910 <__core_init+0x10>)
  205902:	4a04      	ldr	r2, [pc, #16]	; (205914 <__core_init+0x14>)
  205904:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
  205906:	4b02      	ldr	r3, [pc, #8]	; (205910 <__core_init+0x10>)
  205908:	4a03      	ldr	r2, [pc, #12]	; (205918 <__core_init+0x18>)
  20590a:	605a      	str	r2, [r3, #4]
  static uint8_t static_heap[CH_CFG_MEMCORE_SIZE];

  ch_memcore.basemem = &static_heap[0];
  ch_memcore.topmem  = &static_heap[CH_CFG_MEMCORE_SIZE];
#endif
}
  20590c:	bf00      	nop
  20590e:	4770      	bx	lr
  205910:	20001360 	.word	0x20001360
  205914:	20010000 	.word	0x20010000
  205918:	20050000 	.word	0x20050000
  20591c:	00000000 	.word	0x00000000

00205920 <chCoreAllocFromTopI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
void *chCoreAllocFromTopI(size_t size, unsigned align, size_t offset) {
  205920:	b500      	push	{lr}
  205922:	b087      	sub	sp, #28
  205924:	9003      	str	r0, [sp, #12]
  205926:	9102      	str	r1, [sp, #8]
  205928:	9201      	str	r2, [sp, #4]
  uint8_t *p, *prev;

  chDbgCheckClassI();
  20592a:	f7fd fff9 	bl	203920 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
  20592e:	9b02      	ldr	r3, [sp, #8]
  205930:	2b00      	cmp	r3, #0
  205932:	bf0c      	ite	eq
  205934:	2301      	moveq	r3, #1
  205936:	2300      	movne	r3, #0
  205938:	b2db      	uxtb	r3, r3
  20593a:	2b00      	cmp	r3, #0
  20593c:	d10a      	bne.n	205954 <chCoreAllocFromTopI+0x34>
  20593e:	9b02      	ldr	r3, [sp, #8]
  205940:	1e5a      	subs	r2, r3, #1
  205942:	9b02      	ldr	r3, [sp, #8]
  205944:	4013      	ands	r3, r2
  205946:	2b00      	cmp	r3, #0
  205948:	bf14      	ite	ne
  20594a:	2301      	movne	r3, #1
  20594c:	2300      	moveq	r3, #0
  20594e:	b2db      	uxtb	r3, r3
  205950:	2b00      	cmp	r3, #0
  205952:	d002      	beq.n	20595a <chCoreAllocFromTopI+0x3a>
  205954:	4813      	ldr	r0, [pc, #76]	; (2059a4 <chCoreAllocFromTopI+0x84>)
  205956:	f7fd fe73 	bl	203640 <chSysHalt>

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  20595a:	4b13      	ldr	r3, [pc, #76]	; (2059a8 <chCoreAllocFromTopI+0x88>)
  20595c:	685a      	ldr	r2, [r3, #4]
  20595e:	9b03      	ldr	r3, [sp, #12]
  205960:	425b      	negs	r3, r3
  205962:	4413      	add	r3, r2
  205964:	461a      	mov	r2, r3
  205966:	9b02      	ldr	r3, [sp, #8]
  205968:	425b      	negs	r3, r3
  20596a:	4013      	ands	r3, r2
  20596c:	9305      	str	r3, [sp, #20]
  prev = p - offset;
  20596e:	9b01      	ldr	r3, [sp, #4]
  205970:	425b      	negs	r3, r3
  205972:	9a05      	ldr	r2, [sp, #20]
  205974:	4413      	add	r3, r2
  205976:	9304      	str	r3, [sp, #16]

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
  205978:	4b0b      	ldr	r3, [pc, #44]	; (2059a8 <chCoreAllocFromTopI+0x88>)
  20597a:	681b      	ldr	r3, [r3, #0]
  20597c:	9a04      	ldr	r2, [sp, #16]
  20597e:	429a      	cmp	r2, r3
  205980:	d304      	bcc.n	20598c <chCoreAllocFromTopI+0x6c>
  205982:	4b09      	ldr	r3, [pc, #36]	; (2059a8 <chCoreAllocFromTopI+0x88>)
  205984:	685b      	ldr	r3, [r3, #4]
  205986:	9a04      	ldr	r2, [sp, #16]
  205988:	429a      	cmp	r2, r3
  20598a:	d901      	bls.n	205990 <chCoreAllocFromTopI+0x70>
    return NULL;
  20598c:	2300      	movs	r3, #0
  20598e:	e004      	b.n	20599a <chCoreAllocFromTopI+0x7a>
  }

  ch_memcore.topmem = prev;
  205990:	4a05      	ldr	r2, [pc, #20]	; (2059a8 <chCoreAllocFromTopI+0x88>)
  205992:	9b04      	ldr	r3, [sp, #16]
  205994:	6053      	str	r3, [r2, #4]

  return p;
  205996:	9b05      	ldr	r3, [sp, #20]
  205998:	bf00      	nop
}
  20599a:	4618      	mov	r0, r3
  20599c:	b007      	add	sp, #28
  20599e:	f85d fb04 	ldr.w	pc, [sp], #4
  2059a2:	bf00      	nop
  2059a4:	080065e8 	.word	0x080065e8
  2059a8:	20001360 	.word	0x20001360
  2059ac:	00000000 	.word	0x00000000

002059b0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
  2059b0:	b500      	push	{lr}
  2059b2:	b087      	sub	sp, #28
  2059b4:	9003      	str	r0, [sp, #12]
  2059b6:	9102      	str	r1, [sp, #8]
  2059b8:	9201      	str	r2, [sp, #4]
  void *p;

  chSysLock();
  2059ba:	f7ff ff59 	bl	205870 <chSysLock.lto_priv.17>
  p = chCoreAllocFromTopI(size, align, offset);
  2059be:	9a01      	ldr	r2, [sp, #4]
  2059c0:	9902      	ldr	r1, [sp, #8]
  2059c2:	9803      	ldr	r0, [sp, #12]
  2059c4:	f7ff ffac 	bl	205920 <chCoreAllocFromTopI>
  2059c8:	9005      	str	r0, [sp, #20]
  chSysUnlock();
  2059ca:	f7ff ff69 	bl	2058a0 <chSysUnlock.lto_priv.17>

  return p;
  2059ce:	9b05      	ldr	r3, [sp, #20]
}
  2059d0:	4618      	mov	r0, r3
  2059d2:	b007      	add	sp, #28
  2059d4:	f85d fb04 	ldr.w	pc, [sp], #4
	...

002059e0 <chCoreGetStatusX>:
 *
 * @param[in] map       Memory area representing available core space.
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {
  2059e0:	b082      	sub	sp, #8
  2059e2:	9001      	str	r0, [sp, #4]

  map->base = ch_memcore.basemem;
  2059e4:	4b07      	ldr	r3, [pc, #28]	; (205a04 <chCoreGetStatusX+0x24>)
  2059e6:	681a      	ldr	r2, [r3, #0]
  2059e8:	9b01      	ldr	r3, [sp, #4]
  2059ea:	601a      	str	r2, [r3, #0]
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
  2059ec:	4b05      	ldr	r3, [pc, #20]	; (205a04 <chCoreGetStatusX+0x24>)
  2059ee:	685a      	ldr	r2, [r3, #4]
  2059f0:	4b04      	ldr	r3, [pc, #16]	; (205a04 <chCoreGetStatusX+0x24>)
  2059f2:	681b      	ldr	r3, [r3, #0]
  2059f4:	1ad3      	subs	r3, r2, r3
  2059f6:	461a      	mov	r2, r3
  2059f8:	9b01      	ldr	r3, [sp, #4]
  2059fa:	605a      	str	r2, [r3, #4]
  /*lint -restore*/
}
  2059fc:	bf00      	nop
  2059fe:	b002      	add	sp, #8
  205a00:	4770      	bx	lr
  205a02:	bf00      	nop
  205a04:	20001360 	.word	0x20001360
	...

00205a10 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
  205a10:	b508      	push	{r3, lr}

  default_heap.provider = chCoreAllocAlignedWithOffset;
  205a12:	4b08      	ldr	r3, [pc, #32]	; (205a34 <__heap_init+0x24>)
  205a14:	4a08      	ldr	r2, [pc, #32]	; (205a38 <__heap_init+0x28>)
  205a16:	601a      	str	r2, [r3, #0]
  chCoreGetStatusX(&default_heap.area);
  205a18:	4808      	ldr	r0, [pc, #32]	; (205a3c <__heap_init+0x2c>)
  205a1a:	f7ff ffe1 	bl	2059e0 <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
  205a1e:	4b05      	ldr	r3, [pc, #20]	; (205a34 <__heap_init+0x24>)
  205a20:	2200      	movs	r2, #0
  205a22:	60da      	str	r2, [r3, #12]
  H_FREE_PAGES(&default_heap.header) = 0;
  205a24:	4b03      	ldr	r3, [pc, #12]	; (205a34 <__heap_init+0x24>)
  205a26:	2200      	movs	r2, #0
  205a28:	611a      	str	r2, [r3, #16]
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
  205a2a:	4805      	ldr	r0, [pc, #20]	; (205a40 <__heap_init+0x30>)
  205a2c:	f7ff fe68 	bl	205700 <chMtxObjectInit>
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
  205a30:	bf00      	nop
  205a32:	bd08      	pop	{r3, pc}
  205a34:	20001368 	.word	0x20001368
  205a38:	002059b1 	.word	0x002059b1
  205a3c:	2000136c 	.word	0x2000136c
  205a40:	2000137c 	.word	0x2000137c
	...

00205a50 <chPoolObjectInitAligned>:
 *                      automatically
 *
 * @init
 */
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {
  205a50:	b500      	push	{lr}
  205a52:	b085      	sub	sp, #20
  205a54:	9003      	str	r0, [sp, #12]
  205a56:	9102      	str	r1, [sp, #8]
  205a58:	9201      	str	r2, [sp, #4]
  205a5a:	9300      	str	r3, [sp, #0]

  chDbgCheck((mp != NULL) &&
  205a5c:	9b03      	ldr	r3, [sp, #12]
  205a5e:	2b00      	cmp	r3, #0
  205a60:	bf0c      	ite	eq
  205a62:	2301      	moveq	r3, #1
  205a64:	2300      	movne	r3, #0
  205a66:	b2db      	uxtb	r3, r3
  205a68:	2b00      	cmp	r3, #0
  205a6a:	d107      	bne.n	205a7c <chPoolObjectInitAligned+0x2c>
  205a6c:	9b02      	ldr	r3, [sp, #8]
  205a6e:	2b03      	cmp	r3, #3
  205a70:	bf94      	ite	ls
  205a72:	2301      	movls	r3, #1
  205a74:	2300      	movhi	r3, #0
  205a76:	b2db      	uxtb	r3, r3
  205a78:	2b00      	cmp	r3, #0
  205a7a:	d001      	beq.n	205a80 <chPoolObjectInitAligned+0x30>
  205a7c:	2301      	movs	r3, #1
  205a7e:	e000      	b.n	205a82 <chPoolObjectInitAligned+0x32>
  205a80:	2300      	movs	r3, #0
  205a82:	2b00      	cmp	r3, #0
  205a84:	d107      	bne.n	205a96 <chPoolObjectInitAligned+0x46>
  205a86:	9b01      	ldr	r3, [sp, #4]
  205a88:	2b03      	cmp	r3, #3
  205a8a:	bf94      	ite	ls
  205a8c:	2301      	movls	r3, #1
  205a8e:	2300      	movhi	r3, #0
  205a90:	b2db      	uxtb	r3, r3
  205a92:	2b00      	cmp	r3, #0
  205a94:	d001      	beq.n	205a9a <chPoolObjectInitAligned+0x4a>
  205a96:	2301      	movs	r3, #1
  205a98:	e000      	b.n	205a9c <chPoolObjectInitAligned+0x4c>
  205a9a:	2300      	movs	r3, #0
  205a9c:	2b00      	cmp	r3, #0
  205a9e:	d117      	bne.n	205ad0 <chPoolObjectInitAligned+0x80>
  205aa0:	9b01      	ldr	r3, [sp, #4]
  205aa2:	2b00      	cmp	r3, #0
  205aa4:	bf0c      	ite	eq
  205aa6:	2301      	moveq	r3, #1
  205aa8:	2300      	movne	r3, #0
  205aaa:	b2db      	uxtb	r3, r3
  205aac:	2b00      	cmp	r3, #0
  205aae:	d10a      	bne.n	205ac6 <chPoolObjectInitAligned+0x76>
  205ab0:	9b01      	ldr	r3, [sp, #4]
  205ab2:	1e5a      	subs	r2, r3, #1
  205ab4:	9b01      	ldr	r3, [sp, #4]
  205ab6:	4013      	ands	r3, r2
  205ab8:	2b00      	cmp	r3, #0
  205aba:	bf14      	ite	ne
  205abc:	2301      	movne	r3, #1
  205abe:	2300      	moveq	r3, #0
  205ac0:	b2db      	uxtb	r3, r3
  205ac2:	2b00      	cmp	r3, #0
  205ac4:	d001      	beq.n	205aca <chPoolObjectInitAligned+0x7a>
  205ac6:	2301      	movs	r3, #1
  205ac8:	e000      	b.n	205acc <chPoolObjectInitAligned+0x7c>
  205aca:	2300      	movs	r3, #0
  205acc:	2b00      	cmp	r3, #0
  205ace:	d002      	beq.n	205ad6 <chPoolObjectInitAligned+0x86>
  205ad0:	4809      	ldr	r0, [pc, #36]	; (205af8 <chPoolObjectInitAligned+0xa8>)
  205ad2:	f7fd fdb5 	bl	203640 <chSysHalt>
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  205ad6:	9b03      	ldr	r3, [sp, #12]
  205ad8:	2200      	movs	r2, #0
  205ada:	601a      	str	r2, [r3, #0]
  mp->object_size = size;
  205adc:	9b03      	ldr	r3, [sp, #12]
  205ade:	9a02      	ldr	r2, [sp, #8]
  205ae0:	605a      	str	r2, [r3, #4]
  mp->align = align;
  205ae2:	9b03      	ldr	r3, [sp, #12]
  205ae4:	9a01      	ldr	r2, [sp, #4]
  205ae6:	609a      	str	r2, [r3, #8]
  mp->provider = provider;
  205ae8:	9b03      	ldr	r3, [sp, #12]
  205aea:	9a00      	ldr	r2, [sp, #0]
  205aec:	60da      	str	r2, [r3, #12]
}
  205aee:	bf00      	nop
  205af0:	b005      	add	sp, #20
  205af2:	f85d fb04 	ldr.w	pc, [sp], #4
  205af6:	bf00      	nop
  205af8:	08006608 	.word	0x08006608
  205afc:	00000000 	.word	0x00000000

00205b00 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
  205b00:	b500      	push	{lr}
  205b02:	b083      	sub	sp, #12
  205b04:	9001      	str	r0, [sp, #4]
  205b06:	9100      	str	r1, [sp, #0]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
  205b08:	2200      	movs	r2, #0
  205b0a:	9900      	ldr	r1, [sp, #0]
  205b0c:	9801      	ldr	r0, [sp, #4]
  205b0e:	f7ff ff07 	bl	205920 <chCoreAllocFromTopI>
  205b12:	4603      	mov	r3, r0
}
  205b14:	4618      	mov	r0, r3
  205b16:	b003      	add	sp, #12
  205b18:	f85d fb04 	ldr.w	pc, [sp], #4
  205b1c:	0000      	movs	r0, r0
	...

00205b20 <chPoolObjectInit>:
 *
 * @init
 */
static inline void chPoolObjectInit(memory_pool_t *mp,
                                    size_t size,
                                    memgetfunc_t provider) {
  205b20:	b500      	push	{lr}
  205b22:	b085      	sub	sp, #20
  205b24:	9003      	str	r0, [sp, #12]
  205b26:	9102      	str	r1, [sp, #8]
  205b28:	9201      	str	r2, [sp, #4]

  chPoolObjectInitAligned(mp, size, PORT_NATURAL_ALIGN, provider);
  205b2a:	9b01      	ldr	r3, [sp, #4]
  205b2c:	2204      	movs	r2, #4
  205b2e:	9902      	ldr	r1, [sp, #8]
  205b30:	9803      	ldr	r0, [sp, #12]
  205b32:	f7ff ff8d 	bl	205a50 <chPoolObjectInitAligned>
}
  205b36:	bf00      	nop
  205b38:	b005      	add	sp, #20
  205b3a:	f85d fb04 	ldr.w	pc, [sp], #4
  205b3e:	bf00      	nop

00205b40 <dyn_list_init>:
    *dp++ = c;
    i--;
  } while ((c != (char)0) && (i > 0U));
}

static inline void dyn_list_init(dyn_list_t *dlp) {
  205b40:	b082      	sub	sp, #8
  205b42:	9001      	str	r0, [sp, #4]

  dlp->next = (dyn_element_t *)dlp;
  205b44:	9b01      	ldr	r3, [sp, #4]
  205b46:	9a01      	ldr	r2, [sp, #4]
  205b48:	601a      	str	r2, [r3, #0]
}
  205b4a:	bf00      	nop
  205b4c:	b002      	add	sp, #8
  205b4e:	4770      	bx	lr

00205b50 <__factory_init>:
/**
 * @brief   Initializes the objects factory.
 *
 * @init
 */
void __factory_init(void) {
  205b50:	b508      	push	{r3, lr}

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
  205b52:	4810      	ldr	r0, [pc, #64]	; (205b94 <__factory_init+0x44>)
  205b54:	f7ff fdd4 	bl	205700 <chMtxObjectInit>
#else
  chSemObjectInit(&ch_factory.sem, (cnt_t)1);
#endif

#if CH_CFG_FACTORY_OBJECTS_REGISTRY == TRUE
  dyn_list_init(&ch_factory.obj_list);
  205b58:	480f      	ldr	r0, [pc, #60]	; (205b98 <__factory_init+0x48>)
  205b5a:	f7ff fff1 	bl	205b40 <dyn_list_init>
  chPoolObjectInit(&ch_factory.obj_pool,
  205b5e:	4a0f      	ldr	r2, [pc, #60]	; (205b9c <__factory_init+0x4c>)
  205b60:	2114      	movs	r1, #20
  205b62:	480f      	ldr	r0, [pc, #60]	; (205ba0 <__factory_init+0x50>)
  205b64:	f7ff ffdc 	bl	205b20 <chPoolObjectInit>
                   sizeof (registered_object_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_GENERIC_BUFFERS == TRUE
  dyn_list_init(&ch_factory.buf_list);
  205b68:	480e      	ldr	r0, [pc, #56]	; (205ba4 <__factory_init+0x54>)
  205b6a:	f7ff ffe9 	bl	205b40 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_SEMAPHORES == TRUE
  dyn_list_init(&ch_factory.sem_list);
  205b6e:	480e      	ldr	r0, [pc, #56]	; (205ba8 <__factory_init+0x58>)
  205b70:	f7ff ffe6 	bl	205b40 <dyn_list_init>
  chPoolObjectInit(&ch_factory.sem_pool,
  205b74:	4a09      	ldr	r2, [pc, #36]	; (205b9c <__factory_init+0x4c>)
  205b76:	211c      	movs	r1, #28
  205b78:	480c      	ldr	r0, [pc, #48]	; (205bac <__factory_init+0x5c>)
  205b7a:	f7ff ffd1 	bl	205b20 <chPoolObjectInit>
                   sizeof (dyn_semaphore_t),
                   chCoreAllocAlignedI);
#endif
#if CH_CFG_FACTORY_MAILBOXES == TRUE
  dyn_list_init(&ch_factory.mbx_list);
  205b7e:	480c      	ldr	r0, [pc, #48]	; (205bb0 <__factory_init+0x60>)
  205b80:	f7ff ffde 	bl	205b40 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_OBJ_FIFOS == TRUE
  dyn_list_init(&ch_factory.fifo_list);
  205b84:	480b      	ldr	r0, [pc, #44]	; (205bb4 <__factory_init+0x64>)
  205b86:	f7ff ffdb 	bl	205b40 <dyn_list_init>
#endif
#if CH_CFG_FACTORY_PIPES == TRUE
  dyn_list_init(&ch_factory.pipe_list);
  205b8a:	480b      	ldr	r0, [pc, #44]	; (205bb8 <__factory_init+0x68>)
  205b8c:	f7ff ffd8 	bl	205b40 <dyn_list_init>
#endif
}
  205b90:	bf00      	nop
  205b92:	bd08      	pop	{r3, pc}
  205b94:	2000138c 	.word	0x2000138c
  205b98:	2000139c 	.word	0x2000139c
  205b9c:	00205b01 	.word	0x00205b01
  205ba0:	200013a0 	.word	0x200013a0
  205ba4:	200013b0 	.word	0x200013b0
  205ba8:	200013b4 	.word	0x200013b4
  205bac:	200013b8 	.word	0x200013b8
  205bb0:	200013c8 	.word	0x200013c8
  205bb4:	200013cc 	.word	0x200013cc
  205bb8:	200013d0 	.word	0x200013d0
  205bbc:	00000000 	.word	0x00000000

00205bc0 <__NVIC_SetPriorityGrouping>:
{
  205bc0:	b084      	sub	sp, #16
  205bc2:	9001      	str	r0, [sp, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
  205bc4:	9b01      	ldr	r3, [sp, #4]
  205bc6:	f003 0307 	and.w	r3, r3, #7
  205bca:	9303      	str	r3, [sp, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  205bcc:	4b0a      	ldr	r3, [pc, #40]	; (205bf8 <__NVIC_SetPriorityGrouping+0x38>)
  205bce:	68db      	ldr	r3, [r3, #12]
  205bd0:	9302      	str	r3, [sp, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  205bd2:	9a02      	ldr	r2, [sp, #8]
  205bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
  205bd8:	4013      	ands	r3, r2
  205bda:	9302      	str	r3, [sp, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  205bdc:	9b03      	ldr	r3, [sp, #12]
  205bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
  205be0:	9b02      	ldr	r3, [sp, #8]
  205be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
  205be4:	4b05      	ldr	r3, [pc, #20]	; (205bfc <__NVIC_SetPriorityGrouping+0x3c>)
  205be6:	4313      	orrs	r3, r2
  205be8:	9302      	str	r3, [sp, #8]
  SCB->AIRCR =  reg_value;
  205bea:	4a03      	ldr	r2, [pc, #12]	; (205bf8 <__NVIC_SetPriorityGrouping+0x38>)
  205bec:	9b02      	ldr	r3, [sp, #8]
  205bee:	60d3      	str	r3, [r2, #12]
}
  205bf0:	bf00      	nop
  205bf2:	b004      	add	sp, #16
  205bf4:	4770      	bx	lr
  205bf6:	bf00      	nop
  205bf8:	e000ed00 	.word	0xe000ed00
  205bfc:	05fa0000 	.word	0x05fa0000

00205c00 <__NVIC_SetPriority>:
{
  205c00:	b082      	sub	sp, #8
  205c02:	4603      	mov	r3, r0
  205c04:	9100      	str	r1, [sp, #0]
  205c06:	f88d 3007 	strb.w	r3, [sp, #7]
  if ((int32_t)(IRQn) >= 0)
  205c0a:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  205c0e:	2b00      	cmp	r3, #0
  205c10:	db0a      	blt.n	205c28 <__NVIC_SetPriority+0x28>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  205c12:	9b00      	ldr	r3, [sp, #0]
  205c14:	b2da      	uxtb	r2, r3
  205c16:	490c      	ldr	r1, [pc, #48]	; (205c48 <__NVIC_SetPriority+0x48>)
  205c18:	f99d 3007 	ldrsb.w	r3, [sp, #7]
  205c1c:	0112      	lsls	r2, r2, #4
  205c1e:	b2d2      	uxtb	r2, r2
  205c20:	440b      	add	r3, r1
  205c22:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  205c26:	e00b      	b.n	205c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  205c28:	9b00      	ldr	r3, [sp, #0]
  205c2a:	b2da      	uxtb	r2, r3
  205c2c:	4907      	ldr	r1, [pc, #28]	; (205c4c <__NVIC_SetPriority+0x4c>)
  205c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  205c32:	f003 030f 	and.w	r3, r3, #15
  205c36:	3b04      	subs	r3, #4
  205c38:	0112      	lsls	r2, r2, #4
  205c3a:	b2d2      	uxtb	r2, r2
  205c3c:	440b      	add	r3, r1
  205c3e:	761a      	strb	r2, [r3, #24]
}
  205c40:	bf00      	nop
  205c42:	b002      	add	sp, #8
  205c44:	4770      	bx	lr
  205c46:	bf00      	nop
  205c48:	e000e100 	.word	0xe000e100
  205c4c:	e000ed00 	.word	0xe000ed00

00205c50 <SVC_Handler>:
 * @details The SVC vector is used for exception mode re-entering after a
 *          context switch and, optionally, for system calls.
 * @note    The SVC vector is only used in advanced kernel mode.
 */
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void SVC_Handler(void) {
  205c50:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  205c52:	f3ef 8309 	mrs	r3, PSP
  205c56:	9300      	str	r3, [sp, #0]
  return(result);
  205c58:	9b00      	ldr	r3, [sp, #0]
/*lint -restore*/
  uint32_t psp = __get_PSP();
  205c5a:	9303      	str	r3, [sp, #12]

  /* Unstacking procedure, discarding the current exception context and
     positioning the stack to point to the real one.*/
  psp += sizeof (struct port_extctx);
  205c5c:	9b03      	ldr	r3, [sp, #12]
  205c5e:	3320      	adds	r3, #32
  205c60:	9303      	str	r3, [sp, #12]
  205c62:	9b03      	ldr	r3, [sp, #12]
  205c64:	9301      	str	r3, [sp, #4]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  205c66:	9b01      	ldr	r3, [sp, #4]
  205c68:	f383 8809 	msr	PSP, r3
}
  205c6c:	bf00      	nop
  205c6e:	2300      	movs	r3, #0
  205c70:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  205c72:	9b02      	ldr	r3, [sp, #8]
  205c74:	f383 8811 	msr	BASEPRI, r3
}
  205c78:	bf00      	nop
  205c7a:	bf00      	nop
}
  205c7c:	bf00      	nop
  /* Restoring real position of the original stack frame.*/
  __set_PSP(psp);

  /* Restoring the normal interrupts status.*/
  port_unlock_from_isr();
}
  205c7e:	bf00      	nop
  205c80:	b004      	add	sp, #16
  205c82:	4770      	bx	lr
	...

00205c90 <port_init>:
 *
 * @param[in, out] oip  pointer to the @p os_instance_t structure
 *
 * @notapi
 */
void port_init(os_instance_t *oip) {
  205c90:	b500      	push	{lr}
  205c92:	b085      	sub	sp, #20
  205c94:	9001      	str	r0, [sp, #4]
  205c96:	2330      	movs	r3, #48	; 0x30
  205c98:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  205c9a:	9b03      	ldr	r3, [sp, #12]
  205c9c:	f383 8811 	msr	BASEPRI, r3
}
  205ca0:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  205ca2:	b662      	cpsie	i
}
  205ca4:	bf00      	nop
}
  205ca6:	bf00      	nop
  __set_CONTROL(CONTROL_FPCA_Msk | CONTROL_SPSEL_Msk);
  __ISB();
#endif

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);
  205ca8:	2003      	movs	r0, #3
  205caa:	f7ff ff89 	bl	205bc0 <__NVIC_SetPriorityGrouping>

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
  205cae:	4b0f      	ldr	r3, [pc, #60]	; (205cec <port_init+0x5c>)
  205cb0:	68db      	ldr	r3, [r3, #12]
  205cb2:	4a0e      	ldr	r2, [pc, #56]	; (205cec <port_init+0x5c>)
  205cb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  205cb8:	60d3      	str	r3, [r2, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
  205cba:	4b0d      	ldr	r3, [pc, #52]	; (205cf0 <port_init+0x60>)
  205cbc:	4a0d      	ldr	r2, [pc, #52]	; (205cf4 <port_init+0x64>)
  205cbe:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
  205cc2:	4b0b      	ldr	r3, [pc, #44]	; (205cf0 <port_init+0x60>)
  205cc4:	681b      	ldr	r3, [r3, #0]
  205cc6:	4a0a      	ldr	r2, [pc, #40]	; (205cf0 <port_init+0x60>)
  205cc8:	f043 0301 	orr.w	r3, r3, #1
  205ccc:	6013      	str	r3, [r2, #0]

  /* Initialization of the system vectors used by the port.*/
#if CORTEX_SIMPLIFIED_PRIORITY == FALSE
  NVIC_SetPriority(SVCall_IRQn, CORTEX_PRIORITY_SVCALL);
  205cce:	2102      	movs	r1, #2
  205cd0:	f06f 0004 	mvn.w	r0, #4
  205cd4:	f7ff ff94 	bl	205c00 <__NVIC_SetPriority>
#endif
  NVIC_SetPriority(PendSV_IRQn, CORTEX_PRIORITY_PENDSV);
  205cd8:	2103      	movs	r1, #3
  205cda:	f06f 0001 	mvn.w	r0, #1
  205cde:	f7ff ff8f 	bl	205c00 <__NVIC_SetPriority>

#if (PORT_MPU_INITIALIZE == TRUE) || (PORT_ENABLE_GUARD_PAGES == TRUE)
  /* MPU is enabled.*/
  mpuEnable(MPU_CTRL_PRIVDEFENA);
#endif
}
  205ce2:	bf00      	nop
  205ce4:	b005      	add	sp, #20
  205ce6:	f85d fb04 	ldr.w	pc, [sp], #4
  205cea:	bf00      	nop
  205cec:	e000edf0 	.word	0xe000edf0
  205cf0:	e0001000 	.word	0xe0001000
  205cf4:	c5acce55 	.word	0xc5acce55
	...

00205d00 <__port_irq_epilogue>:
#endif

/**
 * @brief   Exception exit redirection to @p __port_switch_from_isr().
 */
void __port_irq_epilogue(void) {
  205d00:	b500      	push	{lr}
  205d02:	b087      	sub	sp, #28
  __ASM volatile ("cpsid i" : : : "memory");
  205d04:	b672      	cpsid	i
}
  205d06:	bf00      	nop
  205d08:	2330      	movs	r3, #48	; 0x30
  205d0a:	9303      	str	r3, [sp, #12]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  205d0c:	9b03      	ldr	r3, [sp, #12]
  205d0e:	f383 8811 	msr	BASEPRI, r3
}
  205d12:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
  205d14:	b662      	cpsie	i
}
  205d16:	bf00      	nop
}
  205d18:	bf00      	nop
}
  205d1a:	bf00      	nop

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
  205d1c:	4b18      	ldr	r3, [pc, #96]	; (205d80 <__port_irq_epilogue+0x80>)
  205d1e:	685b      	ldr	r3, [r3, #4]
  205d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  205d24:	2b00      	cmp	r3, #0
  205d26:	d020      	beq.n	205d6a <__port_irq_epilogue+0x6a>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
  205d28:	f3ef 8309 	mrs	r3, PSP
  205d2c:	9301      	str	r3, [sp, #4]
  return(result);
  205d2e:	9b01      	ldr	r3, [sp, #4]
#endif


    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    psp = __get_PSP();
  205d30:	9305      	str	r3, [sp, #20]
    psp -= sizeof (struct port_extctx);
  205d32:	9b05      	ldr	r3, [sp, #20]
  205d34:	3b20      	subs	r3, #32
  205d36:	9305      	str	r3, [sp, #20]

    /* The port_extctx structure is pointed by the S-PSP register.*/
    ectxp = (struct port_extctx *)psp;
  205d38:	9b05      	ldr	r3, [sp, #20]
  205d3a:	9304      	str	r3, [sp, #16]

    /* Setting up a fake XPSR register value.*/
    ectxp->xpsr = 0x01000000U;
  205d3c:	9b04      	ldr	r3, [sp, #16]
  205d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  205d42:	61da      	str	r2, [r3, #28]
  205d44:	9b05      	ldr	r3, [sp, #20]
  205d46:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
  205d48:	9b02      	ldr	r3, [sp, #8]
  205d4a:	f383 8809 	msr	PSP, r3
}
  205d4e:	bf00      	nop
    /* Writing back the modified S-PSP value.*/
    __set_PSP(psp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
  205d50:	f7fe fde6 	bl	204920 <chSchIsPreemptionRequired>
  205d54:	4603      	mov	r3, r0
  205d56:	2b00      	cmp	r3, #0
  205d58:	d003      	beq.n	205d62 <__port_irq_epilogue+0x62>
      /* Preemption is required we need to enforce a context switch.*/
      ectxp->pc = (uint32_t)__port_switch_from_isr;
  205d5a:	4a0a      	ldr	r2, [pc, #40]	; (205d84 <__port_irq_epilogue+0x84>)
  205d5c:	9b04      	ldr	r3, [sp, #16]
  205d5e:	619a      	str	r2, [r3, #24]
      ectxp->pc = (uint32_t)__port_exit_from_isr;
    }

    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  205d60:	e00b      	b.n	205d7a <__port_irq_epilogue+0x7a>
      ectxp->pc = (uint32_t)__port_exit_from_isr;
  205d62:	4a09      	ldr	r2, [pc, #36]	; (205d88 <__port_irq_epilogue+0x88>)
  205d64:	9b04      	ldr	r3, [sp, #16]
  205d66:	619a      	str	r2, [r3, #24]
    return;
  205d68:	e007      	b.n	205d7a <__port_irq_epilogue+0x7a>
  205d6a:	2300      	movs	r3, #0
  205d6c:	9300      	str	r3, [sp, #0]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
  205d6e:	9b00      	ldr	r3, [sp, #0]
  205d70:	f383 8811 	msr	BASEPRI, r3
}
  205d74:	bf00      	nop
}
  205d76:	bf00      	nop
}
  205d78:	bf00      	nop
  }
  port_unlock_from_isr();
}
  205d7a:	b007      	add	sp, #28
  205d7c:	f85d fb04 	ldr.w	pc, [sp], #4
  205d80:	e000ed00 	.word	0xe000ed00
  205d84:	00200307 	.word	0x00200307
  205d88:	00200312 	.word	0x00200312
  205d8c:	00000000 	.word	0x00000000

00205d90 <chRegSetThreadName>:
 *
 * @param[in] name      thread name as a zero terminated string
 *
 * @api
 */
static inline void chRegSetThreadName(const char *name) {
  205d90:	b082      	sub	sp, #8
  205d92:	9001      	str	r0, [sp, #4]

#if CH_CFG_USE_REGISTRY == TRUE
  __sch_get_currthread()->name = name;
  205d94:	4b03      	ldr	r3, [pc, #12]	; (205da4 <chRegSetThreadName+0x14>)
  205d96:	68db      	ldr	r3, [r3, #12]
  205d98:	9a01      	ldr	r2, [sp, #4]
  205d9a:	621a      	str	r2, [r3, #32]
#else
  (void)name;
#endif
}
  205d9c:	bf00      	nop
  205d9e:	b002      	add	sp, #8
  205da0:	4770      	bx	lr
  205da2:	bf00      	nop
  205da4:	20000958 	.word	0x20000958
	...

00205db0 <adccallback>:

/*
 * ADC streaming callback.
 */
size_t nx = 0, ny = 0;
static void adccallback(ADCDriver *adcp) {
  205db0:	b082      	sub	sp, #8
  205db2:	9001      	str	r0, [sp, #4]
  dmaBufferInvalidate(buffer,
                      n * adcp->grpp->num_channels * sizeof (adcsample_t));
#endif

  /* Updating counters.*/
  if (adcIsBufferComplete(adcp)) {
  205db4:	9b01      	ldr	r3, [sp, #4]
  205db6:	781b      	ldrb	r3, [r3, #0]
  205db8:	2b04      	cmp	r3, #4
  205dba:	d105      	bne.n	205dc8 <adccallback+0x18>
    nx += 1;
  205dbc:	4b06      	ldr	r3, [pc, #24]	; (205dd8 <adccallback+0x28>)
  205dbe:	681b      	ldr	r3, [r3, #0]
  205dc0:	3301      	adds	r3, #1
  205dc2:	4a05      	ldr	r2, [pc, #20]	; (205dd8 <adccallback+0x28>)
  205dc4:	6013      	str	r3, [r2, #0]
  }
  else {
    ny += 1;
  }
}
  205dc6:	e004      	b.n	205dd2 <adccallback+0x22>
    ny += 1;
  205dc8:	4b04      	ldr	r3, [pc, #16]	; (205ddc <adccallback+0x2c>)
  205dca:	681b      	ldr	r3, [r3, #0]
  205dcc:	3301      	adds	r3, #1
  205dce:	4a03      	ldr	r2, [pc, #12]	; (205ddc <adccallback+0x2c>)
  205dd0:	6013      	str	r3, [r2, #0]
}
  205dd2:	bf00      	nop
  205dd4:	b002      	add	sp, #8
  205dd6:	4770      	bx	lr
  205dd8:	200014d4 	.word	0x200014d4
  205ddc:	200014d8 	.word	0x200014d8

00205de0 <adcerrorcallback>:

/*
 * ADC errors callback, should never happen.
 */
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
  205de0:	b082      	sub	sp, #8
  205de2:	9001      	str	r0, [sp, #4]
  205de4:	9100      	str	r1, [sp, #0]

  (void)adcp;
  (void)err;
}
  205de6:	bf00      	nop
  205de8:	b002      	add	sp, #8
  205dea:	4770      	bx	lr
  205dec:	0000      	movs	r0, r0
	...

00205df0 <Thread1>:
/*
 * This is a periodic thread that does absolutely nothing except flashing
 * a LED attached to TP1.
 */
static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
  205df0:	b500      	push	{lr}
  205df2:	b083      	sub	sp, #12
  205df4:	9001      	str	r0, [sp, #4]

  (void)arg;
  chRegSetThreadName("blinker");
  205df6:	480b      	ldr	r0, [pc, #44]	; (205e24 <Thread1+0x34>)
  205df8:	f7ff ffca 	bl	205d90 <chRegSetThreadName>
  palSetLineMode(LINE_ARD_D13, PAL_MODE_OUTPUT_PUSHPULL);
  205dfc:	2201      	movs	r2, #1
  205dfe:	2102      	movs	r1, #2
  205e00:	4809      	ldr	r0, [pc, #36]	; (205e28 <Thread1+0x38>)
  205e02:	f7fc fe5d 	bl	202ac0 <_pal_lld_setgroupmode>
  while (true) {
    palSetLine(LINE_ARD_D13);
  205e06:	4b08      	ldr	r3, [pc, #32]	; (205e28 <Thread1+0x38>)
  205e08:	2202      	movs	r2, #2
  205e0a:	831a      	strh	r2, [r3, #24]
    chThdSleepMilliseconds(500);
  205e0c:	f241 3088 	movw	r0, #5000	; 0x1388
  205e10:	f7ff fa96 	bl	205340 <chThdSleep>
    palClearLine(LINE_ARD_D13);
  205e14:	4b04      	ldr	r3, [pc, #16]	; (205e28 <Thread1+0x38>)
  205e16:	2202      	movs	r2, #2
  205e18:	835a      	strh	r2, [r3, #26]
    chThdSleepMilliseconds(500);
  205e1a:	f241 3088 	movw	r0, #5000	; 0x1388
  205e1e:	f7ff fa8f 	bl	205340 <chThdSleep>
    palSetLine(LINE_ARD_D13);
  205e22:	e7f0      	b.n	205e06 <Thread1+0x16>
  205e24:	0800665c 	.word	0x0800665c
  205e28:	40022000 	.word	0x40022000
  205e2c:	00000000 	.word	0x00000000

00205e30 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
  205e30:	b500      	push	{lr}
  205e32:	b083      	sub	sp, #12
   * - HAL initialization, this also initializes the configured device drivers
   *   and performs the board-specific initializations.
   * - Kernel initialization, the main() function becomes a thread and the
   *   RTOS is active.
   */
  halInit();
  205e34:	f7fa fc1c 	bl	200670 <halInit>
  chSysInit();
  205e38:	f7fd fbd2 	bl	2035e0 <chSysInit>

  /*
   * Activates the serial driver 1 using the driver default configuration.
   */
  sdStart(&SD1, NULL);
  205e3c:	2100      	movs	r1, #0
  205e3e:	4819      	ldr	r0, [pc, #100]	; (205ea4 <main+0x74>)
  205e40:	f7fb fc1e 	bl	201680 <sdStart>

  /*
   * Starting GPT4 driver, it is used for triggering the ADC.
   */
  gptStart(&GPTD4, &gpt4cfg1);
  205e44:	4918      	ldr	r1, [pc, #96]	; (205ea8 <main+0x78>)
  205e46:	4819      	ldr	r0, [pc, #100]	; (205eac <main+0x7c>)
  205e48:	f7fb fa0a 	bl	201260 <gptStart>

  /*
   * Fixed an errata on the STM32F7xx, the DAC clock is required for ADC
   * triggering.
   */
  rccEnableDAC1(false);
  205e4c:	4b18      	ldr	r3, [pc, #96]	; (205eb0 <main+0x80>)
  205e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  205e50:	4a17      	ldr	r2, [pc, #92]	; (205eb0 <main+0x80>)
  205e52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  205e56:	6413      	str	r3, [r2, #64]	; 0x40
  205e58:	4b15      	ldr	r3, [pc, #84]	; (205eb0 <main+0x80>)
  205e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
  205e5c:	4a14      	ldr	r2, [pc, #80]	; (205eb0 <main+0x80>)
  205e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
  205e62:	6613      	str	r3, [r2, #96]	; 0x60
  205e64:	4b12      	ldr	r3, [pc, #72]	; (205eb0 <main+0x80>)
  205e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60

  /*
   * Activates the ADC1 driver and the temperature sensor.
   */
  adcStart(&ADCD1, NULL);
  205e68:	2100      	movs	r1, #0
  205e6a:	4812      	ldr	r0, [pc, #72]	; (205eb4 <main+0x84>)
  205e6c:	f7fb f8a8 	bl	200fc0 <adcStart>
  adcSTM32EnableTSVREFE();
  205e70:	f7fc fa2e 	bl	2022d0 <adcSTM32EnableTSVREFE>

  /*
   * Starts an ADC continuous conversion triggered with a period of
   * 1/10000 second.
   */
  adcStartConversion(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
  205e74:	2340      	movs	r3, #64	; 0x40
  205e76:	4a10      	ldr	r2, [pc, #64]	; (205eb8 <main+0x88>)
  205e78:	4910      	ldr	r1, [pc, #64]	; (205ebc <main+0x8c>)
  205e7a:	480e      	ldr	r0, [pc, #56]	; (205eb4 <main+0x84>)
  205e7c:	f7fb f8e8 	bl	201050 <adcStartConversion>
  gptStartContinuous(&GPTD4, 100);
  205e80:	2164      	movs	r1, #100	; 0x64
  205e82:	480a      	ldr	r0, [pc, #40]	; (205eac <main+0x7c>)
  205e84:	f7fb fa3c 	bl	201300 <gptStartContinuous>

  /*
   * Creates the example thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
  205e88:	2300      	movs	r3, #0
  205e8a:	9300      	str	r3, [sp, #0]
  205e8c:	4b0c      	ldr	r3, [pc, #48]	; (205ec0 <main+0x90>)
  205e8e:	2280      	movs	r2, #128	; 0x80
  205e90:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
  205e94:	480b      	ldr	r0, [pc, #44]	; (205ec4 <main+0x94>)
  205e96:	f7ff f923 	bl	2050e0 <chThdCreateStatic>

  /*
   * Normal main() thread activity, in this demo it does nothing.
   */
  while (true) {
    chThdSleepMilliseconds(500);
  205e9a:	f241 3088 	movw	r0, #5000	; 0x1388
  205e9e:	f7ff fa4f 	bl	205340 <chThdSleep>
  205ea2:	e7fa      	b.n	205e9a <main+0x6a>
  205ea4:	200008c8 	.word	0x200008c8
  205ea8:	08006620 	.word	0x08006620
  205eac:	200008b8 	.word	0x200008b8
  205eb0:	40023800 	.word	0x40023800
  205eb4:	20000800 	.word	0x20000800
  205eb8:	200013d4 	.word	0x200013d4
  205ebc:	08006630 	.word	0x08006630
  205ec0:	00205df1 	.word	0x00205df1
  205ec4:	200014e0 	.word	0x200014e0
