ARM GAS  /tmp/ccglrQSm.s 			page 1


   1              	# 0 "../../../os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S"
   2              	# 1 "/home/tuan/test_chibios/demos/STM32/RT-STM32F767ZI-NUCLEO144//"
   1              	...
   0              	
   0              	
   1              	/*
   2              	    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3              	
   4              	    Licensed under the Apache License, Version 2.0 (the "License");
   5              	    you may not use this file except in compliance with the License.
   6              	    You may obtain a copy of the License at
   7              	
   8              	        http://www.apache.org/licenses/LICENSE-2.0
   9              	
  10              	    Unless required by applicable law or agreed to in writing, software
  11              	    distributed under the License is distributed on an "AS IS" BASIS,
  12              	    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13              	    See the License for the specific language governing permissions and
  14              	    limitations under the License.
  15              	*/
  16              	
  17              	/**
  18              	 * @file    crt0_v7m.S
  19              	 * @brief   Generic ARMv7-M (Cortex-M3/M4/M7) startup file for ChibiOS.
  20              	 *
  21              	 * @addtogroup ARMCMx_GCC_STARTUP_V7M
  22              	 * @{
  23              	 */
  24              	
  25              	/*===========================================================================*/
  26              	/* Module constants.                                                         */
  27              	/*===========================================================================*/
  28              	
  29              	#if !defined(FALSE) || defined(__DOXYGEN__)
  30              	#define FALSE                               0
  31              	#endif
  32              	
  33              	#if !defined(TRUE) || defined(__DOXYGEN__)
  34              	#define TRUE                                1
  35              	#endif
  36              	
  37              	#define CONTROL_MODE_PRIVILEGED             0
  38              	#define CONTROL_MODE_UNPRIVILEGED           1
  39              	#define CONTROL_USE_MSP                     0
  40              	#define CONTROL_USE_PSP                     2
  41              	#define CONTROL_FPCA                        4
  42              	
  43              	#define FPCCR_ASPEN                         (1 << 31)
  44              	#define FPCCR_LSPEN                         (1 << 30)
  45              	
  46              	#define SCB_VTOR                            0xE000ED08
  47              	#define SCB_CPACR                           0xE000ED88
  48              	#define SCB_FPCCR                           0xE000EF34
  49              	#define SCB_FPDSCR                          0xE000EF3C
  50              	
  51              	/*===========================================================================*/
  52              	/* Module pre-compile time settings.                                         */
ARM GAS  /tmp/ccglrQSm.s 			page 2


  53              	/*===========================================================================*/
  54              	
  55              	/**
  56              	 * @brief   Enforces initialization of MSP.
  57              	 * @note    This is required if the boot process is not reliable for whatever
  58              	 *          reason (bad ROMs, bad bootloaders, bad debuggers=.
  59              	 */
  60              	#if !defined(CRT0_FORCE_MSP_INIT) || defined(__DOXYGEN__)
  61              	#define CRT0_FORCE_MSP_INIT                 TRUE
  62              	#endif
  63              	
  64              	/**
  65              	 * @brief   VTOR special register initialization.
  66              	 * @details VTOR is initialized to point to the vectors table.
  67              	 */
  68              	#if !defined(CRT0_VTOR_INIT) || defined(__DOXYGEN__)
  69              	#define CRT0_VTOR_INIT                      TRUE
  70              	#endif
  71              	
  72              	/**
  73              	 * @brief   FPU initialization switch.
  74              	 */
  75              	#if !defined(CRT0_INIT_FPU) || defined(__DOXYGEN__)
  76              	#if defined(CORTEX_USE_FPU) || defined(__DOXYGEN__)
  77              	#define CRT0_INIT_FPU                       CORTEX_USE_FPU
  78              	#else
  79              	#define CRT0_INIT_FPU                       FALSE
  80              	#endif
  81              	#endif
  82              	
  83              	/**
  84              	 * @brief   Control special register initialization value.
  85              	 * @details The system is setup to run in privileged mode using the PSP
  86              	 *          stack (dual stack mode).
  87              	 */
  88              	#if !defined(CRT0_CONTROL_INIT) || defined(__DOXYGEN__)
  89              	#define CRT0_CONTROL_INIT                   (CONTROL_USE_PSP |              \
  90              	                                             CONTROL_MODE_PRIVILEGED)
  91              	#endif
  92              	
  93              	/**
  94              	 * @brief   Core initialization switch.
  95              	 */
  96              	#if !defined(CRT0_INIT_CORE) || defined(__DOXYGEN__)
  97              	#define CRT0_INIT_CORE                      TRUE
  98              	#endif
  99              	
 100              	/**
 101              	 * @brief   Stack segments initialization switch.
 102              	 */
 103              	#if !defined(CRT0_STACKS_FILL_PATTERN) || defined(__DOXYGEN__)
 104              	#define CRT0_STACKS_FILL_PATTERN            0x55555555
 105              	#endif
 106              	
 107              	/**
 108              	 * @brief   Stack segments initialization switch.
 109              	 */
ARM GAS  /tmp/ccglrQSm.s 			page 3


 110              	#if !defined(CRT0_INIT_STACKS) || defined(__DOXYGEN__)
 111              	#define CRT0_INIT_STACKS                    TRUE
 112              	#endif
 113              	
 114              	/**
 115              	 * @brief   Vectors table initialization.
 116              	 * @details Vectors are copied in RAM on startup.
 117              	 */
 118              	#if !defined(CRT0_INIT_VECTORS) || defined(__DOXYGEN__)
 119              	#define CRT0_INIT_VECTORS                   FALSE
 120              	#endif
 121              	
 122              	/**
 123              	 * @brief   DATA segment initialization switch.
 124              	 */
 125              	#if !defined(CRT0_INIT_DATA) || defined(__DOXYGEN__)
 126              	#define CRT0_INIT_DATA                      TRUE
 127              	#endif
 128              	
 129              	/**
 130              	 * @brief   BSS segment initialization switch.
 131              	 */
 132              	#if !defined(CRT0_INIT_BSS) || defined(__DOXYGEN__)
 133              	#define CRT0_INIT_BSS                       TRUE
 134              	#endif
 135              	
 136              	/**
 137              	 * @brief   RAM areas initialization switch.
 138              	 */
 139              	#if !defined(CRT0_INIT_RAM_AREAS) || defined(__DOXYGEN__)
 140              	#define CRT0_INIT_RAM_AREAS                 TRUE
 141              	#endif
 142              	
 143              	/**
 144              	 * @brief   Constructors invocation switch.
 145              	 */
 146              	#if !defined(CRT0_CALL_CONSTRUCTORS) || defined(__DOXYGEN__)
 147              	#define CRT0_CALL_CONSTRUCTORS              TRUE
 148              	#endif
 149              	
 150              	/**
 151              	 * @brief   Destructors invocation switch.
 152              	 */
 153              	#if !defined(CRT0_CALL_DESTRUCTORS) || defined(__DOXYGEN__)
 154              	#define CRT0_CALL_DESTRUCTORS               TRUE
 155              	#endif
 156              	
 157              	/**
 158              	 * @brief   FPU FPCCR register initialization value.
 159              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 160              	 */
 161              	#if !defined(CRT0_FPCCR_INIT) || defined(__DOXYGEN__)
 162              	#define CRT0_FPCCR_INIT                     (FPCCR_ASPEN | FPCCR_LSPEN)
 163              	#endif
 164              	
 165              	/**
 166              	 * @brief   CPACR register initialization value.
ARM GAS  /tmp/ccglrQSm.s 			page 4


 167              	 * @note    Only used if @p CRT0_INIT_FPU is equal to @p TRUE.
 168              	 */
 169              	#if !defined(CRT0_CPACR_INIT) || defined(__DOXYGEN__)
 170              	#define CRT0_CPACR_INIT                     0x00F00000
 171              	#endif
 172              	
 173              	/*===========================================================================*/
 174              	/* Code section.                                                             */
 175              	/*===========================================================================*/
 176              	
 177              	#if !defined(__DOXYGEN__)
 178              	
 179              	                .syntax unified
 180              	                .cpu    cortex-m3
 181              	#if CRT0_INIT_FPU == TRUE
 182              	                .fpu    fpv4-sp-d16
 183              	#else
 184              	                .fpu    softvfp
 185              	#endif
 186              	
 187              	                .thumb
 188              	                .text
 189              	
 190              	/*
 191              	 * CRT0 entry point.
 192              	 */
 193              	                .align  2
 194              	                .thumb_func
 195              	                .global _crt0_entry
 196              	_crt0_entry:
 197              	                /* Interrupts are globally masked initially.*/
 198 0000 72B6     	                cpsid   i
 199              	
 200              	#if CRT0_FORCE_MSP_INIT == TRUE
 201              	                /* MSP stack pointers initialization.*/
 202 0002 3748     	                ldr     r0, =__main_stack_end__
 203 0004 80F30888 	                msr     MSP, r0
 204              	#endif
 205              	
 206              	                /* PSP stack pointers initialization.*/
 207 0008 3648     	                ldr     r0, =__process_stack_end__
 208 000a 80F30988 	                msr     PSP, r0
 209              	
 210              	#if CRT0_VTOR_INIT == TRUE
 211              	                /* Initial VTOR position enforced.*/
 212 000e 3648     	                ldr     r0, =_vectors
 213 0010 3649     	                ldr     r1, =SCB_VTOR
 214 0012 0860     	                str     r0, [r1]
 215              	#endif
 216              	
 217              	#if CRT0_INIT_FPU == TRUE
 218              	                /* FPU FPCCR initialization.*/
 219 0014 40F20000 	                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 220 0018 CCF20000 	                movt    r0, #CRT0_FPCCR_INIT >> 16
 221 001c 4EF63471 	                movw    r1, #SCB_FPCCR & 0xFFFF
 222 0020 CEF20001 	                movt    r1, #SCB_FPCCR >> 16
 223 0024 0860     	                str     r0, [r1]
ARM GAS  /tmp/ccglrQSm.s 			page 5


 224 0026 BFF34F8F 	                dsb
 225 002a BFF36F8F 	                isb
 226              	
 227              	                /* CPACR initialization.*/
 228 002e 40F20000 	                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 229 0032 C0F2F000 	                movt    r0, #CRT0_CPACR_INIT >> 16
 230 0036 4EF68851 	                movw    r1, #SCB_CPACR & 0xFFFF
 231 003a CEF20001 	                movt    r1, #SCB_CPACR >> 16
 232 003e 0860     	                str     r0, [r1]
 233 0040 BFF34F8F 	                dsb
 234 0044 BFF36F8F 	                isb
 235              	
 236              	                /* FPU FPSCR initially cleared.*/
 237 0048 4FF00000 	                mov     r0, #0
 238 004c E1EE100A 	                vmsr    FPSCR, r0
 239              	
 240              	                /* FPU FPDSCR initially cleared.*/
 241 0050 4EF63C71 	                movw    r1, #SCB_FPDSCR & 0xFFFF
 242 0054 CEF20001 	                movt    r1, #SCB_FPDSCR >> 16
 243 0058 0860     	                str     r0, [r1]
 244              	#endif
 245              	
 246              	                /* CONTROL register initialization as configured.*/
 247 005a 0220     	                movs    r0, #CRT0_CONTROL_INIT
 248 005c 80F31488 	                msr     CONTROL, r0
 249 0060 BFF36F8F 	                isb
 250              	
 251              	#if CRT0_INIT_CORE == TRUE
 252              	                /* Core initialization.*/
 253 0064 FFF7FEFF 	                bl      __cpu_init
 254              	#endif
 255              	
 256              	                /* Early initialization.*/
 257 0068 FFF7FEFF 	                bl      __early_init
 258              	
 259              	#if CRT0_INIT_STACKS == TRUE
 260 006c 4FF05530 	                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 261              	                /* Main Stack initialization. Note, it assumes that the
 262              	                   stack size is a multiple of 4 so the linker file must
 263              	                   ensure this.*/
 264 0070 1F49     	                ldr     r1, =__main_stack_base__
 265 0072 1B4A     	                ldr     r2, =__main_stack_end__
 266              	.Lmsloop:
 267 0074 9142     	                cmp     r1, r2
 268 0076 3CBF     	                itt     lo
 269 0078 41F8040B 	                strlo   r0, [r1], #4
 270 007c FAE7     	                blo     .Lmsloop
 271              	
 272              	                /* Process Stack initialization. Note, it assumes that the
 273              	                   stack size is a multiple of 4 so the linker file must
 274              	                   ensure this.*/
 275 007e 1D49     	                ldr     r1, =__process_stack_base__
 276 0080 184A     	                ldr     r2, =__process_stack_end__
 277              	.Lpsloop:
 278 0082 9142     	                cmp     r1, r2
 279 0084 3CBF     	                itt     lo
 280 0086 41F8040B 	                strlo   r0, [r1], #4
ARM GAS  /tmp/ccglrQSm.s 			page 6


 281 008a FAE7     	                blo     .Lpsloop
 282              	#endif
 283              	
 284              	#if CRT0_INIT_VECTORS == TRUE
 285              	                /* Vectors initialization. Note, it assumes that the vectors
 286              	                   size is a multiple of 4 so the linker file must ensure
 287              	                   this.*/
 288              	                ldr     r1, =__textvectors_base__
 289              	                ldr     r2, =__vectors_base__
 290              	                ldr     r3, =__vectors_end__
 291              	                mov     r4, r2
 292              	.Lvloop:
 293              	                cmp     r2, r3
 294              	                ittt    lo
 295              	                ldrlo   r0, [r1], #4
 296              	                strlo   r0, [r2], #4
 297              	                blo     .Lvloop
 298              	
 299              	                /* VTOR now pointing to the RAM table.*/
 300              	                ldr     r1, =SCB_VTOR
 301              	                str     r4, [r1]
 302              	#endif
 303              	
 304              	#if CRT0_INIT_DATA == TRUE
 305              	                /* Data initialization. Note, it assumes that the DATA
 306              	                   size is a multiple of 4 so the linker file must ensure
 307              	                   this.*/
 308 008c 1A49     	                ldr     r1, =__textdata_base__
 309 008e 1B4A     	                ldr     r2, =__data_base__
 310 0090 1B4B     	                ldr     r3, =__data_end__
 311              	.Ldloop:
 312 0092 9A42     	                cmp     r2, r3
 313 0094 3EBF     	                ittt    lo
 314 0096 51F8040B 	                ldrlo   r0, [r1], #4
 315 009a 42F8040B 	                strlo   r0, [r2], #4
 316 009e F8E7     	                blo     .Ldloop
 317              	#endif
 318              	
 319              	#if CRT0_INIT_BSS == TRUE
 320              	                /* BSS initialization. Note, it assumes that the BSS
 321              	                   size is a multiple of 4 so the linker file must ensure
 322              	                   this.*/
 323 00a0 0020     	                movs    r0, #0
 324 00a2 1849     	                ldr     r1, =__bss_base__
 325 00a4 184A     	                ldr     r2, =__bss_end__
 326              	.Lbloop:
 327 00a6 9142     	                cmp     r1, r2
 328 00a8 3CBF     	                itt     lo
 329 00aa 41F8040B 	                strlo   r0, [r1], #4
 330 00ae FAE7     	                blo     .Lbloop
 331              	#endif
 332              	
 333              	#if CRT0_INIT_RAM_AREAS == TRUE
 334              	                /* RAM areas initialization.*/
 335 00b0 FFF7FEFF 	                bl      __init_ram_areas
 336              	#endif
 337              	
ARM GAS  /tmp/ccglrQSm.s 			page 7


 338              	                /* Late initialization..*/
 339 00b4 FFF7FEFF 	                bl      __late_init
 340              	
 341              	#if CRT0_CALL_CONSTRUCTORS == TRUE
 342              	                /* Constructors invocation.*/
 343 00b8 144C     	                ldr     r4, =__init_array_base__
 344 00ba 154D     	                ldr     r5, =__init_array_end__
 345              	.Linitloop:
 346 00bc AC42     	                cmp     r4, r5
 347 00be 03DA     	                bge     .Lendinitloop
 348 00c0 54F8041B 	                ldr     r1, [r4], #4
 349 00c4 8847     	                blx     r1
 350 00c6 F9E7     	                b       .Linitloop
 351              	.Lendinitloop:
 352              	#endif
 353              	
 354              	                /* Main program invocation, r0 contains the returned value.*/
 355 00c8 FFF7FEFF 	                bl      main
 356              	
 357              	#if CRT0_CALL_DESTRUCTORS == TRUE
 358              	                /* Destructors invocation.*/
 359 00cc 114C     	                ldr     r4, =__fini_array_base__
 360 00ce 124D     	                ldr     r5, =__fini_array_end__
 361              	.Lfiniloop:
 362 00d0 AC42     	                cmp     r4, r5
 363 00d2 03DA     	                bge     .Lendfiniloop
 364 00d4 54F8041B 	                ldr     r1, [r4], #4
 365 00d8 8847     	                blx     r1
 366 00da F9E7     	                b       .Lfiniloop
 367              	.Lendfiniloop:
 368              	#endif
 369              	
 370              	                /* Branching to the defined exit handler.*/
 371 00dc FFF7FEBF 	                b       __default_exit
 371      00000000 
 371      00000000 
 371      00000000 
 371      08ED00E0 
ARM GAS  /tmp/ccglrQSm.s 			page 8


DEFINED SYMBOLS
../../../os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:193    .text:00000000 $t
../../../os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:196    .text:00000000 _crt0_entry
../../../os/common/startup/ARMCMx/compilers/GCC/crt0_v7m.S:371    .text:000000e0 $d

UNDEFINED SYMBOLS
__main_stack_end__
__process_stack_end__
_vectors
__cpu_init
__early_init
__main_stack_base__
__process_stack_base__
__textdata_base__
__data_base__
__data_end__
__bss_base__
__bss_end__
__init_ram_areas
__late_init
__init_array_base__
__init_array_end__
main
__fini_array_base__
__fini_array_end__
__default_exit
